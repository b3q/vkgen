// Code generated by vkgen; DO NOT EDIT.

package generated

func (vk *VK) AccountBan(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.ban", params, &response)
	return
}

// Changes a user password after access is successfully restored with the [vk.com/dev/auth.restore|auth.restore] method.
func (vk *VK) AccountChangePassword(params Params) (response AccountChangePasswordResponse, err error) {
	err = vk.RequestUnmarshal("account.changePassword", params, &response)
	return
}

// Returns a list of active ads (offers) which executed by the user will bring him/her respective number of votes to his balance in the application.
func (vk *VK) AccountGetActiveOffers(params Params) (response AccountGetActiveOffersResponse, err error) {
	err = vk.RequestUnmarshal("account.getActiveOffers", params, &response)
	return
}

// Gets settings of the user in this application.
func (vk *VK) AccountGetAppPermissions(params Params) (response AccountGetAppPermissionsResponse, err error) {
	err = vk.RequestUnmarshal("account.getAppPermissions", params, &response)
	return
}

// Returns a user's blacklist.
func (vk *VK) AccountGetBanned(params Params) (response AccountGetBannedResponse, err error) {
	err = vk.RequestUnmarshal("account.getBanned", params, &response)
	return
}

// Returns non-null values of user counters.
func (vk *VK) AccountGetCounters(params Params) (response AccountGetCountersResponse, err error) {
	err = vk.RequestUnmarshal("account.getCounters", params, &response)
	return
}

// Returns current account info.
func (vk *VK) AccountGetInfo(params Params) (response AccountGetInfoResponse, err error) {
	err = vk.RequestUnmarshal("account.getInfo", params, &response)
	return
}

// Returns the current account info.
func (vk *VK) AccountGetProfileInfo(params Params) (response AccountGetProfileInfoResponse, err error) {
	err = vk.RequestUnmarshal("account.getProfileInfo", params, &response)
	return
}

// Gets settings of push notifications.
func (vk *VK) AccountGetPushSettings(params Params) (response AccountGetPushSettingsResponse, err error) {
	err = vk.RequestUnmarshal("account.getPushSettings", params, &response)
	return
}

// Subscribes an iOS/Android/Windows Phone-based device to receive push notifications
func (vk *VK) AccountRegisterDevice(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.registerDevice", params, &response)
	return
}

// Edits current profile info.
func (vk *VK) AccountSaveProfileInfo(params Params) (response AccountSaveProfileInfoResponse, err error) {
	err = vk.RequestUnmarshal("account.saveProfileInfo", params, &response)
	return
}

// Allows to edit the current account info.
func (vk *VK) AccountSetInfo(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setInfo", params, &response)
	return
}

// Sets an application screen name (up to 17 characters), that is shown to the user in the left menu.
func (vk *VK) AccountSetNameInMenu(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setNameInMenu", params, &response)
	return
}

// Marks a current user as offline.
func (vk *VK) AccountSetOffline(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setOffline", params, &response)
	return
}

// Marks the current user as online for 15 minutes.
func (vk *VK) AccountSetOnline(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setOnline", params, &response)
	return
}

// Change push settings.
func (vk *VK) AccountSetPushSettings(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setPushSettings", params, &response)
	return
}

// Mutes push notifications for the set period of time.
func (vk *VK) AccountSetSilenceMode(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setSilenceMode", params, &response)
	return
}

func (vk *VK) AccountUnban(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.unban", params, &response)
	return
}

// Unsubscribes a device from push notifications.
func (vk *VK) AccountUnregisterDevice(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.unregisterDevice", params, &response)
	return
}

// Adds managers and/or supervisors to advertising account.
func (vk *VK) AdsAddOfficeUsers(params Params) (response AdsAddOfficeUsersResponse, err error) {
	err = vk.RequestUnmarshal("ads.addOfficeUsers", params, &response)
	return
}

// Allows to check the ad link.
func (vk *VK) AdsCheckLink(params Params) (response AdsCheckLinkResponse, err error) {
	err = vk.RequestUnmarshal("ads.checkLink", params, &response)
	return
}

// Creates ads.
func (vk *VK) AdsCreateAds(params Params) (response AdsCreateAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.createAds", params, &response)
	return
}

// Creates advertising campaigns.
func (vk *VK) AdsCreateCampaigns(params Params) (response AdsCreateCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.createCampaigns", params, &response)
	return
}

// Creates clients of an advertising agency.
func (vk *VK) AdsCreateClients(params Params) (response AdsCreateClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.createClients", params, &response)
	return
}

// Creates a group to re-target ads for users who visited advertiser's site (viewed information about the product, registered, etc.).
func (vk *VK) AdsCreateTargetGroup(params Params) (response AdsCreateTargetGroupResponse, err error) {
	err = vk.RequestUnmarshal("ads.createTargetGroup", params, &response)
	return
}

// Archives ads.
func (vk *VK) AdsDeleteAds(params Params) (response AdsDeleteAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteAds", params, &response)
	return
}

// Archives advertising campaigns.
func (vk *VK) AdsDeleteCampaigns(params Params) (response AdsDeleteCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteCampaigns", params, &response)
	return
}

// Archives clients of an advertising agency.
func (vk *VK) AdsDeleteClients(params Params) (response AdsDeleteClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteClients", params, &response)
	return
}

// Deletes a retarget group.
func (vk *VK) AdsDeleteTargetGroup(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteTargetGroup", params, &response)
	return
}

// Returns a list of advertising accounts.
func (vk *VK) AdsGetAccounts(params Params) (response AdsGetAccountsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAccounts", params, &response)
	return
}

// Returns number of ads.
func (vk *VK) AdsGetAds(params Params) (response AdsGetAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAds", params, &response)
	return
}

// Returns descriptions of ad layouts.
func (vk *VK) AdsGetAdsLayout(params Params) (response AdsGetAdsLayoutResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAdsLayout", params, &response)
	return
}

// Returns ad targeting parameters.
func (vk *VK) AdsGetAdsTargeting(params Params) (response AdsGetAdsTargetingResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAdsTargeting", params, &response)
	return
}

// Returns current budget of the advertising account.
func (vk *VK) AdsGetBudget(params Params) (response AdsGetBudgetResponse, err error) {
	err = vk.RequestUnmarshal("ads.getBudget", params, &response)
	return
}

// Returns a list of campaigns in an advertising account.
func (vk *VK) AdsGetCampaigns(params Params) (response AdsGetCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getCampaigns", params, &response)
	return
}

// Returns a list of possible ad categories.
func (vk *VK) AdsGetCategories(params Params) (response AdsGetCategoriesResponse, err error) {
	err = vk.RequestUnmarshal("ads.getCategories", params, &response)
	return
}

// Returns a list of advertising agency's clients.
func (vk *VK) AdsGetClients(params Params) (response AdsGetClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getClients", params, &response)
	return
}

// Returns demographics for ads or campaigns.
func (vk *VK) AdsGetDemographics(params Params) (response AdsGetDemographicsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getDemographics", params, &response)
	return
}

// Returns information about current state of a counter â€” number of remaining runs of methods and time to the next counter nulling in seconds.
func (vk *VK) AdsGetFloodStats(params Params) (response AdsGetFloodStatsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getFloodStats", params, &response)
	return
}

func (vk *VK) AdsGetLookalikeRequests(params Params) (response AdsGetLookalikeRequestsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getLookalikeRequests", params, &response)
	return
}

func (vk *VK) AdsGetMusicians(params Params) (response AdsGetMusiciansResponse, err error) {
	err = vk.RequestUnmarshal("ads.getMusicians", params, &response)
	return
}

// Returns a list of managers and supervisors of advertising account.
func (vk *VK) AdsGetOfficeUsers(params Params) (response AdsGetOfficeUsersResponse, err error) {
	err = vk.RequestUnmarshal("ads.getOfficeUsers", params, &response)
	return
}

// Returns detailed statistics of promoted posts reach from campaigns and ads.
func (vk *VK) AdsGetPostsReach(params Params) (response AdsGetPostsReachResponse, err error) {
	err = vk.RequestUnmarshal("ads.getPostsReach", params, &response)
	return
}

// Returns a reason of ad rejection for pre-moderation.
func (vk *VK) AdsGetRejectionReason(params Params) (response AdsGetRejectionReasonResponse, err error) {
	err = vk.RequestUnmarshal("ads.getRejectionReason", params, &response)
	return
}

// Returns statistics of performance indicators for ads, campaigns, clients or the whole account.
func (vk *VK) AdsGetStatistics(params Params) (response AdsGetStatisticsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getStatistics", params, &response)
	return
}

// Returns a set of auto-suggestions for various targeting parameters.
func (vk *VK) AdsGetSuggestionsRaw(params Params) ([]byte, error) {
	return vk.Request("ads.getSuggestions", params)
}

// Returns a list of target groups.
func (vk *VK) AdsGetTargetGroups(params Params) (response AdsGetTargetGroupsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getTargetGroups", params, &response)
	return
}

// Returns the size of targeting audience, and also recommended values for CPC and CPM.
func (vk *VK) AdsGetTargetingStats(params Params) (response AdsGetTargetingStatsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getTargetingStats", params, &response)
	return
}

// Returns URL to upload an ad photo to.
func (vk *VK) AdsGetUploadURL(params Params) (response AdsGetUploadURLResponse, err error) {
	err = vk.RequestUnmarshal("ads.getUploadURL", params, &response)
	return
}

// Returns URL to upload an ad video to.
func (vk *VK) AdsGetVideoUploadURL(params Params) (response AdsGetVideoUploadURLResponse, err error) {
	err = vk.RequestUnmarshal("ads.getVideoUploadURL", params, &response)
	return
}

// Imports a list of advertiser's contacts to count VK registered users against the target group.
func (vk *VK) AdsImportTargetContacts(params Params) (response AdsImportTargetContactsResponse, err error) {
	err = vk.RequestUnmarshal("ads.importTargetContacts", params, &response)
	return
}

// Removes managers and/or supervisors from advertising account.
func (vk *VK) AdsRemoveOfficeUsers(params Params) (response AdsRemoveOfficeUsersResponse, err error) {
	err = vk.RequestUnmarshal("ads.removeOfficeUsers", params, &response)
	return
}

// Edits ads.
func (vk *VK) AdsUpdateAds(params Params) (response AdsUpdateAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateAds", params, &response)
	return
}

// Edits advertising campaigns.
func (vk *VK) AdsUpdateCampaigns(params Params) (response AdsUpdateCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateCampaigns", params, &response)
	return
}

// Edits clients of an advertising agency.
func (vk *VK) AdsUpdateClients(params Params) (response AdsUpdateClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateClients", params, &response)
	return
}

// Edits a retarget group.
func (vk *VK) AdsUpdateTargetGroup(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateTargetGroup", params, &response)
	return
}

// Allows to update community app widget
func (vk *VK) AppWidgetsUpdate(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("appWidgets.update", params, &response)
	return
}

// Deletes all request notifications from the current app.
func (vk *VK) AppsDeleteAppRequests(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("apps.deleteAppRequests", params, &response)
	return
}

// Returns applications data.
func (vk *VK) AppsGet(params Params) (response AppsGetResponse, err error) {
	err = vk.RequestUnmarshal("apps.get", params, &response)
	return
}

// Returns a list of applications (apps) available to users in the App Catalog.
func (vk *VK) AppsGetCatalog(params Params) (response AppsGetCatalogResponse, err error) {
	err = vk.RequestUnmarshal("apps.getCatalog", params, &response)
	return
}

// Creates friends list for requests and invites in current app.
func (vk *VK) AppsGetFriendsList(params Params) (response AppsGetFriendsListResponse, err error) {
	err = vk.RequestUnmarshal("apps.getFriendsList", params, &response)
	return
}

// Returns players rating in the game.
func (vk *VK) AppsGetLeaderboardRaw(params Params) ([]byte, error) {
	return vk.Request("apps.getLeaderboard", params)
}

// Returns scopes for auth
func (vk *VK) AppsGetScopes(params Params) (response AppsGetScopesResponse, err error) {
	err = vk.RequestUnmarshal("apps.getScopes", params, &response)
	return
}

// Returns user score in app
func (vk *VK) AppsGetScore(params Params) (response AppsGetScoreResponse, err error) {
	err = vk.RequestUnmarshal("apps.getScore", params, &response)
	return
}

func (vk *VK) AppsPromoHasActiveGift(params Params) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("apps.promoHasActiveGift", params, &response)
	return
}

func (vk *VK) AppsPromoUseGift(params Params) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("apps.promoUseGift", params, &response)
	return
}

// Sends a request to another user in an app that uses VK authorization.
func (vk *VK) AppsSendRequest(params Params) (response AppsSendRequestResponse, err error) {
	err = vk.RequestUnmarshal("apps.sendRequest", params, &response)
	return
}

// Checks a user's phone number for correctness.
func (vk *VK) AuthCheckPhone(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("auth.checkPhone", params, &response)
	return
}

// Allows to restore account access using a code received via SMS. " This method is only available for apps with [vk.com/dev/auth_direct|Direct authorization] access. "
func (vk *VK) AuthRestore(params Params) (response AuthRestoreResponse, err error) {
	err = vk.RequestUnmarshal("auth.restore", params, &response)
	return
}

// Creates a new topic on a community's discussion board.
func (vk *VK) BoardAddTopic(params Params) (response BoardAddTopicResponse, err error) {
	err = vk.RequestUnmarshal("board.addTopic", params, &response)
	return
}

// Closes a topic on a community's discussion board so that comments cannot be posted.
func (vk *VK) BoardCloseTopic(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.closeTopic", params, &response)
	return
}

// Adds a comment on a topic on a community's discussion board.
func (vk *VK) BoardCreateComment(params Params) (response BoardCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("board.createComment", params, &response)
	return
}

// Deletes a comment on a topic on a community's discussion board.
func (vk *VK) BoardDeleteComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.deleteComment", params, &response)
	return
}

// Deletes a topic from a community's discussion board.
func (vk *VK) BoardDeleteTopic(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.deleteTopic", params, &response)
	return
}

// Edits a comment on a topic on a community's discussion board.
func (vk *VK) BoardEditComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.editComment", params, &response)
	return
}

// Edits the title of a topic on a community's discussion board.
func (vk *VK) BoardEditTopic(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.editTopic", params, &response)
	return
}

// Pins a topic (fixes its place) to the top of a community's discussion board.
func (vk *VK) BoardFixTopic(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.fixTopic", params, &response)
	return
}

// Returns a list of comments on a topic on a community's discussion board.
func (vk *VK) BoardGetCommentsRaw(params Params) ([]byte, error) {
	return vk.Request("board.getComments", params)
}

// Returns a list of topics on a community's discussion board.
func (vk *VK) BoardGetTopicsRaw(params Params) ([]byte, error) {
	return vk.Request("board.getTopics", params)
}

// Re-opens a previously closed topic on a community's discussion board.
func (vk *VK) BoardOpenTopic(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.openTopic", params, &response)
	return
}

// Restores a comment deleted from a topic on a community's discussion board.
func (vk *VK) BoardRestoreComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.restoreComment", params, &response)
	return
}

// Unpins a pinned topic from the top of a community's discussion board.
func (vk *VK) BoardUnfixTopic(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.unfixTopic", params, &response)
	return
}

// Returns list of chairs on a specified faculty.
func (vk *VK) DatabaseGetChairs(params Params) (response DatabaseGetChairsResponse, err error) {
	err = vk.RequestUnmarshal("database.getChairs", params, &response)
	return
}

// Returns a list of cities.
func (vk *VK) DatabaseGetCities(params Params) (response DatabaseGetCitiesResponse, err error) {
	err = vk.RequestUnmarshal("database.getCities", params, &response)
	return
}

// Returns information about cities by their IDs.
func (vk *VK) DatabaseGetCitiesByID(params Params) (response DatabaseGetCitiesByIDResponse, err error) {
	err = vk.RequestUnmarshal("database.getCitiesById", params, &response)
	return
}

// Returns a list of countries.
func (vk *VK) DatabaseGetCountries(params Params) (response DatabaseGetCountriesResponse, err error) {
	err = vk.RequestUnmarshal("database.getCountries", params, &response)
	return
}

// Returns information about countries by their IDs.
func (vk *VK) DatabaseGetCountriesByID(params Params) (response DatabaseGetCountriesByIDResponse, err error) {
	err = vk.RequestUnmarshal("database.getCountriesById", params, &response)
	return
}

// Returns a list of faculties (i.e., university departments).
func (vk *VK) DatabaseGetFaculties(params Params) (response DatabaseGetFacultiesResponse, err error) {
	err = vk.RequestUnmarshal("database.getFaculties", params, &response)
	return
}

// Get metro stations by city
func (vk *VK) DatabaseGetMetroStations(params Params) (response DatabaseGetMetroStationsResponse, err error) {
	err = vk.RequestUnmarshal("database.getMetroStations", params, &response)
	return
}

// Get metro station by his id
func (vk *VK) DatabaseGetMetroStationsByID(params Params) (response DatabaseGetMetroStationsByIDResponse, err error) {
	err = vk.RequestUnmarshal("database.getMetroStationsById", params, &response)
	return
}

// Returns a list of regions.
func (vk *VK) DatabaseGetRegions(params Params) (response DatabaseGetRegionsResponse, err error) {
	err = vk.RequestUnmarshal("database.getRegions", params, &response)
	return
}

// Returns a list of school classes specified for the country.
func (vk *VK) DatabaseGetSchoolClasses(params Params) (response DatabaseGetSchoolClassesResponse, err error) {
	err = vk.RequestUnmarshal("database.getSchoolClasses", params, &response)
	return
}

// Returns a list of schools.
func (vk *VK) DatabaseGetSchools(params Params) (response DatabaseGetSchoolsResponse, err error) {
	err = vk.RequestUnmarshal("database.getSchools", params, &response)
	return
}

// Returns a list of higher education institutions.
func (vk *VK) DatabaseGetUniversities(params Params) (response DatabaseGetUniversitiesResponse, err error) {
	err = vk.RequestUnmarshal("database.getUniversities", params, &response)
	return
}

// Copies a document to a user's or community's document list.
func (vk *VK) DocsAdd(params Params) (response DocsAddResponse, err error) {
	err = vk.RequestUnmarshal("docs.add", params, &response)
	return
}

// Deletes a user or community document.
func (vk *VK) DocsDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("docs.delete", params, &response)
	return
}

// Edits a document.
func (vk *VK) DocsEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("docs.edit", params, &response)
	return
}

// Returns detailed information about user or community documents.
func (vk *VK) DocsGet(params Params) (response DocsGetResponse, err error) {
	err = vk.RequestUnmarshal("docs.get", params, &response)
	return
}

// Returns information about documents by their IDs.
func (vk *VK) DocsGetByID(params Params) (response DocsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("docs.getById", params, &response)
	return
}

// Returns the server address for document upload.
func (vk *VK) DocsGetMessagesUploadServer(params Params) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("docs.getMessagesUploadServer", params, &response)
	return
}

// Returns documents types available for current user.
func (vk *VK) DocsGetTypes(params Params) (response DocsGetTypesResponse, err error) {
	err = vk.RequestUnmarshal("docs.getTypes", params, &response)
	return
}

// Returns the server address for document upload.
func (vk *VK) DocsGetUploadServer(params Params) (response DocsGetUploadServer, err error) {
	err = vk.RequestUnmarshal("docs.getUploadServer", params, &response)
	return
}

// Returns the server address for document upload onto a user's or community's wall.
func (vk *VK) DocsGetWallUploadServer(params Params) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("docs.getWallUploadServer", params, &response)
	return
}

// Saves a document after [vk.com/dev/upload_files_2|uploading it to a server].
func (vk *VK) DocsSave(params Params) (response DocsSaveResponse, err error) {
	err = vk.RequestUnmarshal("docs.save", params, &response)
	return
}

// Returns a list of documents matching the search criteria.
func (vk *VK) DocsSearch(params Params) (response DocsSearchResponse, err error) {
	err = vk.RequestUnmarshal("docs.search", params, &response)
	return
}

func (vk *VK) DownloadedGamesGetPaidStatus(params Params) (response DownloadedGamesPaidStatusResponse, err error) {
	err = vk.RequestUnmarshal("downloadedGames.getPaidStatus", params, &response)
	return
}

func (vk *VK) FaveAddArticle(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addArticle", params, &response)
	return
}

// Adds a link to user faves.
func (vk *VK) FaveAddLink(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addLink", params, &response)
	return
}

func (vk *VK) FaveAddPage(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addPage", params, &response)
	return
}

func (vk *VK) FaveAddPost(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addPost", params, &response)
	return
}

func (vk *VK) FaveAddProduct(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addProduct", params, &response)
	return
}

func (vk *VK) FaveAddTag(params Params) (response FaveAddTagResponse, err error) {
	err = vk.RequestUnmarshal("fave.addTag", params, &response)
	return
}

func (vk *VK) FaveAddVideo(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addVideo", params, &response)
	return
}

func (vk *VK) FaveEditTag(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.editTag", params, &response)
	return
}

func (vk *VK) FaveGetRaw(params Params) ([]byte, error) {
	return vk.Request("fave.get", params)
}

func (vk *VK) FaveGetPages(params Params) (response FaveGetPagesResponse, err error) {
	err = vk.RequestUnmarshal("fave.getPages", params, &response)
	return
}

func (vk *VK) FaveGetTags(params Params) (response FaveGetTagsResponse, err error) {
	err = vk.RequestUnmarshal("fave.getTags", params, &response)
	return
}

func (vk *VK) FaveMarkSeen(params Params) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("fave.markSeen", params, &response)
	return
}

func (vk *VK) FaveRemoveArticle(params Params) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeArticle", params, &response)
	return
}

// Removes link from the user's faves.
func (vk *VK) FaveRemoveLink(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeLink", params, &response)
	return
}

func (vk *VK) FaveRemovePage(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removePage", params, &response)
	return
}

func (vk *VK) FaveRemovePost(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removePost", params, &response)
	return
}

func (vk *VK) FaveRemoveProduct(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeProduct", params, &response)
	return
}

func (vk *VK) FaveRemoveTag(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeTag", params, &response)
	return
}

func (vk *VK) FaveReorderTags(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.reorderTags", params, &response)
	return
}

func (vk *VK) FaveSetPageTags(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.setPageTags", params, &response)
	return
}

func (vk *VK) FaveSetTags(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.setTags", params, &response)
	return
}

func (vk *VK) FaveTrackPageInteraction(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.trackPageInteraction", params, &response)
	return
}

// Approves or creates a friend request.
func (vk *VK) FriendsAdd(params Params) (response FriendsAddResponse, err error) {
	err = vk.RequestUnmarshal("friends.add", params, &response)
	return
}

// Creates a new friend list for the current user.
func (vk *VK) FriendsAddList(params Params) (response FriendsAddListResponse, err error) {
	err = vk.RequestUnmarshal("friends.addList", params, &response)
	return
}

// Checks the current user's friendship status with other specified users.
func (vk *VK) FriendsAreFriendsRaw(params Params) ([]byte, error) {
	return vk.Request("friends.areFriends", params)
}

// Declines a friend request or deletes a user from the current user's friend list.
func (vk *VK) FriendsDelete(params Params) (response FriendsDeleteResponse, err error) {
	err = vk.RequestUnmarshal("friends.delete", params, &response)
	return
}

// Marks all incoming friend requests as viewed.
func (vk *VK) FriendsDeleteAllRequests(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.deleteAllRequests", params, &response)
	return
}

// Deletes a friend list of the current user.
func (vk *VK) FriendsDeleteList(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.deleteList", params, &response)
	return
}

// Edits the friend lists of the selected user.
func (vk *VK) FriendsEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.edit", params, &response)
	return
}

// Edits a friend list of the current user.
func (vk *VK) FriendsEditList(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.editList", params, &response)
	return
}

// Returns a list of user IDs or detailed information about a user's friends.
func (vk *VK) FriendsGetRaw(params Params) ([]byte, error) {
	return vk.Request("friends.get", params)
}

// Returns a list of IDs of the current user's friends who installed the application.
func (vk *VK) FriendsGetAppUsers(params Params) (response FriendsGetAppUsersResponse, err error) {
	err = vk.RequestUnmarshal("friends.getAppUsers", params, &response)
	return
}

// Returns a list of the current user's friends whose phone numbers, validated or specified in a profile, are in a given list.
func (vk *VK) FriendsGetByPhones(params Params) (response FriendsGetByPhonesResponse, err error) {
	err = vk.RequestUnmarshal("friends.getByPhones", params, &response)
	return
}

// Returns a list of the user's friend lists.
func (vk *VK) FriendsGetLists(params Params) (response FriendsGetListsResponse, err error) {
	err = vk.RequestUnmarshal("friends.getLists", params, &response)
	return
}

// Returns a list of user IDs of the mutual friends of two users.
func (vk *VK) FriendsGetMutualRaw(params Params) ([]byte, error) {
	return vk.Request("friends.getMutual", params)
}

// Returns a list of user IDs of a user's friends who are online.
func (vk *VK) FriendsGetOnlineRaw(params Params) ([]byte, error) {
	return vk.Request("friends.getOnline", params)
}

// Returns a list of user IDs of the current user's recently added friends.
func (vk *VK) FriendsGetRecent(params Params) (response FriendsGetRecentResponse, err error) {
	err = vk.RequestUnmarshal("friends.getRecent", params, &response)
	return
}

// Returns information about the current user's incoming and outgoing friend requests.
func (vk *VK) FriendsGetRequestsRaw(params Params) ([]byte, error) {
	return vk.Request("friends.getRequests", params)
}

// Returns a list of profiles of users whom the current user may know.
func (vk *VK) FriendsGetSuggestions(params Params) (response FriendsGetSuggestionsResponse, err error) {
	err = vk.RequestUnmarshal("friends.getSuggestions", params, &response)
	return
}

// Returns a list of friends matching the search criteria.
func (vk *VK) FriendsSearch(params Params) (response FriendsSearchResponse, err error) {
	err = vk.RequestUnmarshal("friends.search", params, &response)
	return
}

// Returns a list of user gifts.
func (vk *VK) GiftsGet(params Params) (response GiftsGetResponse, err error) {
	err = vk.RequestUnmarshal("gifts.get", params, &response)
	return
}

func (vk *VK) GroupsAddAddress(params Params) (response GroupsAddAddressResponse, err error) {
	err = vk.RequestUnmarshal("groups.addAddress", params, &response)
	return
}

func (vk *VK) GroupsAddCallbackServer(params Params) (response GroupsAddCallbackServerResponse, err error) {
	err = vk.RequestUnmarshal("groups.addCallbackServer", params, &response)
	return
}

// Allows to add a link to the community.
func (vk *VK) GroupsAddLink(params Params) (response GroupsAddLinkResponse, err error) {
	err = vk.RequestUnmarshal("groups.addLink", params, &response)
	return
}

// Allows to approve join request to the community.
func (vk *VK) GroupsApproveRequest(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.approveRequest", params, &response)
	return
}

func (vk *VK) GroupsBan(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.ban", params, &response)
	return
}

// Creates a new community.
func (vk *VK) GroupsCreate(params Params) (response GroupsCreateResponse, err error) {
	err = vk.RequestUnmarshal("groups.create", params, &response)
	return
}

func (vk *VK) GroupsDeleteCallbackServer(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.deleteCallbackServer", params, &response)
	return
}

// Allows to delete a link from the community.
func (vk *VK) GroupsDeleteLink(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.deleteLink", params, &response)
	return
}

func (vk *VK) GroupsDisableOnline(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.disableOnline", params, &response)
	return
}

// Edits a community.
func (vk *VK) GroupsEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.edit", params, &response)
	return
}

func (vk *VK) GroupsEditAddress(params Params) (response GroupsEditAddressResponse, err error) {
	err = vk.RequestUnmarshal("groups.editAddress", params, &response)
	return
}

func (vk *VK) GroupsEditCallbackServer(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.editCallbackServer", params, &response)
	return
}

// Allows to edit a link in the community.
func (vk *VK) GroupsEditLink(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.editLink", params, &response)
	return
}

// Allows to add, remove or edit the community manager.
func (vk *VK) GroupsEditManager(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.editManager", params, &response)
	return
}

func (vk *VK) GroupsEnableOnline(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.enableOnline", params, &response)
	return
}

// Returns a list of the communities to which a user belongs.
func (vk *VK) GroupsGetRaw(params Params) ([]byte, error) {
	return vk.Request("groups.get", params)
}

// Returns a list of community addresses.
func (vk *VK) GroupsGetAddresses(params Params) (response GroupsGetAddressesResponse, err error) {
	err = vk.RequestUnmarshal("groups.getAddresses", params, &response)
	return
}

// Returns a list of users on a community blacklist.
func (vk *VK) GroupsGetBanned(params Params) (response GroupsGetBannedResponse, err error) {
	err = vk.RequestUnmarshal("groups.getBanned", params, &response)
	return
}

// Returns information about communities by their IDs.
func (vk *VK) GroupsGetByID(params Params) (response GroupsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("groups.getById", params, &response)
	return
}

// Returns Callback API confirmation code for the community.
func (vk *VK) GroupsGetCallbackConfirmationCode(params Params) (response GroupsGetCallbackConfirmationCodeResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCallbackConfirmationCode", params, &response)
	return
}

func (vk *VK) GroupsGetCallbackServers(params Params) (response GroupsGetCallbackServersResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCallbackServers", params, &response)
	return
}

// Returns [vk.com/dev/callback_api|Callback API] notifications settings.
func (vk *VK) GroupsGetCallbackSettings(params Params) (response GroupsGetCallbackSettingsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCallbackSettings", params, &response)
	return
}

// Returns communities list for a catalog category.
func (vk *VK) GroupsGetCatalog(params Params) (response GroupsGetCatalogResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCatalog", params, &response)
	return
}

// Returns categories list for communities catalog
func (vk *VK) GroupsGetCatalogInfoRaw(params Params) ([]byte, error) {
	return vk.Request("groups.getCatalogInfo", params)
}

// Returns invited users list of a community
func (vk *VK) GroupsGetInvitedUsers(params Params) (response GroupsGetInvitedUsersResponse, err error) {
	err = vk.RequestUnmarshal("groups.getInvitedUsers", params, &response)
	return
}

// Returns a list of invitations to join communities and events.
func (vk *VK) GroupsGetInvitesRaw(params Params) ([]byte, error) {
	return vk.Request("groups.getInvites", params)
}

// Returns the data needed to query a Long Poll server for events
func (vk *VK) GroupsGetLongPollServer(params Params) (response GroupsGetLongPollServerResponse, err error) {
	err = vk.RequestUnmarshal("groups.getLongPollServer", params, &response)
	return
}

// Returns Long Poll notification settings
func (vk *VK) GroupsGetLongPollSettings(params Params) (response GroupsGetLongPollSettingsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getLongPollSettings", params, &response)
	return
}

// Returns a list of community members.
func (vk *VK) GroupsGetMembersRaw(params Params) ([]byte, error) {
	return vk.Request("groups.getMembers", params)
}

// Returns a list of requests to the community.
func (vk *VK) GroupsGetRequestsRaw(params Params) ([]byte, error) {
	return vk.Request("groups.getRequests", params)
}

// Returns community settings.
func (vk *VK) GroupsGetSettings(params Params) (response GroupsGetSettingsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getSettings", params, &response)
	return
}

func (vk *VK) GroupsGetTokenPermissions(params Params) (response GroupsGetTokenPermissionsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getTokenPermissions", params, &response)
	return
}

// Allows to invite friends to the community.
func (vk *VK) GroupsInvite(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.invite", params, &response)
	return
}

// Returns information specifying whether a user is a member of a community.
func (vk *VK) GroupsIsMemberRaw(params Params) ([]byte, error) {
	return vk.Request("groups.isMember", params)
}

// With this method you can join the group or public page, and also confirm your participation in an event.
func (vk *VK) GroupsJoin(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.join", params, &response)
	return
}

// With this method you can leave a group, public page, or event.
func (vk *VK) GroupsLeave(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.leave", params, &response)
	return
}

// Removes a user from the community.
func (vk *VK) GroupsRemoveUser(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.removeUser", params, &response)
	return
}

// Allows to reorder links in the community.
func (vk *VK) GroupsReorderLink(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.reorderLink", params, &response)
	return
}

// Returns a list of communities matching the search criteria.
func (vk *VK) GroupsSearch(params Params) (response GroupsSearchResponse, err error) {
	err = vk.RequestUnmarshal("groups.search", params, &response)
	return
}

// Allow to set notifications settings for group.
func (vk *VK) GroupsSetCallbackSettings(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.setCallbackSettings", params, &response)
	return
}

// Sets Long Poll notification settings
func (vk *VK) GroupsSetLongPollSettings(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.setLongPollSettings", params, &response)
	return
}

func (vk *VK) GroupsUnban(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.unban", params, &response)
	return
}

// Checks if the user can start the lead.
func (vk *VK) LeadsCheckUser(params Params) (response LeadsCheckUserResponse, err error) {
	err = vk.RequestUnmarshal("leads.checkUser", params, &response)
	return
}

// Completes the lead started by user.
func (vk *VK) LeadsComplete(params Params) (response LeadsCompleteResponse, err error) {
	err = vk.RequestUnmarshal("leads.complete", params, &response)
	return
}

// Returns lead stats data.
func (vk *VK) LeadsGetStats(params Params) (response LeadsGetStatsResponse, err error) {
	err = vk.RequestUnmarshal("leads.getStats", params, &response)
	return
}

// Returns a list of last user actions for the offer.
func (vk *VK) LeadsGetUsers(params Params) (response LeadsGetUsersResponse, err error) {
	err = vk.RequestUnmarshal("leads.getUsers", params, &response)
	return
}

// Counts the metric event.
func (vk *VK) LeadsMetricHit(params Params) (response LeadsMetricHitResponse, err error) {
	err = vk.RequestUnmarshal("leads.metricHit", params, &response)
	return
}

// Creates new session for the user passing the offer.
func (vk *VK) LeadsStart(params Params) (response LeadsStartResponse, err error) {
	err = vk.RequestUnmarshal("leads.start", params, &response)
	return
}

// Adds the specified object to the 'Likes' list of the current user.
func (vk *VK) LikesAdd(params Params) (response LikesAddResponse, err error) {
	err = vk.RequestUnmarshal("likes.add", params, &response)
	return
}

// Deletes the specified object from the 'Likes' list of the current user.
func (vk *VK) LikesDelete(params Params) (response LikesDeleteResponse, err error) {
	err = vk.RequestUnmarshal("likes.delete", params, &response)
	return
}

// Returns a list of IDs of users who added the specified object to their 'Likes' list.
func (vk *VK) LikesGetListRaw(params Params) ([]byte, error) {
	return vk.Request("likes.getList", params)
}

// Checks for the object in the 'Likes' list of the specified user.
func (vk *VK) LikesIsLiked(params Params) (response LikesIsLikedResponse, err error) {
	err = vk.RequestUnmarshal("likes.isLiked", params, &response)
	return
}

// Ads a new item to the market.
func (vk *VK) MarketAdd(params Params) (response MarketAddResponse, err error) {
	err = vk.RequestUnmarshal("market.add", params, &response)
	return
}

// Creates new collection of items
func (vk *VK) MarketAddAlbum(params Params) (response MarketAddAlbumResponse, err error) {
	err = vk.RequestUnmarshal("market.addAlbum", params, &response)
	return
}

// Adds an item to one or multiple collections.
func (vk *VK) MarketAddToAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.addToAlbum", params, &response)
	return
}

// Creates a new comment for an item.
func (vk *VK) MarketCreateComment(params Params) (response MarketCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("market.createComment", params, &response)
	return
}

// Deletes an item.
func (vk *VK) MarketDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.delete", params, &response)
	return
}

// Deletes a collection of items.
func (vk *VK) MarketDeleteAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.deleteAlbum", params, &response)
	return
}

// Deletes an item's comment
func (vk *VK) MarketDeleteComment(params Params) (response MarketDeleteCommentResponse, err error) {
	err = vk.RequestUnmarshal("market.deleteComment", params, &response)
	return
}

// Edits an item.
func (vk *VK) MarketEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.edit", params, &response)
	return
}

// Edits a collection of items
func (vk *VK) MarketEditAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.editAlbum", params, &response)
	return
}

// Chages item comment's text
func (vk *VK) MarketEditComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.editComment", params, &response)
	return
}

// Returns items list for a community.
func (vk *VK) MarketGetRaw(params Params) ([]byte, error) {
	return vk.Request("market.get", params)
}

// Returns items album's data
func (vk *VK) MarketGetAlbumByID(params Params) (response MarketGetAlbumByIDResponse, err error) {
	err = vk.RequestUnmarshal("market.getAlbumById", params, &response)
	return
}

// Returns community's collections list.
func (vk *VK) MarketGetAlbums(params Params) (response MarketGetAlbumsResponse, err error) {
	err = vk.RequestUnmarshal("market.getAlbums", params, &response)
	return
}

// Returns information about market items by their ids.
func (vk *VK) MarketGetByIDRaw(params Params) ([]byte, error) {
	return vk.Request("market.getById", params)
}

// Returns a list of market categories.
func (vk *VK) MarketGetCategories(params Params) (response MarketGetCategoriesResponse, err error) {
	err = vk.RequestUnmarshal("market.getCategories", params, &response)
	return
}

// Returns comments list for an item.
func (vk *VK) MarketGetComments(params Params) (response MarketGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("market.getComments", params, &response)
	return
}

// Removes an item from one or multiple collections.
func (vk *VK) MarketRemoveFromAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.removeFromAlbum", params, &response)
	return
}

// Reorders the collections list.
func (vk *VK) MarketReorderAlbums(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.reorderAlbums", params, &response)
	return
}

// Changes item place in a collection.
func (vk *VK) MarketReorderItems(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.reorderItems", params, &response)
	return
}

// Sends a complaint to the item.
func (vk *VK) MarketReport(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.report", params, &response)
	return
}

// Sends a complaint to the item's comment.
func (vk *VK) MarketReportComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.reportComment", params, &response)
	return
}

// Restores recently deleted item
func (vk *VK) MarketRestore(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.restore", params, &response)
	return
}

// Restores a recently deleted comment
func (vk *VK) MarketRestoreComment(params Params) (response MarketRestoreCommentResponse, err error) {
	err = vk.RequestUnmarshal("market.restoreComment", params, &response)
	return
}

// Searches market items in a community's catalog
func (vk *VK) MarketSearchRaw(params Params) ([]byte, error) {
	return vk.Request("market.search", params)
}

// Adds a new user to a chat.
func (vk *VK) MessagesAddChatUser(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.addChatUser", params, &response)
	return
}

// Allows sending messages from community to the current user.
func (vk *VK) MessagesAllowMessagesFromGroup(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.allowMessagesFromGroup", params, &response)
	return
}

// Creates a chat with several participants.
func (vk *VK) MessagesCreateChat(params Params) (response MessagesCreateChatResponse, err error) {
	err = vk.RequestUnmarshal("messages.createChat", params, &response)
	return
}

// Deletes one or more messages.
func (vk *VK) MessagesDelete(params Params) (response MessagesDeleteResponse, err error) {
	err = vk.RequestUnmarshal("messages.delete", params, &response)
	return
}

// Deletes a chat's cover picture.
func (vk *VK) MessagesDeleteChatPhoto(params Params) (response MessagesDeleteChatPhotoResponse, err error) {
	err = vk.RequestUnmarshal("messages.deleteChatPhoto", params, &response)
	return
}

// Deletes all private messages in a conversation.
func (vk *VK) MessagesDeleteConversation(params Params) (response MessagesDeleteConversationResponse, err error) {
	err = vk.RequestUnmarshal("messages.deleteConversation", params, &response)
	return
}

// Denies sending message from community to the current user.
func (vk *VK) MessagesDenyMessagesFromGroup(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.denyMessagesFromGroup", params, &response)
	return
}

// Edits the message.
func (vk *VK) MessagesEdit(params Params) (response MessagesEditResponse, err error) {
	err = vk.RequestUnmarshal("messages.edit", params, &response)
	return
}

// Edits the title of a chat.
func (vk *VK) MessagesEditChat(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.editChat", params, &response)
	return
}

// Returns messages by their IDs within the conversation.
func (vk *VK) MessagesGetByConversationMessageID(params Params) (response MessagesGetByConversationMessageIDResponse, err error) {
	err = vk.RequestUnmarshal("messages.getByConversationMessageId", params, &response)
	return
}

// Returns messages by their IDs.
func (vk *VK) MessagesGetByIDRaw(params Params) ([]byte, error) {
	return vk.Request("messages.getById", params)
}

func (vk *VK) MessagesGetChatPreview(params Params) (response MessagesGetChatPreviewResponse, err error) {
	err = vk.RequestUnmarshal("messages.getChatPreview", params, &response)
	return
}

// Returns a list of IDs of users participating in a chat.
func (vk *VK) MessagesGetConversationMembers(params Params) (response MessagesGetConversationMembersResponse, err error) {
	err = vk.RequestUnmarshal("messages.getConversationMembers", params, &response)
	return
}

// Returns a list of the current user's conversations.
func (vk *VK) MessagesGetConversations(params Params) (response MessagesGetConversationsResponse, err error) {
	err = vk.RequestUnmarshal("messages.getConversations", params, &response)
	return
}

// Returns conversations by their IDs
func (vk *VK) MessagesGetConversationsByIDRaw(params Params) ([]byte, error) {
	return vk.Request("messages.getConversationsById", params)
}

// Returns message history for the specified user or group chat.
func (vk *VK) MessagesGetHistory(params Params) (response MessagesGetHistoryResponse, err error) {
	err = vk.RequestUnmarshal("messages.getHistory", params, &response)
	return
}

// Returns media files from the dialog or group chat.
func (vk *VK) MessagesGetHistoryAttachments(params Params) (response MessagesGetHistoryAttachmentsResponse, err error) {
	err = vk.RequestUnmarshal("messages.getHistoryAttachments", params, &response)
	return
}

func (vk *VK) MessagesGetInviteLink(params Params) (response MessagesGetInviteLinkResponse, err error) {
	err = vk.RequestUnmarshal("messages.getInviteLink", params, &response)
	return
}

// Returns a user's current status and date of last activity.
func (vk *VK) MessagesGetLastActivity(params Params) (response MessagesGetLastActivityResponse, err error) {
	err = vk.RequestUnmarshal("messages.getLastActivity", params, &response)
	return
}

// Returns updates in user's private messages.
func (vk *VK) MessagesGetLongPollHistory(params Params) (response MessagesGetLongPollHistoryResponse, err error) {
	err = vk.RequestUnmarshal("messages.getLongPollHistory", params, &response)
	return
}

// Returns data required for connection to a Long Poll server.
func (vk *VK) MessagesGetLongPollServer(params Params) (response MessagesGetLongPollServerResponse, err error) {
	err = vk.RequestUnmarshal("messages.getLongPollServer", params, &response)
	return
}

// Returns information whether sending messages from the community to current user is allowed.
func (vk *VK) MessagesIsMessagesFromGroupAllowed(params Params) (response MessagesIsMessagesFromGroupAllowedResponse, err error) {
	err = vk.RequestUnmarshal("messages.isMessagesFromGroupAllowed", params, &response)
	return
}

func (vk *VK) MessagesJoinChatByInviteLink(params Params) (response MessagesJoinChatByInviteLinkResponse, err error) {
	err = vk.RequestUnmarshal("messages.joinChatByInviteLink", params, &response)
	return
}

// Marks and unmarks conversations as unanswered.
func (vk *VK) MessagesMarkAsAnsweredConversation(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsAnsweredConversation", params, &response)
	return
}

// Marks and unmarks messages as important (starred).
func (vk *VK) MessagesMarkAsImportant(params Params) (response MessagesMarkAsImportantResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsImportant", params, &response)
	return
}

// Marks and unmarks conversations as important.
func (vk *VK) MessagesMarkAsImportantConversation(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsImportantConversation", params, &response)
	return
}

// Marks messages as read.
func (vk *VK) MessagesMarkAsRead(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsRead", params, &response)
	return
}

// Pin a message.
func (vk *VK) MessagesPin(params Params) (response MessagesPinResponse, err error) {
	err = vk.RequestUnmarshal("messages.pin", params, &response)
	return
}

// Allows the current user to leave a chat or, if the current user started the chat, allows the user to remove another user from the chat.
func (vk *VK) MessagesRemoveChatUser(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.removeChatUser", params, &response)
	return
}

// Restores a deleted message.
func (vk *VK) MessagesRestore(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.restore", params, &response)
	return
}

// Returns a list of the current user's private messages that match search criteria.
func (vk *VK) MessagesSearch(params Params) (response MessagesSearchResponse, err error) {
	err = vk.RequestUnmarshal("messages.search", params, &response)
	return
}

// Returns a list of the current user's conversations that match search criteria.
func (vk *VK) MessagesSearchConversations(params Params) (response MessagesSearchConversationsResponse, err error) {
	err = vk.RequestUnmarshal("messages.searchConversations", params, &response)
	return
}

// Sends a message.
func (vk *VK) MessagesSendRaw(params Params) ([]byte, error) {
	return vk.Request("messages.send", params)
}

func (vk *VK) MessagesSendMessageEventAnswer(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.sendMessageEventAnswer", params, &response)
	return
}

// Changes the status of a user as typing in a conversation.
func (vk *VK) MessagesSetActivity(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.setActivity", params, &response)
	return
}

// Sets a previously-uploaded picture as the cover picture of a chat.
func (vk *VK) MessagesSetChatPhoto(params Params) (response MessagesSetChatPhotoResponse, err error) {
	err = vk.RequestUnmarshal("messages.setChatPhoto", params, &response)
	return
}

func (vk *VK) MessagesUnpin(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.unpin", params, &response)
	return
}

// Prevents news from specified users and communities from appearing in the current user's newsfeed.
func (vk *VK) NewsfeedAddBan(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.addBan", params, &response)
	return
}

// Allows news from previously banned users and communities to be shown in the current user's newsfeed.
func (vk *VK) NewsfeedDeleteBan(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.deleteBan", params, &response)
	return
}

func (vk *VK) NewsfeedDeleteList(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.deleteList", params, &response)
	return
}

// Returns data required to show newsfeed for the current user.
func (vk *VK) NewsfeedGet(params Params) (response NewsfeedGetResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.get", params, &response)
	return
}

// Returns a list of users and communities banned from the current user's newsfeed.
func (vk *VK) NewsfeedGetBannedRaw(params Params) ([]byte, error) {
	return vk.Request("newsfeed.getBanned", params)
}

// Returns a list of comments in the current user's newsfeed.
func (vk *VK) NewsfeedGetComments(params Params) (response NewsfeedGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getComments", params, &response)
	return
}

// Returns a list of newsfeeds followed by the current user.
func (vk *VK) NewsfeedGetListsRaw(params Params) ([]byte, error) {
	return vk.Request("newsfeed.getLists", params)
}

// Returns a list of posts on user walls in which the current user is mentioned.
func (vk *VK) NewsfeedGetMentions(params Params) (response NewsfeedGetMentionsResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getMentions", params, &response)
	return
}

// , Returns a list of newsfeeds recommended to the current user.
func (vk *VK) NewsfeedGetRecommended(params Params) (response NewsfeedGetRecommendedResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getRecommended", params, &response)
	return
}

// Returns communities and users that current user is suggested to follow.
func (vk *VK) NewsfeedGetSuggestedSources(params Params) (response NewsfeedGetSuggestedSourcesResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getSuggestedSources", params, &response)
	return
}

// Hides an item from the newsfeed.
func (vk *VK) NewsfeedIgnoreItem(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.ignoreItem", params, &response)
	return
}

// Creates and edits user newsfeed lists
func (vk *VK) NewsfeedSaveList(params Params) (response NewsfeedSaveListResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.saveList", params, &response)
	return
}

// Returns search results by statuses.
func (vk *VK) NewsfeedSearchRaw(params Params) ([]byte, error) {
	return vk.Request("newsfeed.search", params)
}

// Returns a hidden item to the newsfeed.
func (vk *VK) NewsfeedUnignoreItem(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.unignoreItem", params, &response)
	return
}

// Unsubscribes the current user from specified newsfeeds.
func (vk *VK) NewsfeedUnsubscribe(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.unsubscribe", params, &response)
	return
}

// Creates a new note for the current user.
func (vk *VK) NotesAdd(params Params) (response NotesAddResponse, err error) {
	err = vk.RequestUnmarshal("notes.add", params, &response)
	return
}

// Adds a new comment on a note.
func (vk *VK) NotesCreateComment(params Params) (response NotesCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("notes.createComment", params, &response)
	return
}

// Deletes a note of the current user.
func (vk *VK) NotesDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.delete", params, &response)
	return
}

// Deletes a comment on a note.
func (vk *VK) NotesDeleteComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.deleteComment", params, &response)
	return
}

// Edits a note of the current user.
func (vk *VK) NotesEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.edit", params, &response)
	return
}

// Edits a comment on a note.
func (vk *VK) NotesEditComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.editComment", params, &response)
	return
}

// Returns a list of notes created by a user.
func (vk *VK) NotesGet(params Params) (response NotesGetResponse, err error) {
	err = vk.RequestUnmarshal("notes.get", params, &response)
	return
}

// Returns a note by its ID.
func (vk *VK) NotesGetByID(params Params) (response NotesGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("notes.getById", params, &response)
	return
}

// Returns a list of comments on a note.
func (vk *VK) NotesGetComments(params Params) (response NotesGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("notes.getComments", params, &response)
	return
}

// Restores a deleted comment on a note.
func (vk *VK) NotesRestoreComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.restoreComment", params, &response)
	return
}

// Returns a list of notifications about other users' feedback to the current user's wall posts.
func (vk *VK) NotificationsGet(params Params) (response NotificationsGetResponse, err error) {
	err = vk.RequestUnmarshal("notifications.get", params, &response)
	return
}

// Resets the counter of new notifications about other users' feedback to the current user's wall posts.
func (vk *VK) NotificationsMarkAsViewed(params Params) (response NotificationsMarkAsViewedResponse, err error) {
	err = vk.RequestUnmarshal("notifications.markAsViewed", params, &response)
	return
}

func (vk *VK) NotificationsSendMessage(params Params) (response NotificationsSendMessageResponse, err error) {
	err = vk.RequestUnmarshal("notifications.sendMessage", params, &response)
	return
}

func (vk *VK) OrdersCancelSubscription(params Params) (response OrdersCancelSubscriptionResponse, err error) {
	err = vk.RequestUnmarshal("orders.cancelSubscription", params, &response)
	return
}

// Changes order status.
func (vk *VK) OrdersChangeState(params Params) (response OrdersChangeStateResponse, err error) {
	err = vk.RequestUnmarshal("orders.changeState", params, &response)
	return
}

// Returns a list of orders.
func (vk *VK) OrdersGet(params Params) (response OrdersGetResponse, err error) {
	err = vk.RequestUnmarshal("orders.get", params, &response)
	return
}

func (vk *VK) OrdersGetAmount(params Params) (response OrdersGetAmountResponse, err error) {
	err = vk.RequestUnmarshal("orders.getAmount", params, &response)
	return
}

// Returns information about orders by their IDs.
func (vk *VK) OrdersGetByID(params Params) (response OrdersGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("orders.getById", params, &response)
	return
}

func (vk *VK) OrdersGetUserSubscriptionByID(params Params) (response OrdersGetUserSubscriptionByIDResponse, err error) {
	err = vk.RequestUnmarshal("orders.getUserSubscriptionById", params, &response)
	return
}

func (vk *VK) OrdersGetUserSubscriptions(params Params) (response OrdersGetUserSubscriptionsResponse, err error) {
	err = vk.RequestUnmarshal("orders.getUserSubscriptions", params, &response)
	return
}

func (vk *VK) OrdersUpdateSubscription(params Params) (response OrdersUpdateSubscriptionResponse, err error) {
	err = vk.RequestUnmarshal("orders.updateSubscription", params, &response)
	return
}

// Allows to clear the cache of particular 'external' pages which may be attached to VK posts.
func (vk *VK) PagesClearCache(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("pages.clearCache", params, &response)
	return
}

// Returns information about a wiki page.
func (vk *VK) PagesGet(params Params) (response PagesGetResponse, err error) {
	err = vk.RequestUnmarshal("pages.get", params, &response)
	return
}

// Returns a list of all previous versions of a wiki page.
func (vk *VK) PagesGetHistory(params Params) (response PagesGetHistoryResponse, err error) {
	err = vk.RequestUnmarshal("pages.getHistory", params, &response)
	return
}

// Returns a list of wiki pages in a group.
func (vk *VK) PagesGetTitles(params Params) (response PagesGetTitlesResponse, err error) {
	err = vk.RequestUnmarshal("pages.getTitles", params, &response)
	return
}

// Returns the text of one of the previous versions of a wiki page.
func (vk *VK) PagesGetVersion(params Params) (response PagesGetVersionResponse, err error) {
	err = vk.RequestUnmarshal("pages.getVersion", params, &response)
	return
}

// Returns HTML representation of the wiki markup.
func (vk *VK) PagesParseWiki(params Params) (response PagesParseWikiResponse, err error) {
	err = vk.RequestUnmarshal("pages.parseWiki", params, &response)
	return
}

// Saves the text of a wiki page.
func (vk *VK) PagesSave(params Params) (response PagesSaveResponse, err error) {
	err = vk.RequestUnmarshal("pages.save", params, &response)
	return
}

// Saves modified read and edit access settings for a wiki page.
func (vk *VK) PagesSaveAccess(params Params) (response PagesSaveAccessResponse, err error) {
	err = vk.RequestUnmarshal("pages.saveAccess", params, &response)
	return
}

// Confirms a tag on a photo.
func (vk *VK) PhotosConfirmTag(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.confirmTag", params, &response)
	return
}

// Allows to copy a photo to the "Saved photos" album
func (vk *VK) PhotosCopy(params Params) (response PhotosCopyResponse, err error) {
	err = vk.RequestUnmarshal("photos.copy", params, &response)
	return
}

// Creates an empty photo album.
func (vk *VK) PhotosCreateAlbum(params Params) (response PhotosCreateAlbumResponse, err error) {
	err = vk.RequestUnmarshal("photos.createAlbum", params, &response)
	return
}

// Adds a new comment on the photo.
func (vk *VK) PhotosCreateComment(params Params) (response PhotosCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("photos.createComment", params, &response)
	return
}

// Deletes a photo.
func (vk *VK) PhotosDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.delete", params, &response)
	return
}

// Deletes a photo album belonging to the current user.
func (vk *VK) PhotosDeleteAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.deleteAlbum", params, &response)
	return
}

// Deletes a comment on the photo.
func (vk *VK) PhotosDeleteComment(params Params) (response PhotosDeleteCommentResponse, err error) {
	err = vk.RequestUnmarshal("photos.deleteComment", params, &response)
	return
}

// Edits the caption of a photo.
func (vk *VK) PhotosEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.edit", params, &response)
	return
}

// Edits information about a photo album.
func (vk *VK) PhotosEditAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.editAlbum", params, &response)
	return
}

// Edits a comment on a photo.
func (vk *VK) PhotosEditComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.editComment", params, &response)
	return
}

// Returns a list of a user's or community's photos.
func (vk *VK) PhotosGetRaw(params Params) ([]byte, error) {
	return vk.Request("photos.get", params)
}

// Returns a list of a user's or community's photo albums.
func (vk *VK) PhotosGetAlbums(params Params) (response PhotosGetAlbumsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAlbums", params, &response)
	return
}

// Returns the number of photo albums belonging to a user or community.
func (vk *VK) PhotosGetAlbumsCount(params Params) (response PhotosGetAlbumsCountResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAlbumsCount", params, &response)
	return
}

// Returns a list of photos belonging to a user or community, in reverse chronological order.
func (vk *VK) PhotosGetAllRaw(params Params) ([]byte, error) {
	return vk.Request("photos.getAll", params)
}

// Returns a list of comments on a specific photo album or all albums of the user sorted in reverse chronological order.
func (vk *VK) PhotosGetAllComments(params Params) (response PhotosGetAllCommentsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAllComments", params, &response)
	return
}

// Returns information about photos by their IDs.
func (vk *VK) PhotosGetByIDRaw(params Params) ([]byte, error) {
	return vk.Request("photos.getById", params)
}

// Returns an upload link for chat cover pictures.
func (vk *VK) PhotosGetChatUploadServer(params Params) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getChatUploadServer", params, &response)
	return
}

// Returns a list of comments on a photo.
func (vk *VK) PhotosGetCommentsRaw(params Params) ([]byte, error) {
	return vk.Request("photos.getComments", params)
}

// Returns the server address for market album photo upload.
func (vk *VK) PhotosGetMarketAlbumUploadServer(params Params) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getMarketAlbumUploadServer", params, &response)
	return
}

// Returns the server address for market photo upload.
func (vk *VK) PhotosGetMarketUploadServer(params Params) (response PhotosGetMarketUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getMarketUploadServer", params, &response)
	return
}

// Returns the server address for photo upload in a private message for a user.
func (vk *VK) PhotosGetMessagesUploadServer(params Params) (response PhotosGetMessagesUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getMessagesUploadServer", params, &response)
	return
}

// Returns a list of photos with tags that have not been viewed.
func (vk *VK) PhotosGetNewTags(params Params) (response PhotosGetNewTagsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getNewTags", params, &response)
	return
}

// Returns the server address for owner cover upload.
func (vk *VK) PhotosGetOwnerCoverPhotoUploadServer(params Params) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getOwnerCoverPhotoUploadServer", params, &response)
	return
}

// Returns an upload server address for a profile or community photo.
func (vk *VK) PhotosGetOwnerPhotoUploadServer(params Params) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getOwnerPhotoUploadServer", params, &response)
	return
}

// Returns a list of tags on a photo.
func (vk *VK) PhotosGetTags(params Params) (response PhotosGetTagsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getTags", params, &response)
	return
}

// Returns the server address for photo upload.
func (vk *VK) PhotosGetUploadServer(params Params) (response PhotosGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getUploadServer", params, &response)
	return
}

// Returns a list of photos in which a user is tagged.
func (vk *VK) PhotosGetUserPhotosRaw(params Params) ([]byte, error) {
	return vk.Request("photos.getUserPhotos", params)
}

// Returns the server address for photo upload onto a user's wall.
func (vk *VK) PhotosGetWallUploadServer(params Params) (response PhotosGetWallUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getWallUploadServer", params, &response)
	return
}

// Makes a photo into an album cover.
func (vk *VK) PhotosMakeCover(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.makeCover", params, &response)
	return
}

// Moves a photo from one album to another.
func (vk *VK) PhotosMove(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.move", params, &response)
	return
}

// Adds a tag on the photo.
func (vk *VK) PhotosPutTag(params Params) (response PhotosPutTagResponse, err error) {
	err = vk.RequestUnmarshal("photos.putTag", params, &response)
	return
}

// Removes a tag from a photo.
func (vk *VK) PhotosRemoveTag(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.removeTag", params, &response)
	return
}

// Reorders the album in the list of user albums.
func (vk *VK) PhotosReorderAlbums(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.reorderAlbums", params, &response)
	return
}

// Reorders the photo in the list of photos of the user album.
func (vk *VK) PhotosReorderPhotos(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.reorderPhotos", params, &response)
	return
}

// Reports (submits a complaint about) a photo.
func (vk *VK) PhotosReport(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.report", params, &response)
	return
}

// Reports (submits a complaint about) a comment on a photo.
func (vk *VK) PhotosReportComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.reportComment", params, &response)
	return
}

// Restores a deleted photo.
func (vk *VK) PhotosRestore(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.restore", params, &response)
	return
}

// Restores a deleted comment on a photo.
func (vk *VK) PhotosRestoreComment(params Params) (response PhotosRestoreCommentResponse, err error) {
	err = vk.RequestUnmarshal("photos.restoreComment", params, &response)
	return
}

// Saves photos after successful uploading.
func (vk *VK) PhotosSave(params Params) (response PhotosSaveResponse, err error) {
	err = vk.RequestUnmarshal("photos.save", params, &response)
	return
}

// Saves market album photos after successful uploading.
func (vk *VK) PhotosSaveMarketAlbumPhoto(params Params) (response PhotosSaveMarketAlbumPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveMarketAlbumPhoto", params, &response)
	return
}

// Saves market photos after successful uploading.
func (vk *VK) PhotosSaveMarketPhoto(params Params) (response PhotosSaveMarketPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveMarketPhoto", params, &response)
	return
}

// Saves a photo after being successfully uploaded. URL obtained with [vk.com/dev/photos.getMessagesUploadServer|photos.getMessagesUploadServer] method.
func (vk *VK) PhotosSaveMessagesPhoto(params Params) (response PhotosSaveMessagesPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveMessagesPhoto", params, &response)
	return
}

// Saves cover photo after successful uploading.
func (vk *VK) PhotosSaveOwnerCoverPhoto(params Params) (response PhotosSaveOwnerCoverPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveOwnerCoverPhoto", params, &response)
	return
}

// Saves a profile or community photo. Upload URL can be got with the [vk.com/dev/photos.getOwnerPhotoUploadServer|photos.getOwnerPhotoUploadServer] method.
func (vk *VK) PhotosSaveOwnerPhoto(params Params) (response PhotosSaveOwnerPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveOwnerPhoto", params, &response)
	return
}

// Saves a photo to a user's or community's wall after being uploaded.
func (vk *VK) PhotosSaveWallPhoto(params Params) (response PhotosSaveWallPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveWallPhoto", params, &response)
	return
}

// Returns a list of photos.
func (vk *VK) PhotosSearch(params Params) (response PhotosSearchResponse, err error) {
	err = vk.RequestUnmarshal("photos.search", params, &response)
	return
}

// Adds the current user's vote to the selected answer in the poll.
func (vk *VK) PollsAddVote(params Params) (response PollsAddVoteResponse, err error) {
	err = vk.RequestUnmarshal("polls.addVote", params, &response)
	return
}

// Creates polls that can be attached to the users' or communities' posts.
func (vk *VK) PollsCreate(params Params) (response PollsCreateResponse, err error) {
	err = vk.RequestUnmarshal("polls.create", params, &response)
	return
}

// Deletes the current user's vote from the selected answer in the poll.
func (vk *VK) PollsDeleteVote(params Params) (response PollsDeleteVoteResponse, err error) {
	err = vk.RequestUnmarshal("polls.deleteVote", params, &response)
	return
}

// Edits created polls
func (vk *VK) PollsEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("polls.edit", params, &response)
	return
}

// Returns detailed information about a poll by its ID.
func (vk *VK) PollsGetByID(params Params) (response PollsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("polls.getById", params, &response)
	return
}

// Returns a list of IDs of users who selected specific answers in the poll.
func (vk *VK) PollsGetVoters(params Params) (response PollsGetVotersResponse, err error) {
	err = vk.RequestUnmarshal("polls.getVoters", params, &response)
	return
}

func (vk *VK) PrettyCardsCreate(params Params) (response PrettyCardsCreateResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.create", params, &response)
	return
}

func (vk *VK) PrettyCardsDelete(params Params) (response PrettyCardsDeleteResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.delete", params, &response)
	return
}

func (vk *VK) PrettyCardsEdit(params Params) (response PrettyCardsEditResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.edit", params, &response)
	return
}

func (vk *VK) PrettyCardsGet(params Params) (response PrettyCardsGetResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.get", params, &response)
	return
}

func (vk *VK) PrettyCardsGetByID(params Params) (response PrettyCardsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.getById", params, &response)
	return
}

func (vk *VK) PrettyCardsGetUploadURL(params Params) (response PrettyCardsGetUploadURLResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.getUploadURL", params, &response)
	return
}

// Allows the programmer to do a quick search for any substring.
func (vk *VK) SearchGetHints(params Params) (response SearchGetHintsResponse, err error) {
	err = vk.RequestUnmarshal("search.getHints", params, &response)
	return
}

// Adds user activity information to an application
func (vk *VK) SecureAddAppEvent(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("secure.addAppEvent", params, &response)
	return
}

// Checks the user authentication in 'IFrame' and 'Flash' apps using the 'access_token' parameter.
func (vk *VK) SecureCheckToken(params Params) (response SecureCheckTokenResponse, err error) {
	err = vk.RequestUnmarshal("secure.checkToken", params, &response)
	return
}

// Returns payment balance of the application in hundredth of a vote.
func (vk *VK) SecureGetAppBalance(params Params) (response SecureGetAppBalanceResponse, err error) {
	err = vk.RequestUnmarshal("secure.getAppBalance", params, &response)
	return
}

// Shows a list of SMS notifications sent by the application using [vk.com/dev/secure.sendSMSNotification|secure.sendSMSNotification] method.
func (vk *VK) SecureGetSMSHistory(params Params) (response SecureGetSMSHistoryResponse, err error) {
	err = vk.RequestUnmarshal("secure.getSMSHistory", params, &response)
	return
}

// Shows history of votes transaction between users and the application.
func (vk *VK) SecureGetTransactionsHistory(params Params) (response SecureGetTransactionsHistoryResponse, err error) {
	err = vk.RequestUnmarshal("secure.getTransactionsHistory", params, &response)
	return
}

// Returns one of the previously set game levels of one or more users in the application.
func (vk *VK) SecureGetUserLevel(params Params) (response SecureGetUserLevelResponse, err error) {
	err = vk.RequestUnmarshal("secure.getUserLevel", params, &response)
	return
}

// Opens the game achievement and gives the user a sticker
func (vk *VK) SecureGiveEventSticker(params Params) (response SecureGiveEventStickerResponse, err error) {
	err = vk.RequestUnmarshal("secure.giveEventSticker", params, &response)
	return
}

// Sends notification to the user.
func (vk *VK) SecureSendNotification(params Params) (response SecureSendNotificationResponse, err error) {
	err = vk.RequestUnmarshal("secure.sendNotification", params, &response)
	return
}

// Sends 'SMS' notification to a user's mobile device.
func (vk *VK) SecureSendSMSNotification(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("secure.sendSMSNotification", params, &response)
	return
}

// Sets a counter which is shown to the user in bold in the left menu.
func (vk *VK) SecureSetCounter(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("secure.setCounter", params, &response)
	return
}

// Returns statistics of a community or an application.
func (vk *VK) StatsGet(params Params) (response StatsGetResponse, err error) {
	err = vk.RequestUnmarshal("stats.get", params, &response)
	return
}

// Returns stats for a wall post.
func (vk *VK) StatsGetPostReach(params Params) (response StatsGetPostReachResponse, err error) {
	err = vk.RequestUnmarshal("stats.getPostReach", params, &response)
	return
}

func (vk *VK) StatsTrackVisitor(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stats.trackVisitor", params, &response)
	return
}

// Returns data required to show the status of a user or community.
func (vk *VK) StatusGet(params Params) (response StatusGetResponse, err error) {
	err = vk.RequestUnmarshal("status.get", params, &response)
	return
}

// Sets a new status for the current user.
func (vk *VK) StatusSet(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("status.set", params, &response)
	return
}

// Returns a value of variable with the name set by key parameter.
func (vk *VK) StorageGetRaw(params Params) ([]byte, error) {
	return vk.Request("storage.get", params)
}

// Returns the names of all variables.
func (vk *VK) StorageGetKeys(params Params) (response StorageGetKeysResponse, err error) {
	err = vk.RequestUnmarshal("storage.getKeys", params, &response)
	return
}

// Saves a value of variable with the name set by 'key' parameter.
func (vk *VK) StorageSet(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("storage.set", params, &response)
	return
}

// Allows to hide stories from chosen sources from current user's feed.
func (vk *VK) StoriesBanOwner(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.banOwner", params, &response)
	return
}

// Allows to delete story.
func (vk *VK) StoriesDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.delete", params, &response)
	return
}

// Returns stories available for current user.
func (vk *VK) StoriesGet(params Params) (response StoriesGetV5113Response, err error) {
	err = vk.RequestUnmarshal("stories.get", params, &response)
	return
}

// Returns list of sources hidden from current user's feed.
func (vk *VK) StoriesGetBannedRaw(params Params) ([]byte, error) {
	return vk.Request("stories.getBanned", params)
}

// Returns story by its ID.
func (vk *VK) StoriesGetByIDRaw(params Params) ([]byte, error) {
	return vk.Request("stories.getById", params)
}

// Returns URL for uploading a story with photo.
func (vk *VK) StoriesGetPhotoUploadServer(params Params) (response StoriesGetPhotoUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("stories.getPhotoUploadServer", params, &response)
	return
}

// Returns replies to the story.
func (vk *VK) StoriesGetReplies(params Params) (response StoriesGetV5113Response, err error) {
	err = vk.RequestUnmarshal("stories.getReplies", params, &response)
	return
}

// Returns stories available for current user.
func (vk *VK) StoriesGetStats(params Params) (response StoriesGetStatsResponse, err error) {
	err = vk.RequestUnmarshal("stories.getStats", params, &response)
	return
}

// Allows to receive URL for uploading story with video.
func (vk *VK) StoriesGetVideoUploadServer(params Params) (response StoriesGetVideoUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("stories.getVideoUploadServer", params, &response)
	return
}

// Returns a list of story viewers.
func (vk *VK) StoriesGetViewersRaw(params Params) ([]byte, error) {
	return vk.Request("stories.getViewers", params)
}

// Hides all replies in the last 24 hours from the user to current user's stories.
func (vk *VK) StoriesHideAllReplies(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.hideAllReplies", params, &response)
	return
}

// Hides the reply to the current user's story.
func (vk *VK) StoriesHideReply(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.hideReply", params, &response)
	return
}

func (vk *VK) StoriesSearch(params Params) (response StoriesGetV5113Response, err error) {
	err = vk.RequestUnmarshal("stories.search", params, &response)
	return
}

// Allows to show stories from hidden sources in current user's feed.
func (vk *VK) StoriesUnbanOwner(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.unbanOwner", params, &response)
	return
}

// Allows to receive data for the connection to Streaming API.
func (vk *VK) StreamingGetServerURL(params Params) (response StreamingGetServerURLResponse, err error) {
	err = vk.RequestUnmarshal("streaming.getServerUrl", params, &response)
	return
}

func (vk *VK) StreamingSetSettings(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("streaming.setSettings", params, &response)
	return
}

// Returns detailed information on users.
func (vk *VK) UsersGet(params Params) (response UsersGetResponse, err error) {
	err = vk.RequestUnmarshal("users.get", params, &response)
	return
}

// Returns a list of IDs of followers of the user in question, sorted by date added, most recent first.
func (vk *VK) UsersGetFollowersRaw(params Params) ([]byte, error) {
	return vk.Request("users.getFollowers", params)
}

// Returns a list of IDs of users and communities followed by the user.
func (vk *VK) UsersGetSubscriptionsRaw(params Params) ([]byte, error) {
	return vk.Request("users.getSubscriptions", params)
}

// Reports (submits a complain about) a user.
func (vk *VK) UsersReport(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("users.report", params, &response)
	return
}

// Returns a list of users matching the search criteria.
func (vk *VK) UsersSearch(params Params) (response UsersSearchResponse, err error) {
	err = vk.RequestUnmarshal("users.search", params, &response)
	return
}

// Checks whether a link is blocked in VK.
func (vk *VK) UtilsCheckLink(params Params) (response UtilsCheckLinkResponse, err error) {
	err = vk.RequestUnmarshal("utils.checkLink", params, &response)
	return
}

// Deletes shortened link from user's list.
func (vk *VK) UtilsDeleteFromLastShortened(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("utils.deleteFromLastShortened", params, &response)
	return
}

// Returns a list of user's shortened links.
func (vk *VK) UtilsGetLastShortenedLinks(params Params) (response UtilsGetLastShortenedLinksResponse, err error) {
	err = vk.RequestUnmarshal("utils.getLastShortenedLinks", params, &response)
	return
}

// Returns stats data for shortened link.
func (vk *VK) UtilsGetLinkStatsRaw(params Params) ([]byte, error) {
	return vk.Request("utils.getLinkStats", params)
}

// Returns the current time of the VK server.
func (vk *VK) UtilsGetServerTime(params Params) (response UtilsGetServerTimeResponse, err error) {
	err = vk.RequestUnmarshal("utils.getServerTime", params, &response)
	return
}

// Allows to receive a link shortened via vk.cc.
func (vk *VK) UtilsGetShortLink(params Params) (response UtilsGetShortLinkResponse, err error) {
	err = vk.RequestUnmarshal("utils.getShortLink", params, &response)
	return
}

// Detects a type of object (e.g., user, community, application) and its ID by screen name.
func (vk *VK) UtilsResolveScreenName(params Params) (response UtilsResolveScreenNameResponse, err error) {
	err = vk.RequestUnmarshal("utils.resolveScreenName", params, &response)
	return
}

// Adds a video to a user or community page.
func (vk *VK) VideoAdd(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.add", params, &response)
	return
}

// Creates an empty album for videos.
func (vk *VK) VideoAddAlbum(params Params) (response VideoAddAlbumResponse, err error) {
	err = vk.RequestUnmarshal("video.addAlbum", params, &response)
	return
}

func (vk *VK) VideoAddToAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.addToAlbum", params, &response)
	return
}

// Adds a new comment on a video.
func (vk *VK) VideoCreateComment(params Params) (response VideoCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("video.createComment", params, &response)
	return
}

// Deletes a video from a user or community page.
func (vk *VK) VideoDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.delete", params, &response)
	return
}

// Deletes a video album.
func (vk *VK) VideoDeleteAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.deleteAlbum", params, &response)
	return
}

// Deletes a comment on a video.
func (vk *VK) VideoDeleteComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.deleteComment", params, &response)
	return
}

// Edits information about a video on a user or community page.
func (vk *VK) VideoEdit(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.edit", params, &response)
	return
}

// Edits the title of a video album.
func (vk *VK) VideoEditAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.editAlbum", params, &response)
	return
}

// Edits the text of a comment on a video.
func (vk *VK) VideoEditComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.editComment", params, &response)
	return
}

// Returns detailed information about videos.
func (vk *VK) VideoGetRaw(params Params) ([]byte, error) {
	return vk.Request("video.get", params)
}

// Returns video album info
func (vk *VK) VideoGetAlbumByID(params Params) (response VideoGetAlbumByIDResponse, err error) {
	err = vk.RequestUnmarshal("video.getAlbumById", params, &response)
	return
}

// Returns a list of video albums owned by a user or community.
func (vk *VK) VideoGetAlbumsRaw(params Params) ([]byte, error) {
	return vk.Request("video.getAlbums", params)
}

func (vk *VK) VideoGetAlbumsByVideoRaw(params Params) ([]byte, error) {
	return vk.Request("video.getAlbumsByVideo", params)
}

// Returns a list of comments on a video.
func (vk *VK) VideoGetCommentsRaw(params Params) ([]byte, error) {
	return vk.Request("video.getComments", params)
}

func (vk *VK) VideoRemoveFromAlbum(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.removeFromAlbum", params, &response)
	return
}

// Reorders the album in the list of user video albums.
func (vk *VK) VideoReorderAlbums(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.reorderAlbums", params, &response)
	return
}

// Reorders the video in the video album.
func (vk *VK) VideoReorderVideos(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.reorderVideos", params, &response)
	return
}

// Reports (submits a complaint about) a video.
func (vk *VK) VideoReport(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.report", params, &response)
	return
}

// Reports (submits a complaint about) a comment on a video.
func (vk *VK) VideoReportComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.reportComment", params, &response)
	return
}

// Restores a previously deleted video.
func (vk *VK) VideoRestore(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.restore", params, &response)
	return
}

// Restores a previously deleted comment on a video.
func (vk *VK) VideoRestoreComment(params Params) (response VideoRestoreCommentResponse, err error) {
	err = vk.RequestUnmarshal("video.restoreComment", params, &response)
	return
}

// Returns a server address (required for upload) and video data.
func (vk *VK) VideoSave(params Params) (response VideoSaveResponse, err error) {
	err = vk.RequestUnmarshal("video.save", params, &response)
	return
}

// Returns a list of videos under the set search criterion.
func (vk *VK) VideoSearchRaw(params Params) ([]byte, error) {
	return vk.Request("video.search", params)
}

func (vk *VK) WallCloseComments(params Params) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("wall.closeComments", params, &response)
	return
}

// Adds a comment to a post on a user wall or community wall.
func (vk *VK) WallCreateComment(params Params) (response WallCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("wall.createComment", params, &response)
	return
}

// Deletes a post from a user wall or community wall.
func (vk *VK) WallDelete(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.delete", params, &response)
	return
}

// Deletes a comment on a post on a user wall or community wall.
func (vk *VK) WallDeleteComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.deleteComment", params, &response)
	return
}

// Edits a post on a user wall or community wall.
func (vk *VK) WallEdit(params Params) (response WallEditResponse, err error) {
	err = vk.RequestUnmarshal("wall.edit", params, &response)
	return
}

// Allows to edit hidden post.
func (vk *VK) WallEditAdsStealth(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.editAdsStealth", params, &response)
	return
}

// Edits a comment on a user wall or community wall.
func (vk *VK) WallEditComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.editComment", params, &response)
	return
}

// Returns a list of posts on a user wall or community wall.
func (vk *VK) WallGetRaw(params Params) ([]byte, error) {
	return vk.Request("wall.get", params)
}

// Returns a list of posts from user or community walls by their IDs.
func (vk *VK) WallGetByIDRaw(params Params) ([]byte, error) {
	return vk.Request("wall.getById", params)
}

// Returns a comment on a post on a user wall or community wall.
func (vk *VK) WallGetCommentRaw(params Params) ([]byte, error) {
	return vk.Request("wall.getComment", params)
}

// Returns a list of comments on a post on a user wall or community wall.
func (vk *VK) WallGetCommentsRaw(params Params) ([]byte, error) {
	return vk.Request("wall.getComments", params)
}

// Returns information about reposts of a post on user wall or community wall.
func (vk *VK) WallGetReposts(params Params) (response WallGetRepostsResponse, err error) {
	err = vk.RequestUnmarshal("wall.getReposts", params, &response)
	return
}

func (vk *VK) WallOpenComments(params Params) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("wall.openComments", params, &response)
	return
}

// Pins the post on wall.
func (vk *VK) WallPin(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.pin", params, &response)
	return
}

// Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.
func (vk *VK) WallPost(params Params) (response WallPostResponse, err error) {
	err = vk.RequestUnmarshal("wall.post", params, &response)
	return
}

// Allows to create hidden post which will not be shown on the community's wall and can be used for creating an ad with type "Community post".
func (vk *VK) WallPostAdsStealth(params Params) (response WallPostAdsStealthResponse, err error) {
	err = vk.RequestUnmarshal("wall.postAdsStealth", params, &response)
	return
}

// Reports (submits a complaint about) a comment on a post on a user wall or community wall.
func (vk *VK) WallReportComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.reportComment", params, &response)
	return
}

// Reports (submits a complaint about) a post on a user wall or community wall.
func (vk *VK) WallReportPost(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.reportPost", params, &response)
	return
}

// Reposts (copies) an object to a user wall or community wall.
func (vk *VK) WallRepost(params Params) (response WallRepostResponse, err error) {
	err = vk.RequestUnmarshal("wall.repost", params, &response)
	return
}

// Restores a post deleted from a user wall or community wall.
func (vk *VK) WallRestore(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.restore", params, &response)
	return
}

// Restores a comment deleted from a user wall or community wall.
func (vk *VK) WallRestoreComment(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.restoreComment", params, &response)
	return
}

// Allows to search posts on user or community walls.
func (vk *VK) WallSearchRaw(params Params) ([]byte, error) {
	return vk.Request("wall.search", params)
}

// Unpins the post on wall.
func (vk *VK) WallUnpin(params Params) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.unpin", params, &response)
	return
}

// Gets a list of comments for the page added through the [vk.com/dev/Comments|Comments widget].
func (vk *VK) WidgetsGetComments(params Params) (response WidgetsGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("widgets.getComments", params, &response)
	return
}

// Gets a list of application/site pages where the [vk.com/dev/Comments|Comments widget] or [vk.com/dev/Like|Like widget] is installed.
func (vk *VK) WidgetsGetPages(params Params) (response WidgetsGetPagesResponse, err error) {
	err = vk.RequestUnmarshal("widgets.getPages", params, &response)
	return
}
