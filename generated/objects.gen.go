// Code generated by vkgen; DO NOT EDIT.

package generated

type AccountAccountCounters struct {
	AppRequests            int64 `json:"app_requests"`            // New app requests number
	Events                 int64 `json:"events"`                  // New events number
	Faves                  int64 `json:"faves"`                   // New faves number
	Friends                int64 `json:"friends"`                 // New friends requests number
	FriendsSuggestions     int64 `json:"friends_suggestions"`     // New friends suggestions number
	FriendsRecommendations int64 `json:"friends_recommendations"` // New friends recommendations number
	Gifts                  int64 `json:"gifts"`                   // New gifts number
	Groups                 int64 `json:"groups"`                  // New groups number
	MenuDiscoverBadge      int64 `json:"menu_discover_badge"`     //
	Messages               int64 `json:"messages"`                // New messages number
	Memories               int64 `json:"memories"`                // New memories number
	Notes                  int64 `json:"notes"`                   // New notes number
	Notifications          int64 `json:"notifications"`           // New notifications number
	Photos                 int64 `json:"photos"`                  // New photo tags number
	SDK                    int64 `json:"sdk"`                     // New sdk number
}

type AccountInfo struct {
	WishlistsAePromoBannerShow BaseBoolInt `json:"wishlists_ae_promo_banner_show"`
	TwoFARequired              BaseBoolInt `json:"2fa_required"`   // Two factor authentication is enabled
	Country                    string      `json:"country"`        // Country code
	HttpsRequired              BaseBoolInt `json:"https_required"` // Information whether HTTPS-only is enabled
	Intro                      BaseBoolInt `json:"intro"`          // Information whether user has been processed intro
	ShowVKAppsIntro            bool        `json:"show_vk_apps_intro"`
	MiniAppsAdsSlotID          int64       `json:"mini_apps_ads_slot_id"` // Ads slot id for MyTarget
	QrPromotion                int64       `json:"qr_promotion"`
	LinkRedirects              interface{} `json:"link_redirects"`
	Lang                       int64       `json:"lang"`              // Language ID
	NoWallReplies              BaseBoolInt `json:"no_wall_replies"`   // Information whether wall comments should be hidden
	OwnPostsDefault            BaseBoolInt `json:"own_posts_default"` // Information whether only owners posts should be shown
	Subscriptions              []int64     `json:"subscriptions"`
}

type AccountNameRequest struct {
	FirstName string                   `json:"first_name"` // First name in request
	ID        int64                    `json:"id"`         // Request ID needed to cancel the request
	LastName  string                   `json:"last_name"`  // Last name in request
	Status    AccountNameRequestStatus `json:"status"`
	Lang      string                   `json:"lang"`       // Text to display to user
	LinkHref  string                   `json:"link_href"`  // href for link in lang field
	LinkLabel string                   `json:"link_label"` // label to display for link in lang field
}

// Request status
type AccountNameRequestStatus string

const (
	AccountNameRequestStatusSuccess          AccountNameRequestStatus = "success"
	AccountNameRequestStatusProcessing       AccountNameRequestStatus = "processing"
	AccountNameRequestStatusDeclined         AccountNameRequestStatus = "declined"
	AccountNameRequestStatusWasAccepted      AccountNameRequestStatus = "was_accepted"
	AccountNameRequestStatusWasDeclined      AccountNameRequestStatus = "was_declined"
	AccountNameRequestStatusDeclinedWithLink AccountNameRequestStatus = "declined_with_link"
	AccountNameRequestStatusResponse         AccountNameRequestStatus = "response"
	AccountNameRequestStatusResponseWithLink AccountNameRequestStatus = "response_with_link"
)

type AccountOffer struct {
	Description      string  `json:"description"`       // Offer description
	ID               int64   `json:"id"`                // Offer ID
	Img              string  `json:"img"`               // URL of the preview image
	Instruction      string  `json:"instruction"`       // Instruction how to process the offer
	InstructionHtml  string  `json:"instruction_html"`  // Instruction how to process the offer (HTML format)
	Price            int64   `json:"price"`             // Offer price
	ShortDescription string  `json:"short_description"` // Offer short description
	Tag              string  `json:"tag"`               // Offer tag
	Title            string  `json:"title"`             // Offer title
	CurrencyAmount   float64 `json:"currency_amount"`   // Currency amount
	LinkID           int64   `json:"link_id"`           // Link id
	LinkType         string  `json:"link_type"`         // Link type
}

type AccountPushConversations struct {
	Count int64                          `json:"count"` // Items count
	Items []AccountPushConversationsItem `json:"items"`
}

type AccountPushConversationsItem struct {
	DisabledUntil int64       `json:"disabled_until"` // Time until that notifications are disabled in seconds
	PeerID        int64       `json:"peer_id"`        // Peer ID
	Sound         BaseBoolInt `json:"sound"`          // Information whether the sound are enabled
}

type AccountPushParams struct {
	Msg            []AccountPushParamsMode     `json:"msg"`
	Chat           []AccountPushParamsMode     `json:"chat"`
	Like           []AccountPushParamsSettings `json:"like"`
	Repost         []AccountPushParamsSettings `json:"repost"`
	Comment        []AccountPushParamsSettings `json:"comment"`
	Mention        []AccountPushParamsSettings `json:"mention"`
	Reply          []AccountPushParamsOnoff    `json:"reply"`
	NewPost        []AccountPushParamsOnoff    `json:"new_post"`
	WallPost       []AccountPushParamsOnoff    `json:"wall_post"`
	WallPublish    []AccountPushParamsOnoff    `json:"wall_publish"`
	Friend         []AccountPushParamsOnoff    `json:"friend"`
	FriendFound    []AccountPushParamsOnoff    `json:"friend_found"`
	FriendAccepted []AccountPushParamsOnoff    `json:"friend_accepted"`
	GroupInvite    []AccountPushParamsOnoff    `json:"group_invite"`
	GroupAccepted  []AccountPushParamsOnoff    `json:"group_accepted"`
	Birthday       []AccountPushParamsOnoff    `json:"birthday"`
	EventSoon      []AccountPushParamsOnoff    `json:"event_soon"`
	AppRequest     []AccountPushParamsOnoff    `json:"app_request"`
	SDKOpen        []AccountPushParamsOnoff    `json:"sdk_open"`
}

// Settings parameters
type AccountPushParamsMode string

const (
	AccountPushParamsModeOn      AccountPushParamsMode = "on"
	AccountPushParamsModeOff     AccountPushParamsMode = "off"
	AccountPushParamsModeNoSound AccountPushParamsMode = "no_sound"
	AccountPushParamsModeNoText  AccountPushParamsMode = "no_text"
)

// Settings parameters
type AccountPushParamsOnoff string

const (
	AccountPushParamsOnoffOn  AccountPushParamsOnoff = "on"
	AccountPushParamsOnoffOff AccountPushParamsOnoff = "off"
)

// Settings parameters
type AccountPushParamsSettings string

const (
	AccountPushParamsSettingsOn     AccountPushParamsSettings = "on"
	AccountPushParamsSettingsOff    AccountPushParamsSettings = "off"
	AccountPushParamsSettingsFrOfFr AccountPushParamsSettings = "fr_of_fr"
)

type AccountPushSettings struct {
	Disabled      BaseBoolInt              `json:"disabled"`       // Information whether notifications are disabled
	DisabledUntil int64                    `json:"disabled_until"` // Time until that notifications are disabled in Unixtime
	Settings      AccountPushParams        `json:"settings"`
	Conversations AccountPushConversations `json:"conversations"`
}

// allof account_user_settings
type AccountUserSettings struct {
	*UsersUserMin         `json:"users_user_min,omitempty"`
	*UsersUserSettingsXtr `json:"users_user_settings_xtr,omitempty"`
	Photo200              *string `json:"photo_200,omitempty"`
	IsServiceAccount      *bool   `json:"is_service_account,omitempty"`
}

type AccountUserSettingsInterest struct {
	Title string `json:"title"`
	Value string `json:"value"`
}

type AccountUserSettingsInterests struct {
	Activities AccountUserSettingsInterest `json:"activities"`
	Interests  AccountUserSettingsInterest `json:"interests"`
	Music      AccountUserSettingsInterest `json:"music"`
	TV         AccountUserSettingsInterest `json:"tv"`
	Movies     AccountUserSettingsInterest `json:"movies"`
	Books      AccountUserSettingsInterest `json:"books"`
	Games      AccountUserSettingsInterest `json:"games"`
	Quotes     AccountUserSettingsInterest `json:"quotes"`
	About      AccountUserSettingsInterest `json:"about"`
}

type AddressesFields string

const (
	AddressesFieldsID                AddressesFields = "id"
	AddressesFieldsTitle             AddressesFields = "title"
	AddressesFieldsAddress           AddressesFields = "address"
	AddressesFieldsAdditionalAddress AddressesFields = "additional_address"
	AddressesFieldsCountryID         AddressesFields = "country_id"
	AddressesFieldsCityID            AddressesFields = "city_id"
	AddressesFieldsMetroStationID    AddressesFields = "metro_station_id"
	AddressesFieldsLatitude          AddressesFields = "latitude"
	AddressesFieldsLongitude         AddressesFields = "longitude"
	AddressesFieldsDistance          AddressesFields = "distance"
	AddressesFieldsWorkInfoStatus    AddressesFields = "work_info_status"
	AddressesFieldsTimetable         AddressesFields = "timetable"
	AddressesFieldsPhone             AddressesFields = "phone"
	AddressesFieldsTimeOffset        AddressesFields = "time_offset"
)

// Current user's role
type AdsAccessRole string

const (
	AdsAccessRoleAdmin   AdsAccessRole = "admin"
	AdsAccessRoleManager AdsAccessRole = "manager"
	AdsAccessRoleReports AdsAccessRole = "reports"
)

type AdsAccesses struct {
	ClientID string        `json:"client_id"` // Client ID
	Role     AdsAccessRole `json:"role"`
}

type AdsAccount struct {
	AccessRole    AdsAccessRole  `json:"access_role"`
	AccountID     int64          `json:"account_id"`     // Account ID
	AccountStatus BaseBoolInt    `json:"account_status"` // Information whether account is active
	AccountType   AdsAccountType `json:"account_type"`
	AccountName   string         `json:"account_name"` // Account name
}

// Account type
type AdsAccountType string

const (
	AdsAccountTypeGeneral AdsAccountType = "general"
	AdsAccountTypeAgency  AdsAccountType = "agency"
)

type AdsAd struct {
	AdFormat              int64         `json:"ad_format"`   // Ad format
	AdPlatform            interface{}   `json:"ad_platform"` // Ad platform
	AllLimit              int64         `json:"all_limit"`   // Total limit
	Approved              AdsAdApproved `json:"approved"`
	CampaignID            int64         `json:"campaign_id"`  // Campaign ID
	Category1ID           int64         `json:"category1_id"` // Category ID
	Category2ID           int64         `json:"category2_id"` // Additional category ID
	CostType              AdsAdCostType `json:"cost_type"`
	Cpc                   int64         `json:"cpc"`                    // Cost of a click, kopecks
	Cpm                   int64         `json:"cpm"`                    // Cost of 1000 impressions, kopecks
	Cpa                   int64         `json:"cpa"`                    // Cost of an action, kopecks
	Ocpm                  int64         `json:"ocpm"`                   // Cost of 1000 impressions optimized, kopecks
	AutobiddingMaxCost    int64         `json:"autobidding_max_cost"`   // Max cost of target actions for autobidding, kopecks
	DisclaimerMedical     BaseBoolInt   `json:"disclaimer_medical"`     // Information whether disclaimer is enabled
	DisclaimerSpecialist  BaseBoolInt   `json:"disclaimer_specialist"`  // Information whether disclaimer is enabled
	DisclaimerSupplements BaseBoolInt   `json:"disclaimer_supplements"` // Information whether disclaimer is enabled
	ID                    int64         `json:"id"`                     // Ad ID
	ImpressionsLimit      int64         `json:"impressions_limit"`      // Impressions limit
	ImpressionsLimited    BaseBoolInt   `json:"impressions_limited"`    // Information whether impressions are limited
	Name                  string        `json:"name"`                   // Ad title
	Status                AdsAdStatus   `json:"status"`
	Video                 BaseBoolInt   `json:"video"` // Information whether the ad is a video
}

// Review status
type AdsAdApproved int64

const (
	AdsAdApprovedNotModerated      AdsAdApproved = 0
	AdsAdApprovedPendingModeration AdsAdApproved = 1
	AdsAdApprovedApproved          AdsAdApproved = 2
	AdsAdApprovedRejected          AdsAdApproved = 3
)

// Cost type
type AdsAdCostType int64

const (
	AdsAdCostTypePerClicks               AdsAdCostType = 0
	AdsAdCostTypePerImpressions          AdsAdCostType = 1
	AdsAdCostTypePerActions              AdsAdCostType = 2
	AdsAdCostTypePerImpressionsOptimized AdsAdCostType = 3
)

type AdsAdLayout struct {
	AdFormat    int64         `json:"ad_format"`   // Ad format
	CampaignID  int64         `json:"campaign_id"` // Campaign ID
	CostType    AdsAdCostType `json:"cost_type"`
	Description string        `json:"description"`  // Ad description
	ID          int64         `json:"id"`           // Ad ID
	ImageSrc    string        `json:"image_src"`    // Image URL
	ImageSrc2x  string        `json:"image_src_2x"` // URL of the preview image in double size
	LinkDomain  string        `json:"link_domain"`  // Domain of advertised object
	LinkURL     string        `json:"link_url"`     // URL of advertised object
	PreviewLink interface{}   `json:"preview_link"` // link to preview an ad as it is shown on the website
	Title       string        `json:"title"`        // Ad title
	Video       BaseBoolInt   `json:"video"`        // Information whether the ad is a video
}

// Ad atatus
type AdsAdStatus int64

const (
	AdsAdStatusStopped AdsAdStatus = 0
	AdsAdStatusStarted AdsAdStatus = 1
	AdsAdStatusDeleted AdsAdStatus = 2
)

type AdsCampaign struct {
	AllLimit  string            `json:"all_limit"`  // Campaign's total limit, rubles
	DayLimit  string            `json:"day_limit"`  // Campaign's day limit, rubles
	ID        int64             `json:"id"`         // Campaign ID
	Name      string            `json:"name"`       // Campaign title
	StartTime int64             `json:"start_time"` // Campaign start time, as Unixtime
	Status    AdsCampaignStatus `json:"status"`
	StopTime  int64             `json:"stop_time"` // Campaign stop time, as Unixtime
	Type      AdsCampaignType   `json:"type"`
}

// Campaign status
type AdsCampaignStatus int64

const (
	AdsCampaignStatusStopped AdsCampaignStatus = 0
	AdsCampaignStatusStarted AdsCampaignStatus = 1
	AdsCampaignStatusDeleted AdsCampaignStatus = 2
)

// Campaign type
type AdsCampaignType string

const (
	AdsCampaignTypeNormal        AdsCampaignType = "normal"
	AdsCampaignTypeVKAppsManaged AdsCampaignType = "vk_apps_managed"
	AdsCampaignTypeMobileApps    AdsCampaignType = "mobile_apps"
	AdsCampaignTypePromotedPosts AdsCampaignType = "promoted_posts"
)

type AdsCategory struct {
	ID            int64                `json:"id"`   // Category ID
	Name          string               `json:"name"` // Category name
	Subcategories []BaseObjectWithName `json:"subcategories"`
}

type AdsClient struct {
	AllLimit string `json:"all_limit"` // Client's total limit, rubles
	DayLimit string `json:"day_limit"` // Client's day limit, rubles
	ID       int64  `json:"id"`        // Client ID
	Name     string `json:"name"`      // Client name
}

type AdsCriteria struct {
	AgeFrom              int64              `json:"age_from"`               // Age from
	AgeTo                int64              `json:"age_to"`                 // Age to
	Apps                 string             `json:"apps"`                   // Apps IDs
	AppsNot              string             `json:"apps_not"`               // Apps IDs to except
	Birthday             int64              `json:"birthday"`               // Days to birthday
	Cities               string             `json:"cities"`                 // Cities IDs
	CitiesNot            string             `json:"cities_not"`             // Cities IDs to except
	Country              int64              `json:"country"`                // Country ID
	Districts            string             `json:"districts"`              // Districts IDs
	Groups               string             `json:"groups"`                 // Communities IDs
	InterestCategories   string             `json:"interest_categories"`    // Interests categories IDs
	Interests            string             `json:"interests"`              // Interests
	Paying               BaseBoolInt        `json:"paying"`                 // Information whether the user has proceeded VK payments before
	Positions            string             `json:"positions"`              // Positions IDs
	Religions            string             `json:"religions"`              // Religions IDs
	RetargetingGroups    string             `json:"retargeting_groups"`     // Retargeting groups IDs
	RetargetingGroupsNot string             `json:"retargeting_groups_not"` // Retargeting groups IDs to except
	SchoolFrom           int64              `json:"school_from"`            // School graduation year from
	SchoolTo             int64              `json:"school_to"`              // School graduation year to
	Schools              string             `json:"schools"`                // Schools IDs
	Sex                  AdsCriteriaSex     `json:"sex"`
	Stations             string             `json:"stations"`      // Stations IDs
	Statuses             string             `json:"statuses"`      // Relationship statuses
	Streets              string             `json:"streets"`       // Streets IDs
	Travellers           BasePropertyExists `json:"travellers"`    // Travellers only
	UniFrom              int64              `json:"uni_from"`      // University graduation year from
	UniTo                int64              `json:"uni_to"`        // University graduation year to
	UserBrowsers         string             `json:"user_browsers"` // Browsers
	UserDevices          string             `json:"user_devices"`  // Devices
	UserOs               string             `json:"user_os"`       // Operating systems
}

// Sex
type AdsCriteriaSex int64

const (
	AdsCriteriaSexAny    AdsCriteriaSex = 0
	AdsCriteriaSexMale   AdsCriteriaSex = 1
	AdsCriteriaSexFemale AdsCriteriaSex = 2
)

type AdsDemoStats struct {
	ID    int64              `json:"id"` // Object ID
	Stats AdsDemostatsFormat `json:"stats"`
	Type  AdsObjectType      `json:"type"`
}

type AdsDemostatsFormat struct {
	Age     []AdsStatsAge    `json:"age"`
	Cities  []AdsStatsCities `json:"cities"`
	Day     string           `json:"day"`     // Day as YYYY-MM-DD
	Month   string           `json:"month"`   // Month as YYYY-MM
	Overall int64            `json:"overall"` // 1 if period=overall
	Sex     []AdsStatsSex    `json:"sex"`
	SexAge  []AdsStatsSexAge `json:"sex_age"`
}

type AdsFloodStats struct {
	Left    int64 `json:"left"`    // Requests left
	Refresh int64 `json:"refresh"` // Time to refresh in seconds
}

type AdsLinkStatus struct {
	Description string `json:"description"`  // Reject reason
	RedirectURL string `json:"redirect_url"` // URL
	Status      string `json:"status"`       // Link status
}

type AdsLookalikeRequest struct {
	ID                       int64                                  `json:"id"`                          // Lookalike request ID
	CreateTime               int64                                  `json:"create_time"`                 // Lookalike request create time, as Unixtime
	UpdateTime               int64                                  `json:"update_time"`                 // Lookalike request update time, as Unixtime
	ScheduledDeleteTime      int64                                  `json:"scheduled_delete_time"`       // Time by which lookalike request would be deleted, as Unixtime
	Status                   string                                 `json:"status"`                      // Lookalike request status
	SourceType               string                                 `json:"source_type"`                 // Lookalike request source type
	SourceRetargetingGroupID int64                                  `json:"source_retargeting_group_id"` // Retargeting group id, which was used as lookalike seed
	SourceName               string                                 `json:"source_name"`                 // Lookalike request seed name (retargeting group name)
	AudienceCount            int64                                  `json:"audience_count"`              // Lookalike request seed audience size
	SaveAudienceLevels       []AdsLookalikeRequestSaveAudienceLevel `json:"save_audience_levels"`
}

type AdsLookalikeRequestSaveAudienceLevel struct {
	Level         int64 `json:"level"`          // Save audience level id, which is used in save audience queries
	AudienceCount int64 `json:"audience_count"` // Saved audience audience size for according level
}

type AdsMusician struct {
	ID   int64  `json:"id"`   // Targeting music artist ID
	Name string `json:"name"` // Music artist name
}

// Object type
type AdsObjectType string

const (
	AdsObjectTypeAd       AdsObjectType = "ad"
	AdsObjectTypeCampaign AdsObjectType = "campaign"
	AdsObjectTypeClient   AdsObjectType = "client"
	AdsObjectTypeOffice   AdsObjectType = "office"
)

type AdsParagraphs struct {
	Paragraph string `json:"paragraph"` // Rules paragraph
}

type AdsPromotedPostReach struct {
	Hide             int64 `json:"hide"`              // Hides amount
	ID               int64 `json:"id"`                // Object ID from 'ids' parameter
	JoinGroup        int64 `json:"join_group"`        // Community joins
	Links            int64 `json:"links"`             // Link clicks
	ReachSubscribers int64 `json:"reach_subscribers"` // Subscribers reach
	ReachTotal       int64 `json:"reach_total"`       // Total reach
	Report           int64 `json:"report"`            // Reports amount
	ToGroup          int64 `json:"to_group"`          // Community clicks
	Unsubscribe      int64 `json:"unsubscribe"`       // 'Unsubscribe' events amount
	VideoViews100p   int64 `json:"video_views_100p"`  // Video views for 100 percent
	VideoViews25p    int64 `json:"video_views_25p"`   // Video views for 25 percent
	VideoViews3s     int64 `json:"video_views_3s"`    // Video views for 3 seconds
	VideoViews50p    int64 `json:"video_views_50p"`   // Video views for 50 percent
	VideoViews75p    int64 `json:"video_views_75p"`   // Video views for 75 percent
	VideoViewsStart  int64 `json:"video_views_start"` // Video starts
}

type AdsRejectReason struct {
	Comment string     `json:"comment"` // Comment text
	Rules   []AdsRules `json:"rules"`
}

type AdsRules struct {
	Paragraphs []AdsParagraphs `json:"paragraphs"`
	Title      string          `json:"title"` // Comment
}

type AdsStats struct {
	ID         int64              `json:"id"` // Object ID
	Stats      AdsStatsFormat     `json:"stats"`
	Type       AdsObjectType      `json:"type"`
	ViewsTimes AdsStatsViewsTimes `json:"views_times"`
}

type AdsStatsAge struct {
	ClicksRate      float64 `json:"clicks_rate"`      // Clicks rate
	ImpressionsRate float64 `json:"impressions_rate"` // Impressions rate
	Value           string  `json:"value"`            // Age interval
}

type AdsStatsCities struct {
	ClicksRate      float64 `json:"clicks_rate"`      // Clicks rate
	ImpressionsRate float64 `json:"impressions_rate"` // Impressions rate
	Name            string  `json:"name"`             // City name
	Value           int64   `json:"value"`            // City ID
}

type AdsStatsFormat struct {
	Clicks          int64  `json:"clicks"`            // Clicks number
	Day             string `json:"day"`               // Day as YYYY-MM-DD
	Impressions     int64  `json:"impressions"`       // Impressions number
	JoinRate        int64  `json:"join_rate"`         // Events number
	Month           string `json:"month"`             // Month as YYYY-MM
	Overall         int64  `json:"overall"`           // 1 if period=overall
	Reach           int64  `json:"reach"`             // Reach
	Spent           int64  `json:"spent"`             // Spent funds
	VideoClicksSite int64  `json:"video_clicks_site"` // Clickthoughs to the advertised site
	VideoViews      int64  `json:"video_views"`       // Video views number
	VideoViewsFull  int64  `json:"video_views_full"`  // Video views (full video)
	VideoViewsHalf  int64  `json:"video_views_half"`  // Video views (half of video)
}

type AdsStatsSex struct {
	ClicksRate      float64          `json:"clicks_rate"`      // Clicks rate
	ImpressionsRate float64          `json:"impressions_rate"` // Impressions rate
	Value           AdsStatsSexValue `json:"value"`
}

type AdsStatsSexAge struct {
	ClicksRate      float64 `json:"clicks_rate"`      // Clicks rate
	ImpressionsRate float64 `json:"impressions_rate"` // Impressions rate
	Value           string  `json:"value"`            // Sex and age interval
}

// Sex
type AdsStatsSexValue string

const (
	AdsStatsSexValueFemale AdsStatsSexValue = "f"
	AdsStatsSexValueMale   AdsStatsSexValue = "m"
)

type AdsStatsViewsTimes struct {
	ViewsAdsTimes1      int64  `json:"views_ads_times_1"`
	ViewsAdsTimes2      int64  `json:"views_ads_times_2"`
	ViewsAdsTimes3      int64  `json:"views_ads_times_3"`
	ViewsAdsTimes4      int64  `json:"views_ads_times_4"`
	ViewsAdsTimes5      string `json:"views_ads_times_5"`
	ViewsAdsTimes6      int64  `json:"views_ads_times_6"`
	ViewsAdsTimes7      int64  `json:"views_ads_times_7"`
	ViewsAdsTimes8      int64  `json:"views_ads_times_8"`
	ViewsAdsTimes9      int64  `json:"views_ads_times_9"`
	ViewsAdsTimes10     int64  `json:"views_ads_times_10"`
	ViewsAdsTimes11Plus int64  `json:"views_ads_times_11_plus"`
}

// allof ads_targ_settings
type AdsTargSettings struct {
	ID           *int64 `json:"id,omitempty"`
	CampaignID   *int64 `json:"campaign_id,omitempty"`
	*AdsCriteria `json:"ads_criteria,omitempty"`
}

type AdsTargStats struct {
	AudienceCount    int64   `json:"audience_count"`     // Audience
	RecommendedCpc   float64 `json:"recommended_cpc"`    // Recommended CPC value for 50% reach (old format)
	RecommendedCpm   float64 `json:"recommended_cpm"`    // Recommended CPM value for 50% reach (old format)
	RecommendedCpc50 float64 `json:"recommended_cpc_50"` // Recommended CPC value for 50% reach
	RecommendedCpm50 float64 `json:"recommended_cpm_50"` // Recommended CPM value for 50% reach
	RecommendedCpc70 float64 `json:"recommended_cpc_70"` // Recommended CPC value for 70% reach
	RecommendedCpm70 float64 `json:"recommended_cpm_70"` // Recommended CPM value for 70% reach
	RecommendedCpc90 float64 `json:"recommended_cpc_90"` // Recommended CPC value for 90% reach
	RecommendedCpm90 float64 `json:"recommended_cpm_90"` // Recommended CPM value for 90% reach
}

type AdsTargSuggestions struct {
	ID   int64  `json:"id"`   // Object ID
	Name string `json:"name"` // Object name
}

type AdsTargSuggestionsCities struct {
	ID     int64  `json:"id"`     // Object ID
	Name   string `json:"name"`   // Object name
	Parent string `json:"parent"` // Parent object
}

type AdsTargSuggestionsRegions struct {
	ID   int64  `json:"id"`   // Object ID
	Name string `json:"name"` // Object name
	Type string `json:"type"` // Object type
}

type AdsTargSuggestionsSchools struct {
	Desc   string                        `json:"desc"`   // Full school title
	ID     int64                         `json:"id"`     // School ID
	Name   string                        `json:"name"`   // School title
	Parent string                        `json:"parent"` // City name
	Type   AdsTargSuggestionsSchoolsType `json:"type"`
}

// School type
type AdsTargSuggestionsSchoolsType string

const (
	AdsTargSuggestionsSchoolsTypeSchool     AdsTargSuggestionsSchoolsType = "school"
	AdsTargSuggestionsSchoolsTypeUniversity AdsTargSuggestionsSchoolsType = "university"
	AdsTargSuggestionsSchoolsTypeFaculty    AdsTargSuggestionsSchoolsType = "faculty"
	AdsTargSuggestionsSchoolsTypeChair      AdsTargSuggestionsSchoolsType = "chair"
)

type AdsTargetGroup struct {
	AudienceCount int64  `json:"audience_count"` // Audience
	Domain        string `json:"domain"`         // Site domain
	ID            int64  `json:"id"`             // Group ID
	Lifetime      int64  `json:"lifetime"`       // Number of days for user to be in group
	Name          string `json:"name"`           // Group name
	Pixel         string `json:"pixel"`          // Pixel code
}

type AdsUsers struct {
	Accesses []AdsAccesses `json:"accesses"`
	UserID   int64         `json:"user_id"` // User ID
}

// allof apps_app
type AppsApp struct {
	*AppsAppMin       `json:"apps_app_min,omitempty"`
	AuthorURL         *string                 `json:"author_url,omitempty"`
	Banner1120        *string                 `json:"banner_1120,omitempty"`
	Banner560         *string                 `json:"banner_560,omitempty"`
	Icon16            *string                 `json:"icon_16,omitempty"`
	IsNew             *BaseBoolInt            `json:"is_new,omitempty"`
	PushEnabled       *BaseBoolInt            `json:"push_enabled,omitempty"`
	ScreenOrientation *int64                  `json:"screen_orientation,omitempty"`
	Friends           *[]int64                `json:"friends,omitempty"`
	CatalogPosition   *int64                  `json:"catalog_position,omitempty"`
	Description       *string                 `json:"description,omitempty"`
	Genre             *string                 `json:"genre,omitempty"`
	GenreID           *int64                  `json:"genre_id,omitempty"`
	International     *bool                   `json:"international,omitempty"`
	IsInCatalog       *int64                  `json:"is_in_catalog,omitempty"`
	LeaderboardType   *AppsAppLeaderboardType `json:"leaderboard_type,omitempty"`
	MembersCount      *int64                  `json:"members_count,omitempty"`
	PlatformID        *string                 `json:"platform_id,omitempty"`
	PublishedDate     *int64                  `json:"published_date,omitempty"`
	ScreenName        *string                 `json:"screen_name,omitempty"`
	Section           *string                 `json:"section,omitempty"`
}

// Leaderboard type
type AppsAppLeaderboardType int64

const (
	AppsAppLeaderboardTypeNotSupported AppsAppLeaderboardType = 0
	AppsAppLeaderboardTypeLevels       AppsAppLeaderboardType = 1
	AppsAppLeaderboardTypePoints       AppsAppLeaderboardType = 2
)

type AppsAppMin struct {
	Type                  AppsAppType `json:"type"`
	ID                    int64       `json:"id"`                      // Application ID
	Title                 string      `json:"title"`                   // Application title
	AuthorOwnerID         int64       `json:"author_owner_id"`         // Application author's ID
	IsInstalled           bool        `json:"is_installed"`            // Is application installed
	Icon139               string      `json:"icon_139"`                // URL of the app icon with 139 px in width
	Icon150               string      `json:"icon_150"`                // URL of the app icon with 150 px in width
	Icon278               string      `json:"icon_278"`                // URL of the app icon with 278 px in width
	Icon576               string      `json:"icon_576"`                // URL of the app icon with 576 px in width
	BackgroundLoaderColor string      `json:"background_loader_color"` // Hex color code without hash sign
	LoaderIcon            string      `json:"loader_icon"`             // SVG data
	Icon75                string      `json:"icon_75"`                 // URL of the app icon with 75 px in width
}

// Application type
type AppsAppType string

const (
	AppsAppTypeApp          AppsAppType = "app"
	AppsAppTypeGame         AppsAppType = "game"
	AppsAppTypeSite         AppsAppType = "site"
	AppsAppTypeStandalone   AppsAppType = "standalone"
	AppsAppTypeVKApp        AppsAppType = "vk_app"
	AppsAppTypeCommunityApp AppsAppType = "community_app"
	AppsAppTypeHtml5Game    AppsAppType = "html5_game"
	AppsAppTypeMiniApp      AppsAppType = "mini_app"
)

type AppsLeaderboard struct {
	Level  int64 `json:"level"`   // Level
	Points int64 `json:"points"`  // Points number
	Score  int64 `json:"score"`   // Score number
	UserID int64 `json:"user_id"` // User ID
}

// Scope description
type AppsScope struct {
	Name  string `json:"name"`  // Scope name
	Title string `json:"title"` // Scope title
}

type AudioAudio struct {
	Artist    string `json:"artist"`    // Artist name
	ID        int64  `json:"id"`        // Audio ID
	Title     string `json:"title"`     // Title
	URL       string `json:"url"`       // URL of mp3 file
	Duration  int64  `json:"duration"`  // Duration in seconds
	Date      int64  `json:"date"`      // Date when uploaded
	AlbumID   int64  `json:"album_id"`  // Album ID
	GenreID   int64  `json:"genre_id"`  // Genre ID
	Performer string `json:"performer"` // Performer name
}

type BaseBoolInt int64

const (
	BaseBoolIntNo  BaseBoolInt = 0
	BaseBoolIntYes BaseBoolInt = 1
)

type BaseCity struct {
	ID    int64  `json:"id"`    // City ID
	Title string `json:"title"` // City title
}

type BaseCommentsInfo struct {
	CanPost       BaseBoolInt `json:"can_post"`        // Information whether current user can comment the post
	Count         int64       `json:"count"`           // Comments number
	GroupsCanPost bool        `json:"groups_can_post"` // Information whether groups can comment the post
}

type BaseCountry struct {
	ID    int64  `json:"id"`    // Country ID
	Title string `json:"title"` // Country title
}

type BaseCropPhoto struct {
	Photo PhotosPhoto       `json:"photo"`
	Crop  BaseCropPhotoCrop `json:"crop"`
	Rect  BaseCropPhotoRect `json:"rect"`
}

type BaseCropPhotoCrop struct {
	X  float64 `json:"x"`  // Coordinate X of the left upper corner
	Y  float64 `json:"y"`  // Coordinate Y of the left upper corner
	X2 float64 `json:"x2"` // Coordinate X of the right lower corner
	Y2 float64 `json:"y2"` // Coordinate Y of the right lower corner
}

type BaseCropPhotoRect struct {
	X  float64 `json:"x"`  // Coordinate X of the left upper corner
	Y  float64 `json:"y"`  // Coordinate Y of the left upper corner
	X2 float64 `json:"x2"` // Coordinate X of the right lower corner
	Y2 float64 `json:"y2"` // Coordinate Y of the right lower corner
}

type BaseError struct {
	ErrorCode     int64              `json:"error_code"` // Error code
	ErrorMsg      string             `json:"error_msg"`  // Error message
	ErrorText     string             `json:"error_text"` // Localized error message
	RequestParams []BaseRequestParam `json:"request_params"`
}

type BaseGeo struct {
	Coordinates BaseGeoCoordinates `json:"coordinates"`
	Place       BasePlace          `json:"place"`
	Showmap     int64              `json:"showmap"` // Information whether a map is showed
	Type        string             `json:"type"`    // Place type
}

type BaseGeoCoordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type BaseGradientPoint struct {
	Color    string  `json:"color"`    // Hex color code without #
	Position float64 `json:"position"` // Point position
}

type BaseImage struct {
	ID     string `json:"id"`
	Height int64  `json:"height"` // Image height
	URL    string `json:"url"`    // Image url
	Width  int64  `json:"width"`  // Image width
}

type BaseLikes struct {
	Count     int64       `json:"count"`      // Likes number
	UserLikes BaseBoolInt `json:"user_likes"` // Information whether current user likes the photo
}

type BaseLikesInfo struct {
	CanLike    BaseBoolInt `json:"can_like"`    // Information whether current user can like the post
	CanPublish BaseBoolInt `json:"can_publish"` // Information whether current user can repost
	Count      int64       `json:"count"`       // Likes number
	UserLikes  int64       `json:"user_likes"`  // Information whether current uer has liked the post
}

type BaseLink struct {
	Application  BaseLinkApplication `json:"application"`
	Button       BaseLinkButton      `json:"button"`
	Caption      string              `json:"caption"`     // Link caption
	Description  string              `json:"description"` // Link description
	ID           string              `json:"id"`          // Link ID
	IsFavorite   bool                `json:"is_favorite"`
	Photo        PhotosPhoto         `json:"photo"`
	PreviewPage  string              `json:"preview_page"` // String ID of the page with article preview
	PreviewURL   string              `json:"preview_url"`  // URL of the page with article preview
	Product      BaseLinkProduct     `json:"product"`
	Rating       BaseLinkRating      `json:"rating"`
	Title        string              `json:"title"` // Link title
	URL          string              `json:"url"`   // Link URL
	TargetObject LinkTargetObject    `json:"target_object"`
	IsExternal   bool                `json:"is_external"` // Information whether the current link is external
	Video        VideoVideo          `json:"video"`       // Video from link
}

type BaseLinkApplication struct {
	AppID float64                  `json:"app_id"` // Application Id
	Store BaseLinkApplicationStore `json:"store"`
}

type BaseLinkApplicationStore struct {
	ID   float64 `json:"id"`   // Store Id
	Name string  `json:"name"` // Store name
}

type BaseLinkButton struct {
	Action    BaseLinkButtonAction `json:"action"`     // Button action
	Title     string               `json:"title"`      // Button title
	BlockID   string               `json:"block_id"`   // Target block id
	SectionID string               `json:"section_id"` // Target section id
	OwnerID   int64                `json:"owner_id"`   // Owner id
	Icon      string               `json:"icon"`       // Button icon name, e.g. 'phone' or 'gift'
	Style     BaseLinkButtonStyle  `json:"style"`
}

type BaseLinkButtonAction struct {
	Type          BaseLinkButtonActionType `json:"type"`
	URL           string                   `json:"url"` // Action URL
	ConsumeReason string                   `json:"consume_reason"`
}

// Action type
type BaseLinkButtonActionType string

const (
	BaseLinkButtonActionTypeOpenURL BaseLinkButtonActionType = "open_url"
)

// Button style
type BaseLinkButtonStyle string

type BaseLinkProduct struct {
	Price       MarketPrice `json:"price"`
	Merchant    string      `json:"merchant"`
	OrdersCount int64       `json:"orders_count"`
}

type BaseLinkRating struct {
	ReviewsCount int64   `json:"reviews_count"` // Count of reviews
	Stars        float64 `json:"stars"`         // Count of stars
}

type BaseMessageError struct {
	Code        int64  `json:"code"`        // Error code
	Description string `json:"description"` // Error message
}

type BaseObject struct {
	ID    int64  `json:"id"`    // Object ID
	Title string `json:"title"` // Object title
}

type BaseObjectCount struct {
	Count int64 `json:"count"` // Items count
}

type BaseObjectWithName struct {
	ID   int64  `json:"id"`   // Object ID
	Name string `json:"name"` // Object name
}

type BasePlace struct {
	Address   string  `json:"address"`   // Place address
	Checkins  int64   `json:"checkins"`  // Checkins number
	City      string  `json:"city"`      // City name
	Country   string  `json:"country"`   // Country name
	Created   int64   `json:"created"`   // Date of the place creation in Unixtime
	Icon      string  `json:"icon"`      // URL of the place's icon
	ID        int64   `json:"id"`        // Place ID
	Latitude  float64 `json:"latitude"`  // Place latitude
	Longitude float64 `json:"longitude"` // Place longitude
	Title     string  `json:"title"`     // Place title
	Type      string  `json:"type"`      // Place type
}

type BasePropertyExists int64

const (
	BasePropertyExistsPropertyExists BasePropertyExists = 1
)

type BaseRepostsInfo struct {
	Count        int64 `json:"count"`         // Reposts number
	UserReposted int64 `json:"user_reposted"` // Information whether current user has reposted the post
}

type BaseRequestParam struct {
	Key   string `json:"key"`   // Parameter name
	Value string `json:"value"` // Parameter value
}

type BaseSex int64

const (
	BaseSexUnknown BaseSex = 0
	BaseSexFemale  BaseSex = 1
	BaseSexMale    BaseSex = 2
)

type BaseSticker struct {
	StickerID            int64                  `json:"sticker_id"` // Sticker ID
	ProductID            int64                  `json:"product_id"` // Pack ID
	Images               []BaseImage            `json:"images"`
	ImagesWithBackground []BaseImage            `json:"images_with_background"`
	AnimationURL         string                 `json:"animation_url"` // URL of sticker animation script
	Animations           []BaseStickerAnimation `json:"animations"`    // Array of sticker animation script objects
	IsAllowed            bool                   `json:"is_allowed"`    // Information whether the sticker is allowed
}

type BaseStickerAnimation struct {
	Type string `json:"type"` // Type of animation script
	URL  string `json:"url"`  // URL of animation script
}

type BaseUploadServer struct {
	UploadURL string `json:"upload_url"` // Upload URL
}

type BaseUserGroupFields string

const (
	BaseUserGroupFieldsAbout                  BaseUserGroupFields = "about"
	BaseUserGroupFieldsActionButton           BaseUserGroupFields = "action_button"
	BaseUserGroupFieldsActivities             BaseUserGroupFields = "activities"
	BaseUserGroupFieldsActivity               BaseUserGroupFields = "activity"
	BaseUserGroupFieldsAddresses              BaseUserGroupFields = "addresses"
	BaseUserGroupFieldsAdminLevel             BaseUserGroupFields = "admin_level"
	BaseUserGroupFieldsAgeLimits              BaseUserGroupFields = "age_limits"
	BaseUserGroupFieldsAuthorID               BaseUserGroupFields = "author_id"
	BaseUserGroupFieldsBanInfo                BaseUserGroupFields = "ban_info"
	BaseUserGroupFieldsBdate                  BaseUserGroupFields = "bdate"
	BaseUserGroupFieldsBlacklisted            BaseUserGroupFields = "blacklisted"
	BaseUserGroupFieldsBlacklistedByMe        BaseUserGroupFields = "blacklisted_by_me"
	BaseUserGroupFieldsBooks                  BaseUserGroupFields = "books"
	BaseUserGroupFieldsCanCreateTopic         BaseUserGroupFields = "can_create_topic"
	BaseUserGroupFieldsCanMessage             BaseUserGroupFields = "can_message"
	BaseUserGroupFieldsCanPost                BaseUserGroupFields = "can_post"
	BaseUserGroupFieldsCanSeeAllPosts         BaseUserGroupFields = "can_see_all_posts"
	BaseUserGroupFieldsCanSeeAudio            BaseUserGroupFields = "can_see_audio"
	BaseUserGroupFieldsCanSendFriendRequest   BaseUserGroupFields = "can_send_friend_request"
	BaseUserGroupFieldsCanUploadVideo         BaseUserGroupFields = "can_upload_video"
	BaseUserGroupFieldsCanWritePrivateMessage BaseUserGroupFields = "can_write_private_message"
	BaseUserGroupFieldsCareer                 BaseUserGroupFields = "career"
	BaseUserGroupFieldsCity                   BaseUserGroupFields = "city"
	BaseUserGroupFieldsCommonCount            BaseUserGroupFields = "common_count"
	BaseUserGroupFieldsConnections            BaseUserGroupFields = "connections"
	BaseUserGroupFieldsContacts               BaseUserGroupFields = "contacts"
	BaseUserGroupFieldsCounters               BaseUserGroupFields = "counters"
	BaseUserGroupFieldsCountry                BaseUserGroupFields = "country"
	BaseUserGroupFieldsCover                  BaseUserGroupFields = "cover"
	BaseUserGroupFieldsCropPhoto              BaseUserGroupFields = "crop_photo"
	BaseUserGroupFieldsDeactivated            BaseUserGroupFields = "deactivated"
	BaseUserGroupFieldsDescription            BaseUserGroupFields = "description"
	BaseUserGroupFieldsDomain                 BaseUserGroupFields = "domain"
	BaseUserGroupFieldsEducation              BaseUserGroupFields = "education"
	BaseUserGroupFieldsExports                BaseUserGroupFields = "exports"
	BaseUserGroupFieldsFinishDate             BaseUserGroupFields = "finish_date"
	BaseUserGroupFieldsFixedPost              BaseUserGroupFields = "fixed_post"
	BaseUserGroupFieldsFollowersCount         BaseUserGroupFields = "followers_count"
	BaseUserGroupFieldsFriendStatus           BaseUserGroupFields = "friend_status"
	BaseUserGroupFieldsGames                  BaseUserGroupFields = "games"
	BaseUserGroupFieldsHasMarketApp           BaseUserGroupFields = "has_market_app"
	BaseUserGroupFieldsHasMobile              BaseUserGroupFields = "has_mobile"
	BaseUserGroupFieldsHasPhoto               BaseUserGroupFields = "has_photo"
	BaseUserGroupFieldsHomeTown               BaseUserGroupFields = "home_town"
	BaseUserGroupFieldsID                     BaseUserGroupFields = "id"
	BaseUserGroupFieldsInterests              BaseUserGroupFields = "interests"
	BaseUserGroupFieldsIsAdmin                BaseUserGroupFields = "is_admin"
	BaseUserGroupFieldsIsClosed               BaseUserGroupFields = "is_closed"
	BaseUserGroupFieldsIsFavorite             BaseUserGroupFields = "is_favorite"
	BaseUserGroupFieldsIsFriend               BaseUserGroupFields = "is_friend"
	BaseUserGroupFieldsIsHiddenFromFeed       BaseUserGroupFields = "is_hidden_from_feed"
	BaseUserGroupFieldsIsMember               BaseUserGroupFields = "is_member"
	BaseUserGroupFieldsIsMessagesBlocked      BaseUserGroupFields = "is_messages_blocked"
	BaseUserGroupFieldsCanSendNotify          BaseUserGroupFields = "can_send_notify"
	BaseUserGroupFieldsIsSubscribed           BaseUserGroupFields = "is_subscribed"
	BaseUserGroupFieldsLastSeen               BaseUserGroupFields = "last_seen"
	BaseUserGroupFieldsLinks                  BaseUserGroupFields = "links"
	BaseUserGroupFieldsLists                  BaseUserGroupFields = "lists"
	BaseUserGroupFieldsMaidenName             BaseUserGroupFields = "maiden_name"
	BaseUserGroupFieldsMainAlbumID            BaseUserGroupFields = "main_album_id"
	BaseUserGroupFieldsMainSection            BaseUserGroupFields = "main_section"
	BaseUserGroupFieldsMarket                 BaseUserGroupFields = "market"
	BaseUserGroupFieldsMemberStatus           BaseUserGroupFields = "member_status"
	BaseUserGroupFieldsMembersCount           BaseUserGroupFields = "members_count"
	BaseUserGroupFieldsMilitary               BaseUserGroupFields = "military"
	BaseUserGroupFieldsMovies                 BaseUserGroupFields = "movies"
	BaseUserGroupFieldsMusic                  BaseUserGroupFields = "music"
	BaseUserGroupFieldsName                   BaseUserGroupFields = "name"
	BaseUserGroupFieldsNickname               BaseUserGroupFields = "nickname"
	BaseUserGroupFieldsOccupation             BaseUserGroupFields = "occupation"
	BaseUserGroupFieldsOnline                 BaseUserGroupFields = "online"
	BaseUserGroupFieldsOnlineStatus           BaseUserGroupFields = "online_status"
	BaseUserGroupFieldsPersonal               BaseUserGroupFields = "personal"
	BaseUserGroupFieldsPhone                  BaseUserGroupFields = "phone"
	BaseUserGroupFieldsPhoto100               BaseUserGroupFields = "photo_100"
	BaseUserGroupFieldsPhoto200               BaseUserGroupFields = "photo_200"
	BaseUserGroupFieldsPhoto200Orig           BaseUserGroupFields = "photo_200_orig"
	BaseUserGroupFieldsPhoto400Orig           BaseUserGroupFields = "photo_400_orig"
	BaseUserGroupFieldsPhoto50                BaseUserGroupFields = "photo_50"
	BaseUserGroupFieldsPhotoID                BaseUserGroupFields = "photo_id"
	BaseUserGroupFieldsPhotoMax               BaseUserGroupFields = "photo_max"
	BaseUserGroupFieldsPhotoMaxOrig           BaseUserGroupFields = "photo_max_orig"
	BaseUserGroupFieldsQuotes                 BaseUserGroupFields = "quotes"
	BaseUserGroupFieldsRelation               BaseUserGroupFields = "relation"
	BaseUserGroupFieldsRelatives              BaseUserGroupFields = "relatives"
	BaseUserGroupFieldsSchools                BaseUserGroupFields = "schools"
	BaseUserGroupFieldsScreenName             BaseUserGroupFields = "screen_name"
	BaseUserGroupFieldsSex                    BaseUserGroupFields = "sex"
	BaseUserGroupFieldsSite                   BaseUserGroupFields = "site"
	BaseUserGroupFieldsStartDate              BaseUserGroupFields = "start_date"
	BaseUserGroupFieldsStatus                 BaseUserGroupFields = "status"
	BaseUserGroupFieldsTimezone               BaseUserGroupFields = "timezone"
	BaseUserGroupFieldsTrending               BaseUserGroupFields = "trending"
	BaseUserGroupFieldsTV                     BaseUserGroupFields = "tv"
	BaseUserGroupFieldsType                   BaseUserGroupFields = "type"
	BaseUserGroupFieldsUniversities           BaseUserGroupFields = "universities"
	BaseUserGroupFieldsVerified               BaseUserGroupFields = "verified"
	BaseUserGroupFieldsWallComments           BaseUserGroupFields = "wall_comments"
	BaseUserGroupFieldsWikiPage               BaseUserGroupFields = "wiki_page"
	BaseUserGroupFieldsVKAdminStatus          BaseUserGroupFields = "vk_admin_status"
)

type BaseUserID struct {
	UserID int64 `json:"user_id"` // User ID
}

// Sort type
type BoardDefaultOrder int64

const (
	BoardDefaultOrderDescUpdated BoardDefaultOrder = 1
	BoardDefaultOrderDescCreated BoardDefaultOrder = 2
	BoardDefaultOrderAscUpdated  BoardDefaultOrder = -1
	BoardDefaultOrderAscCreated  BoardDefaultOrder = -2
)

type BoardTopic struct {
	Comments  int64       `json:"comments"`   // Comments number
	Created   int64       `json:"created"`    // Date when the topic has been created in Unixtime
	CreatedBy int64       `json:"created_by"` // Creator ID
	ID        int64       `json:"id"`         // Topic ID
	IsClosed  BaseBoolInt `json:"is_closed"`  // Information whether the topic is closed
	IsFixed   BaseBoolInt `json:"is_fixed"`   // Information whether the topic is fixed
	Title     string      `json:"title"`      // Topic title
	Updated   int64       `json:"updated"`    // Date when the topic has been updated in Unixtime
	UpdatedBy int64       `json:"updated_by"` // ID of user who updated the topic
}

type BoardTopicComment struct {
	Attachments []WallCommentAttachment `json:"attachments"`
	Date        int64                   `json:"date"`        // Date when the comment has been added in Unixtime
	FromID      int64                   `json:"from_id"`     // Author ID
	ID          int64                   `json:"id"`          // Comment ID
	RealOffset  int64                   `json:"real_offset"` // Real position of the comment
	Text        string                  `json:"text"`        // Comment text
	CanEdit     BaseBoolInt             `json:"can_edit"`    // Information whether current user can edit the comment
	Likes       BaseLikesInfo           `json:"likes"`
}

type BoardTopicPoll struct {
	AnswerID int64         `json:"answer_id"` // Current user's answer ID
	Answers  []PollsAnswer `json:"answers"`
	Created  int64         `json:"created"`   // Date when poll has been created in Unixtime
	IsClosed BaseBoolInt   `json:"is_closed"` // Information whether the poll is closed
	OwnerID  int64         `json:"owner_id"`  // Poll owner's ID
	PollID   int64         `json:"poll_id"`   // Poll ID
	Question string        `json:"question"`  // Poll question
	Votes    string        `json:"votes"`     // Votes number
}

type CallbackBoardPostDelete struct {
	TopicOwnerID int64 `json:"topic_owner_id"`
	TopicID      int64 `json:"topic_id"`
	ID           int64 `json:"id"`
}

type CallbackConfirmationMessage struct {
	Type    CallbackMessageType `json:"type"`
	GroupID int64               `json:"group_id"`
	Secret  string              `json:"secret"`
}

type CallbackGroupChangePhoto struct {
	UserID int64       `json:"user_id"`
	Photo  PhotosPhoto `json:"photo"`
}

type CallbackGroupChangeSettings struct {
	UserID int64       `json:"user_id"`
	Self   BaseBoolInt `json:"self"`
}

type CallbackGroupJoin struct {
	UserID   int64                 `json:"user_id"`
	JoinType CallbackGroupJoinType `json:"join_type"`
}

type CallbackGroupJoinType string

const (
	CallbackGroupJoinTypeJoin     CallbackGroupJoinType = "join"
	CallbackGroupJoinTypeUnsure   CallbackGroupJoinType = "unsure"
	CallbackGroupJoinTypeAccepted CallbackGroupJoinType = "accepted"
	CallbackGroupJoinTypeApproved CallbackGroupJoinType = "approved"
	CallbackGroupJoinTypeRequest  CallbackGroupJoinType = "request"
)

type CallbackGroupLeave struct {
	UserID int64       `json:"user_id"`
	Self   BaseBoolInt `json:"self"`
}

type CallbackGroupMarket int64

const (
	CallbackGroupMarketDisabled CallbackGroupMarket = 0
	CallbackGroupMarketOpen     CallbackGroupMarket = 1
)

type CallbackGroupOfficerRole int64

const (
	CallbackGroupOfficerRoleNone          CallbackGroupOfficerRole = 0
	CallbackGroupOfficerRoleModerator     CallbackGroupOfficerRole = 1
	CallbackGroupOfficerRoleEditor        CallbackGroupOfficerRole = 2
	CallbackGroupOfficerRoleAdministrator CallbackGroupOfficerRole = 3
)

type CallbackGroupOfficersEdit struct {
	AdminID  int64                    `json:"admin_id"`
	UserID   int64                    `json:"user_id"`
	LevelOld CallbackGroupOfficerRole `json:"level_old"`
	LevelNew CallbackGroupOfficerRole `json:"level_new"`
}

type CallbackGroupSettingsChanges struct {
	Title               string                   `json:"title"`
	Description         string                   `json:"description"`
	Access              GroupsGroupIsClosed      `json:"access"`
	ScreenName          string                   `json:"screen_name"`
	PublicCategory      int64                    `json:"public_category"`
	PublicSubcategory   int64                    `json:"public_subcategory"`
	AgeLimits           GroupsGroupFullAgeLimits `json:"age_limits"`
	Website             string                   `json:"website"`
	EnableStatusDefault GroupsGroupWall          `json:"enable_status_default"`
	EnableAudio         GroupsGroupAudio         `json:"enable_audio"`
	EnableVideo         GroupsGroupVideo         `json:"enable_video"`
	EnablePhoto         GroupsGroupPhotos        `json:"enable_photo"`
	EnableMarket        CallbackGroupMarket      `json:"enable_market"`
}

type CallbackLikeAddRemove struct {
	LikerID       int64  `json:"liker_id"`
	ObjectType    string `json:"object_type"`
	ObjectOwnerID int64  `json:"object_owner_id"`
	ObjectID      int64  `json:"object_id"`
	PostID        int64  `json:"post_id"`
	ThreadReplyID int64  `json:"thread_reply_id"`
}

type CallbackMarketComment struct {
	ID            int64  `json:"id"`
	FromID        int64  `json:"from_id"`
	Date          int64  `json:"date"`
	Text          string `json:"text"`
	MarketOwnerOd int64  `json:"market_owner_od"`
	PhotoID       int64  `json:"photo_id"`
}

type CallbackMarketCommentDelete struct {
	OwnerID int64 `json:"owner_id"`
	ID      int64 `json:"id"`
	UserID  int64 `json:"user_id"`
	ItemID  int64 `json:"item_id"`
}

type CallbackMessageAllow struct {
	UserID int64  `json:"user_id"`
	Key    string `json:"key"`
}

type CallbackMessageBase struct {
	Type    CallbackMessageType `json:"type"`
	Object  interface{}         `json:"object"`
	GroupID int64               `json:"group_id"`
}

type CallbackMessageDeny struct {
	UserID int64 `json:"user_id"`
}

type CallbackMessageType string

const (
	CallbackMessageTypeConfirmation         CallbackMessageType = "confirmation"
	CallbackMessageTypeGroupChangePhoto     CallbackMessageType = "group_change_photo"
	CallbackMessageTypeGroupChangeSettings  CallbackMessageType = "group_change_settings"
	CallbackMessageTypeGroupOfficersEdit    CallbackMessageType = "group_officers_edit"
	CallbackMessageTypeLeadFormsNew         CallbackMessageType = "lead_forms_new"
	CallbackMessageTypeMarketCommentDelete  CallbackMessageType = "market_comment_delete"
	CallbackMessageTypeMarketCommentEdit    CallbackMessageType = "market_comment_edit"
	CallbackMessageTypeMarketCommentRestore CallbackMessageType = "market_comment_restore"
	CallbackMessageTypeMessageAllow         CallbackMessageType = "message_allow"
	CallbackMessageTypeMessageDeny          CallbackMessageType = "message_deny"
	CallbackMessageTypeMessageRead          CallbackMessageType = "message_read"
	CallbackMessageTypeMessageReply         CallbackMessageType = "message_reply"
	CallbackMessageTypeMessageTypingState   CallbackMessageType = "message_typing_state"
	CallbackMessageTypeMessagesEdit         CallbackMessageType = "messages_edit"
	CallbackMessageTypePhotoCommentDelete   CallbackMessageType = "photo_comment_delete"
	CallbackMessageTypePhotoCommentEdit     CallbackMessageType = "photo_comment_edit"
	CallbackMessageTypePhotoCommentRestore  CallbackMessageType = "photo_comment_restore"
	CallbackMessageTypePollVoteNew          CallbackMessageType = "poll_vote_new"
	CallbackMessageTypeUserBlock            CallbackMessageType = "user_block"
	CallbackMessageTypeUserUnblock          CallbackMessageType = "user_unblock"
	CallbackMessageTypeVideoCommentDelete   CallbackMessageType = "video_comment_delete"
	CallbackMessageTypeVideoCommentEdit     CallbackMessageType = "video_comment_edit"
	CallbackMessageTypeVideoCommentRestore  CallbackMessageType = "video_comment_restore"
	CallbackMessageTypeWallReplyDelete      CallbackMessageType = "wall_reply_delete"
	CallbackMessageTypeWallReplyRestore     CallbackMessageType = "wall_reply_restore"
	CallbackMessageTypeWallRepost           CallbackMessageType = "wall_repost"
)

type CallbackPhotoComment struct {
	ID           int64  `json:"id"`
	FromID       int64  `json:"from_id"`
	Date         int64  `json:"date"`
	Text         string `json:"text"`
	PhotoOwnerOd int64  `json:"photo_owner_od"`
}

type CallbackPhotoCommentDelete struct {
	ID      int64 `json:"id"`
	OwnerID int64 `json:"owner_id"`
	UserID  int64 `json:"user_id"`
	PhotoID int64 `json:"photo_id"`
}

type CallbackPollVoteNew struct {
	OwnerID  int64 `json:"owner_id"`
	PollID   int64 `json:"poll_id"`
	OptionID int64 `json:"option_id"`
	UserID   int64 `json:"user_id"`
}

type CallbackQrScan struct {
	UserID  int64  `json:"user_id"`
	Data    string `json:"data"`
	Type    string `json:"type"`
	Subtype string `json:"subtype"`
	Reread  bool   `json:"reread"`
}

type CallbackUserBlock struct {
	AdminID     int64  `json:"admin_id"`
	UserID      int64  `json:"user_id"`
	UnblockDate int64  `json:"unblock_date"`
	Reason      int64  `json:"reason"`
	Comment     string `json:"comment"`
}

type CallbackUserUnblock struct {
	AdminID   int64 `json:"admin_id"`
	UserID    int64 `json:"user_id"`
	ByEndDate int64 `json:"by_end_date"`
}

type CallbackVideoComment struct {
	ID           int64  `json:"id"`
	FromID       int64  `json:"from_id"`
	Date         int64  `json:"date"`
	Text         string `json:"text"`
	VideoOwnerOd int64  `json:"video_owner_od"`
}

type CallbackVideoCommentDelete struct {
	ID      int64 `json:"id"`
	OwnerID int64 `json:"owner_id"`
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

type CallbackWallCommentDelete struct {
	OwnerID int64 `json:"owner_id"`
	ID      int64 `json:"id"`
	UserID  int64 `json:"user_id"`
	PostID  int64 `json:"post_id"`
}

type CommentThread struct {
	CanPost         bool              `json:"can_post"`        // Information whether current user can comment the post
	Count           int64             `json:"count"`           // Comments number
	GroupsCanPost   bool              `json:"groups_can_post"` // Information whether groups can comment the post
	Items           []WallWallComment `json:"items"`
	ShowReplyButton bool              `json:"show_reply_button"` // Information whether recommended to display reply button
}

// allof database_city
type DatabaseCity struct {
	*BaseObject `json:"base_object,omitempty"`
	Area        *string      `json:"area,omitempty"`
	Region      *string      `json:"region,omitempty"`
	Important   *BaseBoolInt `json:"important,omitempty"`
}

type DatabaseFaculty struct {
	ID    int64  `json:"id"`    // Faculty ID
	Title string `json:"title"` // Faculty title
}

type DatabaseRegion struct {
	ID    int64  `json:"id"`    // Region ID
	Title string `json:"title"` // Region title
}

type DatabaseSchool struct {
	ID    int64  `json:"id"`    // School ID
	Title string `json:"title"` // School title
}

type DatabaseStation struct {
	CityID int64  `json:"city_id"` // City ID
	Color  string `json:"color"`   // Hex color code without #
	ID     int64  `json:"id"`      // Station ID
	Name   string `json:"name"`    // Station name
}

type DatabaseUniversity struct {
	ID    int64  `json:"id"`    // University ID
	Title string `json:"title"` // University title
}

type DocsDoc struct {
	ID         int64          `json:"id"`       // Document ID
	OwnerID    int64          `json:"owner_id"` // Document owner ID
	Title      string         `json:"title"`    // Document title
	Size       int64          `json:"size"`     // File size in bites
	Ext        string         `json:"ext"`      // File extension
	URL        string         `json:"url"`      // File URL
	Date       int64          `json:"date"`     // Date when file has been uploaded in Unixtime
	Type       int64          `json:"type"`     // Document type
	Preview    DocsDocPreview `json:"preview"`
	IsLicensed BaseBoolInt    `json:"is_licensed"`
	AccessKey  string         `json:"access_key"` // Access key for the document
	Tags       []string       `json:"tags"`       // Document tags
}

// Doc attachment type
type DocsDocAttachmentType string

const (
	DocsDocAttachmentTypeDoc          DocsDocAttachmentType = "doc"
	DocsDocAttachmentTypeGraffiti     DocsDocAttachmentType = "graffiti"
	DocsDocAttachmentTypeAudioMessage DocsDocAttachmentType = "audio_message"
)

type DocsDocPreview struct {
	AudioMsg DocsDocPreviewAudioMsg `json:"audio_msg"`
	Graffiti DocsDocPreviewGraffiti `json:"graffiti"`
	Photo    DocsDocPreviewPhoto    `json:"photo"`
	Video    DocsDocPreviewVideo    `json:"video"`
}

type DocsDocPreviewAudioMsg struct {
	Duration int64   `json:"duration"` // Audio message duration in seconds
	LinkMp3  string  `json:"link_mp3"` // MP3 file URL
	LinkOgg  string  `json:"link_ogg"` // OGG file URL
	Waveform []int64 `json:"waveform"`
}

type DocsDocPreviewGraffiti struct {
	Src    string `json:"src"`    // Graffiti file URL
	Width  int64  `json:"width"`  // Graffiti width
	Height int64  `json:"height"` // Graffiti height
}

type DocsDocPreviewPhoto struct {
	Sizes []DocsDocPreviewPhotoSizes `json:"sizes"`
}

type DocsDocPreviewPhotoSizes struct {
	Src    string               `json:"src"`    // URL of the image
	Width  int64                `json:"width"`  // Width in px
	Height int64                `json:"height"` // Height in px
	Type   PhotosPhotoSizesType `json:"type"`
}

type DocsDocPreviewVideo struct {
	Src      string `json:"src"`       // Video URL
	Width    int64  `json:"width"`     // Video's width in pixels
	Height   int64  `json:"height"`    // Video's height in pixels
	FileSize int64  `json:"file_size"` // Video file size in bites
}

type DocsDocTypes struct {
	ID    int64  `json:"id"`    // Doc type ID
	Name  string `json:"name"`  // Doc type title
	Count int64  `json:"count"` // Number of docs
}

type DocsDocUploadResponse struct {
	File string `json:"file"` // Uploaded file data
}

type EventsEventAttach struct {
	Address      string                      `json:"address"`       // address of event
	ButtonText   string                      `json:"button_text"`   // text of attach
	Friends      []int64                     `json:"friends"`       // array of friends ids
	ID           int64                       `json:"id"`            // event ID
	IsFavorite   bool                        `json:"is_favorite"`   // is favorite
	MemberStatus GroupsGroupFullMemberStatus `json:"member_status"` // Current user's member status
	Text         string                      `json:"text"`          // text of attach
	Time         int64                       `json:"time"`          // event start time
}

type FaveBookmark struct {
	AddedDate int64            `json:"added_date"` // Timestamp, when this item was bookmarked
	Link      BaseLink         `json:"link"`
	Post      WallWallpostFull `json:"post"`
	Product   MarketMarketItem `json:"product"`
	Seen      bool             `json:"seen"` // Has user seen this item
	Tags      []FaveTag        `json:"tags"`
	Type      FaveBookmarkType `json:"type"` // Item type
	Video     VideoVideo       `json:"video"`
}

type FaveBookmarkType string

const (
	FaveBookmarkTypePost    FaveBookmarkType = "post"
	FaveBookmarkTypeVideo   FaveBookmarkType = "video"
	FaveBookmarkTypeProduct FaveBookmarkType = "product"
	FaveBookmarkTypeArticle FaveBookmarkType = "article"
	FaveBookmarkTypeLink    FaveBookmarkType = "link"
)

type FavePage struct {
	Description string          `json:"description"` // Some info about user or group
	Group       GroupsGroupFull `json:"group"`
	Tags        []FaveTag       `json:"tags"`
	Type        FavePageType    `json:"type"`         // Item type
	UpdatedDate int64           `json:"updated_date"` // Timestamp, when this page was bookmarked
	User        UsersUserFull   `json:"user"`
}

type FavePageType string

const (
	FavePageTypeUser  FavePageType = "user"
	FavePageTypeGroup FavePageType = "group"
	FavePageTypeHints FavePageType = "hints"
)

type FaveTag struct {
	ID   int64  `json:"id"`   // Tag id
	Name string `json:"name"` // Tag name
}

// allof friends_friend_extended_status
type FriendsFriendExtendedStatus struct {
	*FriendsFriendStatus `json:"friends_friend_status,omitempty"`
	IsRequestUnread      *bool `json:"is_request_unread,omitempty"`
}

type FriendsFriendStatus struct {
	FriendStatus FriendsFriendStatusStatus `json:"friend_status"`
	Sign         string                    `json:"sign"`    // MD5 hash for the result validation
	UserID       int64                     `json:"user_id"` // User ID
}

// Friend status with the user
type FriendsFriendStatusStatus int64

const (
	FriendsFriendStatusStatusNotAFriend       FriendsFriendStatusStatus = 0
	FriendsFriendStatusStatusOutcomingRequest FriendsFriendStatusStatus = 1
	FriendsFriendStatusStatusIncomingRequest  FriendsFriendStatusStatus = 2
	FriendsFriendStatusStatusIsFriend         FriendsFriendStatusStatus = 3
)

type FriendsFriendsList struct {
	ID   int64  `json:"id"`   // List ID
	Name string `json:"name"` // List title
}

type FriendsMutualFriend struct {
	CommonCount   int64   `json:"common_count"` // Total mutual friends number
	CommonFriends []int64 `json:"common_friends"`
	ID            int64   `json:"id"` // User ID
}

type FriendsRequests struct {
	From   string                `json:"from"` // ID of the user by whom friend has been suggested
	Mutual FriendsRequestsMutual `json:"mutual"`
	UserID int64                 `json:"user_id"` // User ID
}

type FriendsRequestsMutual struct {
	Count int64   `json:"count"` // Total mutual friends number
	Users []int64 `json:"users"`
}

type FriendsRequestsXtrMessage struct {
	From    string                `json:"from"`    // ID of the user by whom friend has been suggested
	Message string                `json:"message"` // Message sent with a request
	Mutual  FriendsRequestsMutual `json:"mutual"`
	UserID  int64                 `json:"user_id"` // User ID
}

// allof friends_user_xtr_lists
type FriendsUserXtrLists struct {
	*UsersUserFull `json:"users_user_full,omitempty"`
	Lists          *[]int64 `json:"lists,omitempty"`
}

// allof friends_user_xtr_phone
type FriendsUserXtrPhone struct {
	*UsersUserFull `json:"users_user_full,omitempty"`
	Phone          *string `json:"phone,omitempty"`
}

type GiftsGift struct {
	Date     int64            `json:"date"`    // Date when gist has been sent in Unixtime
	FromID   int64            `json:"from_id"` // Gift sender ID
	Gift     GiftsLayout      `json:"gift"`
	GiftHash string           `json:"gift_hash"` // Hash
	ID       int64            `json:"id"`        // Gift ID
	Message  string           `json:"message"`   // Comment text
	Privacy  GiftsGiftPrivacy `json:"privacy"`
}

// Gift privacy
type GiftsGiftPrivacy int64

const (
	GiftsGiftPrivacyNameAndMessageForAll           GiftsGiftPrivacy = 0
	GiftsGiftPrivacyNameForAll                     GiftsGiftPrivacy = 1
	GiftsGiftPrivacyNameAndMessageForRecipientOnly GiftsGiftPrivacy = 2
)

type GiftsLayout struct {
	ID                int64  `json:"id"`                  // Gift ID
	Thumb512          string `json:"thumb_512"`           // URL of the preview image with 512 px in width
	Thumb256          string `json:"thumb_256"`           // URL of the preview image with 256 px in width
	Thumb48           string `json:"thumb_48"`            // URL of the preview image with 48 px in width
	Thumb96           string `json:"thumb_96"`            // URL of the preview image with 96 px in width
	StickersProductID int64  `json:"stickers_product_id"` // ID of the sticker pack, if the gift is representing one
	BuildID           string `json:"build_id"`            // ID of the build of constructor gift
	Keywords          string `json:"keywords"`            // Keywords used for search
}

type GroupsAddress struct {
	AdditionalAddress string                      `json:"additional_address"` // Additional address to the place (6 floor, left door)
	Address           string                      `json:"address"`            // String address to the place (Nevsky, 28)
	CityID            int64                       `json:"city_id"`            // City id of address
	CountryID         int64                       `json:"country_id"`         // Country id of address
	Distance          int64                       `json:"distance"`           // Distance from the point
	ID                int64                       `json:"id"`                 // Address id
	Latitude          float64                     `json:"latitude"`           // Address latitude
	Longitude         float64                     `json:"longitude"`          // Address longitude
	MetroStationID    int64                       `json:"metro_station_id"`   // Metro id of address
	Phone             string                      `json:"phone"`              // Address phone
	TimeOffset        int64                       `json:"time_offset"`        // Time offset int minutes from utc time
	Timetable         GroupsAddressTimetable      `json:"timetable"`          // Week timetable for the address
	Title             string                      `json:"title"`              // Title of the place (Zinger, etc)
	WorkInfoStatus    GroupsAddressWorkInfoStatus `json:"work_info_status"`   // Status of information about timetable
}

// Timetable for a week
type GroupsAddressTimetable struct {
	Fri GroupsAddressTimetableDay `json:"fri"` // Timetable for friday
	Mon GroupsAddressTimetableDay `json:"mon"` // Timetable for monday
	Sat GroupsAddressTimetableDay `json:"sat"` // Timetable for saturday
	Sun GroupsAddressTimetableDay `json:"sun"` // Timetable for sunday
	Thu GroupsAddressTimetableDay `json:"thu"` // Timetable for thursday
	Tue GroupsAddressTimetableDay `json:"tue"` // Timetable for tuesday
	Wed GroupsAddressTimetableDay `json:"wed"` // Timetable for wednesday
}

// Timetable for one day
type GroupsAddressTimetableDay struct {
	BreakCloseTime int64 `json:"break_close_time"` // Close time of the break in minutes
	BreakOpenTime  int64 `json:"break_open_time"`  // Start time of the break in minutes
	CloseTime      int64 `json:"close_time"`       // Close time in minutes
	OpenTime       int64 `json:"open_time"`        // Open time in minutes
}

// Status of information about timetable
type GroupsAddressWorkInfoStatus string

const (
	GroupsAddressWorkInfoStatusNoInformation     GroupsAddressWorkInfoStatus = "no_information"
	GroupsAddressWorkInfoStatusTemporarilyClosed GroupsAddressWorkInfoStatus = "temporarily_closed"
	GroupsAddressWorkInfoStatusAlwaysOpened      GroupsAddressWorkInfoStatus = "always_opened"
	GroupsAddressWorkInfoStatusTimetable         GroupsAddressWorkInfoStatus = "timetable"
	GroupsAddressWorkInfoStatusForeverClosed     GroupsAddressWorkInfoStatus = "forever_closed"
)

type GroupsAddressesInfo struct {
	IsEnabled     bool  `json:"is_enabled"`      // Information whether addresses is enabled
	MainAddressID int64 `json:"main_address_id"` // Main address id for group
}

type GroupsBanInfo struct {
	AdminID        int64               `json:"admin_id"`        // Administrator ID
	Comment        string              `json:"comment"`         // Comment for a ban
	CommentVisible bool                `json:"comment_visible"` // Show comment for user
	IsClosed       bool                `json:"is_closed"`
	Date           int64               `json:"date"`     // Date when user has been added to blacklist in Unixtime
	EndDate        int64               `json:"end_date"` // Date when user will be removed from blacklist in Unixtime
	Reason         GroupsBanInfoReason `json:"reason"`
}

// Ban reason
type GroupsBanInfoReason int64

const (
	GroupsBanInfoReasonOther          GroupsBanInfoReason = 0
	GroupsBanInfoReasonSpam           GroupsBanInfoReason = 1
	GroupsBanInfoReasonVerbalAbuse    GroupsBanInfoReason = 2
	GroupsBanInfoReasonStrongLanguage GroupsBanInfoReason = 3
	GroupsBanInfoReasonFlood          GroupsBanInfoReason = 4
)

type GroupsBannedItem GroupsOwnerXtrBanInfo

type GroupsCallbackServer struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	CreatorID int64  `json:"creator_id"`
	URL       string `json:"url"`
	SecretKey string `json:"secret_key"`
	Status    string `json:"status"`
}

type GroupsCallbackSettings struct {
	ApiVersion string               `json:"api_version"` // API version used for the events
	Events     GroupsLongPollEvents `json:"events"`
}

type GroupsContactsItem struct {
	Desc   string `json:"desc"`    // Contact description
	Email  string `json:"email"`   // Contact email
	Phone  string `json:"phone"`   // Contact phone
	UserID int64  `json:"user_id"` // User ID
}

type GroupsCountersGroup struct {
	Addresses      int64 `json:"addresses"`       // Addresses number
	Albums         int64 `json:"albums"`          // Photo albums number
	Audios         int64 `json:"audios"`          // Audios number
	AudioPlaylists int64 `json:"audio_playlists"` // Audio playlists number
	Docs           int64 `json:"docs"`            // Docs number
	Market         int64 `json:"market"`          // Market items number
	Photos         int64 `json:"photos"`          // Photos number
	Topics         int64 `json:"topics"`          // Topics number
	Videos         int64 `json:"videos"`          // Videos number
}

type GroupsCover struct {
	Enabled BaseBoolInt `json:"enabled"` // Information whether cover is enabled
	Images  []BaseImage `json:"images"`
}

type GroupsFields string

const (
	GroupsFieldsMarket              GroupsFields = "market"
	GroupsFieldsMemberStatus        GroupsFields = "member_status"
	GroupsFieldsIsFavorite          GroupsFields = "is_favorite"
	GroupsFieldsIsSubscribed        GroupsFields = "is_subscribed"
	GroupsFieldsCity                GroupsFields = "city"
	GroupsFieldsCountry             GroupsFields = "country"
	GroupsFieldsVerified            GroupsFields = "verified"
	GroupsFieldsDescription         GroupsFields = "description"
	GroupsFieldsWikiPage            GroupsFields = "wiki_page"
	GroupsFieldsMembersCount        GroupsFields = "members_count"
	GroupsFieldsCounters            GroupsFields = "counters"
	GroupsFieldsCover               GroupsFields = "cover"
	GroupsFieldsCanPost             GroupsFields = "can_post"
	GroupsFieldsCanSeeAllPosts      GroupsFields = "can_see_all_posts"
	GroupsFieldsActivity            GroupsFields = "activity"
	GroupsFieldsFixedPost           GroupsFields = "fixed_post"
	GroupsFieldsCanCreateTopic      GroupsFields = "can_create_topic"
	GroupsFieldsCanUploadVideo      GroupsFields = "can_upload_video"
	GroupsFieldsHasPhoto            GroupsFields = "has_photo"
	GroupsFieldsStatus              GroupsFields = "status"
	GroupsFieldsMainAlbumID         GroupsFields = "main_album_id"
	GroupsFieldsLinks               GroupsFields = "links"
	GroupsFieldsContacts            GroupsFields = "contacts"
	GroupsFieldsSite                GroupsFields = "site"
	GroupsFieldsMainSection         GroupsFields = "main_section"
	GroupsFieldsTrending            GroupsFields = "trending"
	GroupsFieldsCanMessage          GroupsFields = "can_message"
	GroupsFieldsIsMarketCartEnabled GroupsFields = "is_market_cart_enabled"
	GroupsFieldsIsMessagesBlocked   GroupsFields = "is_messages_blocked"
	GroupsFieldsCanSendNotify       GroupsFields = "can_send_notify"
	GroupsFieldsOnlineStatus        GroupsFields = "online_status"
	GroupsFieldsStartDate           GroupsFields = "start_date"
	GroupsFieldsFinishDate          GroupsFields = "finish_date"
	GroupsFieldsAgeLimits           GroupsFields = "age_limits"
	GroupsFieldsBanInfo             GroupsFields = "ban_info"
	GroupsFieldsActionButton        GroupsFields = "action_button"
	GroupsFieldsAuthorID            GroupsFields = "author_id"
	GroupsFieldsPhone               GroupsFields = "phone"
	GroupsFieldsHasMarketApp        GroupsFields = "has_market_app"
	GroupsFieldsAddresses           GroupsFields = "addresses"
	GroupsFieldsLiveCovers          GroupsFields = "live_covers"
	GroupsFieldsIsAdult             GroupsFields = "is_adult"
	GroupsFieldsCanSubscribePosts   GroupsFields = "can_subscribe_posts"
	GroupsFieldsWarningNotification GroupsFields = "warning_notification"
	GroupsFieldsMsgPushAllowed      GroupsFields = "msg_push_allowed"
	GroupsFieldsStoriesArchiveCount GroupsFields = "stories_archive_count"
	GroupsFieldsVideoLiveLevel      GroupsFields = "video_live_level"
	GroupsFieldsVideoLiveCount      GroupsFields = "video_live_count"
	GroupsFieldsClipsCount          GroupsFields = "clips_count"
)

type GroupsFilter string

const (
	GroupsFilterAdmin        GroupsFilter = "admin"
	GroupsFilterEditor       GroupsFilter = "editor"
	GroupsFilterModer        GroupsFilter = "moder"
	GroupsFilterAdvertiser   GroupsFilter = "advertiser"
	GroupsFilterGroups       GroupsFilter = "groups"
	GroupsFilterPublics      GroupsFilter = "publics"
	GroupsFilterEvents       GroupsFilter = "events"
	GroupsFilterHasAddresses GroupsFilter = "has_addresses"
)

type GroupsGroup struct {
	AdminLevel   GroupsGroupAdminLevel `json:"admin_level"`
	Deactivated  string                `json:"deactivated"`   // Information whether community is banned
	FinishDate   int64                 `json:"finish_date"`   // Finish date in Unixtime format
	ID           int64                 `json:"id"`            // Community ID
	IsAdmin      BaseBoolInt           `json:"is_admin"`      // Information whether current user is administrator
	IsAdvertiser BaseBoolInt           `json:"is_advertiser"` // Information whether current user is advertiser
	IsClosed     GroupsGroupIsClosed   `json:"is_closed"`
	IsMember     BaseBoolInt           `json:"is_member"`   // Information whether current user is member
	Name         string                `json:"name"`        // Community name
	Photo100     string                `json:"photo_100"`   // URL of square photo of the community with 100 pixels in width
	Photo200     string                `json:"photo_200"`   // URL of square photo of the community with 200 pixels in width
	Photo50      string                `json:"photo_50"`    // URL of square photo of the community with 50 pixels in width
	ScreenName   string                `json:"screen_name"` // Domain of the community page
	StartDate    int64                 `json:"start_date"`  // Start date in Unixtime format
	Type         GroupsGroupType       `json:"type"`
}

type GroupsGroupAccess int64

const (
	GroupsGroupAccessOpen    GroupsGroupAccess = 0
	GroupsGroupAccessClosed  GroupsGroupAccess = 1
	GroupsGroupAccessPrivate GroupsGroupAccess = 2
)

// Level of current user's credentials as manager
type GroupsGroupAdminLevel int64

const (
	GroupsGroupAdminLevelModerator     GroupsGroupAdminLevel = 1
	GroupsGroupAdminLevelEditor        GroupsGroupAdminLevel = 2
	GroupsGroupAdminLevelAdministrator GroupsGroupAdminLevel = 3
)

type GroupsGroupAgeLimits int64

const (
	GroupsGroupAgeLimitsUnlimited GroupsGroupAgeLimits = 1
	GroupsGroupAgeLimits16Plus    GroupsGroupAgeLimits = 2
	GroupsGroupAgeLimits18Plus    GroupsGroupAgeLimits = 3
)

type GroupsGroupAttach struct {
	ID         int64  `json:"id"`          // group ID
	Text       string `json:"text"`        // text of attach
	Status     string `json:"status"`      // activity or category of group
	Size       int64  `json:"size"`        // size of group
	IsFavorite bool   `json:"is_favorite"` // is favorite
}

type GroupsGroupAudio int64

const (
	GroupsGroupAudioDisabled GroupsGroupAudio = 0
	GroupsGroupAudioOpen     GroupsGroupAudio = 1
	GroupsGroupAudioLimited  GroupsGroupAudio = 2
)

type GroupsGroupBanInfo struct {
	Comment string              `json:"comment"`  // Ban comment
	EndDate int64               `json:"end_date"` // End date of ban in Unixtime
	Reason  GroupsBanInfoReason `json:"reason"`
}

type GroupsGroupCategory struct {
	ID            int64                `json:"id"`   // Category ID
	Name          string               `json:"name"` // Category name
	Subcategories []BaseObjectWithName `json:"subcategories"`
}

type GroupsGroupCategoryFull struct {
	ID            int64                 `json:"id"`         // Category ID
	Name          string                `json:"name"`       // Category name
	PageCount     int64                 `json:"page_count"` // Pages number
	PagePreviews  []GroupsGroup         `json:"page_previews"`
	Subcategories []GroupsGroupCategory `json:"subcategories"`
}

type GroupsGroupCategoryType struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

type GroupsGroupDocs int64

const (
	GroupsGroupDocsDisabled GroupsGroupDocs = 0
	GroupsGroupDocsOpen     GroupsGroupDocs = 1
	GroupsGroupDocsLimited  GroupsGroupDocs = 2
)

// allof groups_group_full
type GroupsGroupFull struct {
	*GroupsGroup         `json:"groups_group,omitempty"`
	Market               *GroupsMarketInfo            `json:"market,omitempty"`
	MemberStatus         *GroupsGroupFullMemberStatus `json:"member_status,omitempty"`
	IsAdult              *BaseBoolInt                 `json:"is_adult,omitempty"`
	IsHiddenFromFeed     *BaseBoolInt                 `json:"is_hidden_from_feed,omitempty"`
	IsFavorite           *BaseBoolInt                 `json:"is_favorite,omitempty"`
	IsSubscribed         *BaseBoolInt                 `json:"is_subscribed,omitempty"`
	City                 *BaseObject                  `json:"city,omitempty"`
	Country              *BaseCountry                 `json:"country,omitempty"`
	Verified             *BaseBoolInt                 `json:"verified,omitempty"`
	Description          *string                      `json:"description,omitempty"`
	WikiPage             *string                      `json:"wiki_page,omitempty"`
	MembersCount         *int64                       `json:"members_count,omitempty"`
	VideoLiveLevel       *int64                       `json:"video_live_level,omitempty"`
	VideoLiveCount       *int64                       `json:"video_live_count,omitempty"`
	Counters             *GroupsCountersGroup         `json:"counters,omitempty"`
	Cover                *GroupsCover                 `json:"cover,omitempty"`
	CanPost              *BaseBoolInt                 `json:"can_post,omitempty"`
	CanSeeAllPosts       *BaseBoolInt                 `json:"can_see_all_posts,omitempty"`
	Activity             *string                      `json:"activity,omitempty"`
	FixedPost            *int64                       `json:"fixed_post,omitempty"`
	CanCreateTopic       *BaseBoolInt                 `json:"can_create_topic,omitempty"`
	CanUploadDoc         *BaseBoolInt                 `json:"can_upload_doc,omitempty"`
	CanUploadStory       *BaseBoolInt                 `json:"can_upload_story,omitempty"`
	CanUploadVideo       *BaseBoolInt                 `json:"can_upload_video,omitempty"`
	HasPhoto             *BaseBoolInt                 `json:"has_photo,omitempty"`
	CropPhoto            *BaseCropPhoto               `json:"crop_photo,omitempty"`
	Status               *string                      `json:"status,omitempty"`
	MainAlbumID          *int64                       `json:"main_album_id,omitempty"`
	Links                *[]GroupsLinksItem           `json:"links,omitempty"`
	Contacts             *[]GroupsContactsItem        `json:"contacts,omitempty"`
	Wall                 *int64                       `json:"wall,omitempty"`
	Site                 *string                      `json:"site,omitempty"`
	MainSection          *GroupsGroupFullMainSection  `json:"main_section,omitempty"`
	Trending             *BaseBoolInt                 `json:"trending,omitempty"`
	CanMessage           *BaseBoolInt                 `json:"can_message,omitempty"`
	IsMessagesBlocked    *BaseBoolInt                 `json:"is_messages_blocked,omitempty"`
	CanSendNotify        *BaseBoolInt                 `json:"can_send_notify,omitempty"`
	OnlineStatus         *GroupsOnlineStatus          `json:"online_status,omitempty"`
	AgeLimits            *GroupsGroupFullAgeLimits    `json:"age_limits,omitempty"`
	BanInfo              *GroupsGroupBanInfo          `json:"ban_info,omitempty"`
	HasMarketApp         *bool                        `json:"has_market_app,omitempty"`
	Addresses            *GroupsAddressesInfo         `json:"addresses,omitempty"`
	IsSubscribedPodcasts *bool                        `json:"is_subscribed_podcasts,omitempty"`
	CanSubscribePodcasts *bool                        `json:"can_subscribe_podcasts,omitempty"`
	CanSubscribePosts    *bool                        `json:"can_subscribe_posts,omitempty"`
	LiveCovers           *GroupsLiveCovers            `json:"live_covers,omitempty"`
}

type GroupsGroupFullAgeLimits int64

const (
	GroupsGroupFullAgeLimitsNo     GroupsGroupFullAgeLimits = 1
	GroupsGroupFullAgeLimitsOver16 GroupsGroupFullAgeLimits = 2
	GroupsGroupFullAgeLimitsOver18 GroupsGroupFullAgeLimits = 3
)

// Main section of community
type GroupsGroupFullMainSection int64

const (
	GroupsGroupFullMainSectionAbsent GroupsGroupFullMainSection = 0
	GroupsGroupFullMainSectionPhotos GroupsGroupFullMainSection = 1
	GroupsGroupFullMainSectionTopics GroupsGroupFullMainSection = 2
	GroupsGroupFullMainSectionAudio  GroupsGroupFullMainSection = 3
	GroupsGroupFullMainSectionVideo  GroupsGroupFullMainSection = 4
	GroupsGroupFullMainSectionMarket GroupsGroupFullMainSection = 5
)

type GroupsGroupFullMemberStatus int64

const (
	GroupsGroupFullMemberStatusNotAMember      GroupsGroupFullMemberStatus = 0
	GroupsGroupFullMemberStatusMember          GroupsGroupFullMemberStatus = 1
	GroupsGroupFullMemberStatusNotSure         GroupsGroupFullMemberStatus = 2
	GroupsGroupFullMemberStatusDeclined        GroupsGroupFullMemberStatus = 3
	GroupsGroupFullMemberStatusHasSentARequest GroupsGroupFullMemberStatus = 4
	GroupsGroupFullMemberStatusInvited         GroupsGroupFullMemberStatus = 5
)

// Information whether community is closed
type GroupsGroupIsClosed int64

const (
	GroupsGroupIsClosedOpen    GroupsGroupIsClosed = 0
	GroupsGroupIsClosedClosed  GroupsGroupIsClosed = 1
	GroupsGroupIsClosedPrivate GroupsGroupIsClosed = 2
)

type GroupsGroupLink struct {
	Name            string      `json:"name"`             // Link label
	Desc            string      `json:"desc"`             // Link description
	EditTitle       BaseBoolInt `json:"edit_title"`       // Information whether the title can be edited
	ID              int64       `json:"id"`               // Link ID
	ImageProcessing BaseBoolInt `json:"image_processing"` // Information whether the image on processing
	URL             string      `json:"url"`              // Link URL
}

type GroupsGroupMarketCurrency int64

const (
	GroupsGroupMarketCurrencyRussianRubles    GroupsGroupMarketCurrency = 643
	GroupsGroupMarketCurrencyUkrainianHryvnia GroupsGroupMarketCurrency = 980
	GroupsGroupMarketCurrencyKazakhTenge      GroupsGroupMarketCurrency = 398
	GroupsGroupMarketCurrencyEuro             GroupsGroupMarketCurrency = 978
	GroupsGroupMarketCurrencyUsDollars        GroupsGroupMarketCurrency = 840
)

type GroupsGroupPhotos int64

const (
	GroupsGroupPhotosDisabled GroupsGroupPhotos = 0
	GroupsGroupPhotosOpen     GroupsGroupPhotos = 1
	GroupsGroupPhotosLimited  GroupsGroupPhotos = 2
)

type GroupsGroupPublicCategoryList struct {
	ID            int64                     `json:"id"`
	Name          string                    `json:"name"`
	Subcategories []GroupsGroupCategoryType `json:"subcategories"`
}

type GroupsGroupRole string

const (
	GroupsGroupRoleModerator     GroupsGroupRole = "moderator"
	GroupsGroupRoleEditor        GroupsGroupRole = "editor"
	GroupsGroupRoleAdministrator GroupsGroupRole = "administrator"
	GroupsGroupRoleAdvertiser    GroupsGroupRole = "advertiser"
)

type GroupsGroupSubject string

const (
	GroupsGroupSubjectAuto                      GroupsGroupSubject = "1"
	GroupsGroupSubjectActivityHolidays          GroupsGroupSubject = "2"
	GroupsGroupSubjectBusiness                  GroupsGroupSubject = "3"
	GroupsGroupSubjectPets                      GroupsGroupSubject = "4"
	GroupsGroupSubjectHealth                    GroupsGroupSubject = "5"
	GroupsGroupSubjectDatingAndCommunication    GroupsGroupSubject = "6"
	GroupsGroupSubjectGames                     GroupsGroupSubject = "7"
	GroupsGroupSubjectIt                        GroupsGroupSubject = "8"
	GroupsGroupSubjectCinema                    GroupsGroupSubject = "9"
	GroupsGroupSubjectBeautyAndFashion          GroupsGroupSubject = "10"
	GroupsGroupSubjectCooking                   GroupsGroupSubject = "11"
	GroupsGroupSubjectArtAndCulture             GroupsGroupSubject = "12"
	GroupsGroupSubjectLiterature                GroupsGroupSubject = "13"
	GroupsGroupSubjectMobileServicesAndInternet GroupsGroupSubject = "14"
	GroupsGroupSubjectMusic                     GroupsGroupSubject = "15"
	GroupsGroupSubjectScienceAndTechnology      GroupsGroupSubject = "16"
	GroupsGroupSubjectRealEstate                GroupsGroupSubject = "17"
	GroupsGroupSubjectNewsAndMedia              GroupsGroupSubject = "18"
	GroupsGroupSubjectSecurity                  GroupsGroupSubject = "19"
	GroupsGroupSubjectEducation                 GroupsGroupSubject = "20"
	GroupsGroupSubjectHomeAndRenovations        GroupsGroupSubject = "21"
	GroupsGroupSubjectPolitics                  GroupsGroupSubject = "22"
	GroupsGroupSubjectFood                      GroupsGroupSubject = "23"
	GroupsGroupSubjectIndustry                  GroupsGroupSubject = "24"
	GroupsGroupSubjectTravel                    GroupsGroupSubject = "25"
	GroupsGroupSubjectWork                      GroupsGroupSubject = "26"
	GroupsGroupSubjectEntertainment             GroupsGroupSubject = "27"
	GroupsGroupSubjectReligion                  GroupsGroupSubject = "28"
	GroupsGroupSubjectFamily                    GroupsGroupSubject = "29"
	GroupsGroupSubjectSports                    GroupsGroupSubject = "30"
	GroupsGroupSubjectInsurance                 GroupsGroupSubject = "31"
	GroupsGroupSubjectTelevision                GroupsGroupSubject = "32"
	GroupsGroupSubjectGoodsAndServices          GroupsGroupSubject = "33"
	GroupsGroupSubjectHobbies                   GroupsGroupSubject = "34"
	GroupsGroupSubjectFinance                   GroupsGroupSubject = "35"
	GroupsGroupSubjectPhoto                     GroupsGroupSubject = "36"
	GroupsGroupSubjectEsoterics                 GroupsGroupSubject = "37"
	GroupsGroupSubjectElectronicsAndAppliances  GroupsGroupSubject = "38"
	GroupsGroupSubjectErotic                    GroupsGroupSubject = "39"
	GroupsGroupSubjectHumor                     GroupsGroupSubject = "40"
	GroupsGroupSubjectSocietyHumanities         GroupsGroupSubject = "41"
	GroupsGroupSubjectDesignAndGraphics         GroupsGroupSubject = "42"
)

type GroupsGroupTopics int64

const (
	GroupsGroupTopicsDisabled GroupsGroupTopics = 0
	GroupsGroupTopicsOpen     GroupsGroupTopics = 1
	GroupsGroupTopicsLimited  GroupsGroupTopics = 2
)

// Community type
type GroupsGroupType string

const (
	GroupsGroupTypeGroup GroupsGroupType = "group"
	GroupsGroupTypePage  GroupsGroupType = "page"
	GroupsGroupTypeEvent GroupsGroupType = "event"
)

type GroupsGroupVideo int64

const (
	GroupsGroupVideoDisabled GroupsGroupVideo = 0
	GroupsGroupVideoOpen     GroupsGroupVideo = 1
	GroupsGroupVideoLimited  GroupsGroupVideo = 2
)

type GroupsGroupWall int64

const (
	GroupsGroupWallDisabled GroupsGroupWall = 0
	GroupsGroupWallOpen     GroupsGroupWall = 1
	GroupsGroupWallLimited  GroupsGroupWall = 2
	GroupsGroupWallClosed   GroupsGroupWall = 3
)

type GroupsGroupWiki int64

const (
	GroupsGroupWikiDisabled GroupsGroupWiki = 0
	GroupsGroupWikiOpen     GroupsGroupWiki = 1
	GroupsGroupWikiLimited  GroupsGroupWiki = 2
)

type GroupsGroupXtrInvitedBy struct {
	AdminLevel   GroupsGroupXtrInvitedByAdminLevel `json:"admin_level"`
	ID           int64                             `json:"id"`            // Community ID
	InvitedBy    int64                             `json:"invited_by"`    // Inviter ID
	IsAdmin      BaseBoolInt                       `json:"is_admin"`      // Information whether current user is manager
	IsAdvertiser BaseBoolInt                       `json:"is_advertiser"` // Information whether current user is advertiser
	IsClosed     BaseBoolInt                       `json:"is_closed"`     // Information whether community is closed
	IsMember     BaseBoolInt                       `json:"is_member"`     // Information whether current user is member
	Name         string                            `json:"name"`          // Community name
	Photo100     string                            `json:"photo_100"`     // URL of square photo of the community with 100 pixels in width
	Photo200     string                            `json:"photo_200"`     // URL of square photo of the community with 200 pixels in width
	Photo50      string                            `json:"photo_50"`      // URL of square photo of the community with 50 pixels in width
	ScreenName   string                            `json:"screen_name"`   // Domain of the community page
	Type         GroupsGroupXtrInvitedByType       `json:"type"`
}

// Level of current user's credentials as manager
type GroupsGroupXtrInvitedByAdminLevel int64

const (
	GroupsGroupXtrInvitedByAdminLevelModerator     GroupsGroupXtrInvitedByAdminLevel = 1
	GroupsGroupXtrInvitedByAdminLevelEditor        GroupsGroupXtrInvitedByAdminLevel = 2
	GroupsGroupXtrInvitedByAdminLevelAdministrator GroupsGroupXtrInvitedByAdminLevel = 3
)

// Community type
type GroupsGroupXtrInvitedByType string

const (
	GroupsGroupXtrInvitedByTypeGroup GroupsGroupXtrInvitedByType = "group"
	GroupsGroupXtrInvitedByTypePage  GroupsGroupXtrInvitedByType = "page"
	GroupsGroupXtrInvitedByTypeEvent GroupsGroupXtrInvitedByType = "event"
)

type GroupsGroupsArray struct {
	Count int64   `json:"count"` // Communities number
	Items []int64 `json:"items"`
}

type GroupsLinksItem struct {
	Desc      string      `json:"desc"`       // Link description
	EditTitle BaseBoolInt `json:"edit_title"` // Information whether the link title can be edited
	ID        int64       `json:"id"`         // Link ID
	Name      string      `json:"name"`       // Link title
	Photo100  string      `json:"photo_100"`  // URL of square image of the link with 100 pixels in width
	Photo50   string      `json:"photo_50"`   // URL of square image of the link with 50 pixels in width
	URL       string      `json:"url"`        // Link URL
}

type GroupsLiveCovers struct {
	IsEnabled  bool     `json:"is_enabled"`  // Information whether live covers is enabled
	IsScalable bool     `json:"is_scalable"` // Information whether live covers photo scaling is enabled
	StoryIDs   []string `json:"story_ids"`
}

type GroupsLongPollEvents struct {
	AudioNew             BaseBoolInt `json:"audio_new"`
	BoardPostDelete      BaseBoolInt `json:"board_post_delete"`
	BoardPostEdit        BaseBoolInt `json:"board_post_edit"`
	BoardPostNew         BaseBoolInt `json:"board_post_new"`
	BoardPostRestore     BaseBoolInt `json:"board_post_restore"`
	GroupChangePhoto     BaseBoolInt `json:"group_change_photo"`
	GroupChangeSettings  BaseBoolInt `json:"group_change_settings"`
	GroupJoin            BaseBoolInt `json:"group_join"`
	GroupLeave           BaseBoolInt `json:"group_leave"`
	GroupOfficersEdit    BaseBoolInt `json:"group_officers_edit"`
	LeadFormsNew         BaseBoolInt `json:"lead_forms_new"`
	MarketCommentDelete  BaseBoolInt `json:"market_comment_delete"`
	MarketCommentEdit    BaseBoolInt `json:"market_comment_edit"`
	MarketCommentNew     BaseBoolInt `json:"market_comment_new"`
	MarketCommentRestore BaseBoolInt `json:"market_comment_restore"`
	MessageAllow         BaseBoolInt `json:"message_allow"`
	MessageDeny          BaseBoolInt `json:"message_deny"`
	MessageNew           BaseBoolInt `json:"message_new"`
	MessageRead          BaseBoolInt `json:"message_read"`
	MessageReply         BaseBoolInt `json:"message_reply"`
	MessageTypingState   BaseBoolInt `json:"message_typing_state"`
	MessageEdit          BaseBoolInt `json:"message_edit"`
	PhotoCommentDelete   BaseBoolInt `json:"photo_comment_delete"`
	PhotoCommentEdit     BaseBoolInt `json:"photo_comment_edit"`
	PhotoCommentNew      BaseBoolInt `json:"photo_comment_new"`
	PhotoCommentRestore  BaseBoolInt `json:"photo_comment_restore"`
	PhotoNew             BaseBoolInt `json:"photo_new"`
	PollVoteNew          BaseBoolInt `json:"poll_vote_new"`
	UserBlock            BaseBoolInt `json:"user_block"`
	UserUnblock          BaseBoolInt `json:"user_unblock"`
	VideoCommentDelete   BaseBoolInt `json:"video_comment_delete"`
	VideoCommentEdit     BaseBoolInt `json:"video_comment_edit"`
	VideoCommentNew      BaseBoolInt `json:"video_comment_new"`
	VideoCommentRestore  BaseBoolInt `json:"video_comment_restore"`
	VideoNew             BaseBoolInt `json:"video_new"`
	WallPostNew          BaseBoolInt `json:"wall_post_new"`
	WallReplyDelete      BaseBoolInt `json:"wall_reply_delete"`
	WallReplyEdit        BaseBoolInt `json:"wall_reply_edit"`
	WallReplyNew         BaseBoolInt `json:"wall_reply_new"`
	WallReplyRestore     BaseBoolInt `json:"wall_reply_restore"`
	WallRepost           BaseBoolInt `json:"wall_repost"`
}

type GroupsLongPollServer struct {
	Key    string `json:"key"`    // Long Poll key
	Server string `json:"server"` // Long Poll server address
	Ts     string `json:"ts"`     // Number of the last event
}

type GroupsLongPollSettings struct {
	ApiVersion string               `json:"api_version"` // API version used for the events
	Events     GroupsLongPollEvents `json:"events"`
	IsEnabled  bool                 `json:"is_enabled"` // Shows whether Long Poll is enabled
}

type GroupsMarketInfo struct {
	ContactID    int64          `json:"contact_id"` // Contact person ID
	Currency     MarketCurrency `json:"currency"`
	CurrencyText string         `json:"currency_text"` // Currency name
	Enabled      BaseBoolInt    `json:"enabled"`       // Information whether the market is enabled
	MainAlbumID  int64          `json:"main_album_id"` // Main market album ID
	PriceMax     string         `json:"price_max"`     // Maximum price
	PriceMin     string         `json:"price_min"`     // Minimum price
}

type GroupsMemberRole struct {
	ID          int64                        `json:"id"` // User ID
	Permissions []GroupsMemberRolePermission `json:"permissions"`
	Role        GroupsMemberRoleStatus       `json:"role"`
}

type GroupsMemberRolePermission string

const (
	GroupsMemberRolePermissionAds GroupsMemberRolePermission = "ads"
)

// User's credentials as community admin
type GroupsMemberRoleStatus string

const (
	GroupsMemberRoleStatusModerator     GroupsMemberRoleStatus = "moderator"
	GroupsMemberRoleStatusEditor        GroupsMemberRoleStatus = "editor"
	GroupsMemberRoleStatusAdministrator GroupsMemberRoleStatus = "administrator"
	GroupsMemberRoleStatusCreator       GroupsMemberRoleStatus = "creator"
)

type GroupsMemberStatus struct {
	Member BaseBoolInt `json:"member"`  // Information whether user is a member of the group
	UserID int64       `json:"user_id"` // User ID
}

type GroupsMemberStatusFull struct {
	CanInvite  BaseBoolInt `json:"can_invite"` // Information whether user can be invited
	CanRecall  BaseBoolInt `json:"can_recall"` // Information whether user's invite to the group can be recalled
	Invitation BaseBoolInt `json:"invitation"` // Information whether user has been invited to the group
	Member     BaseBoolInt `json:"member"`     // Information whether user is a member of the group
	Request    BaseBoolInt `json:"request"`    // Information whether user has send request to the group
	UserID     int64       `json:"user_id"`    // User ID
}

// Online status of group
type GroupsOnlineStatus struct {
	Minutes int64                  `json:"minutes"` // Estimated time of answer (for status = answer_mark)
	Status  GroupsOnlineStatusType `json:"status"`
}

// Type of online status of group
type GroupsOnlineStatusType string

const (
	GroupsOnlineStatusTypeNone       GroupsOnlineStatusType = "none"
	GroupsOnlineStatusTypeOnline     GroupsOnlineStatusType = "online"
	GroupsOnlineStatusTypeAnswerMark GroupsOnlineStatusType = "answer_mark"
)

type GroupsOwnerXtrBanInfo struct {
	BanInfo GroupsBanInfo             `json:"ban_info"`
	Group   GroupsGroup               `json:"group"`   // Information about group if type = group
	Profile UsersUser                 `json:"profile"` // Information about group if type = profile
	Type    GroupsOwnerXtrBanInfoType `json:"type"`
}

// Owner type
type GroupsOwnerXtrBanInfoType string

const (
	GroupsOwnerXtrBanInfoTypeGroup   GroupsOwnerXtrBanInfoType = "group"
	GroupsOwnerXtrBanInfoTypeProfile GroupsOwnerXtrBanInfoType = "profile"
)

// User's credentials as community admin
type GroupsRoleOptions string

const (
	GroupsRoleOptionsModerator     GroupsRoleOptions = "moderator"
	GroupsRoleOptionsEditor        GroupsRoleOptions = "editor"
	GroupsRoleOptionsAdministrator GroupsRoleOptions = "administrator"
	GroupsRoleOptionsCreator       GroupsRoleOptions = "creator"
)

type GroupsSettingsTwitter struct {
	Status string `json:"status"`
	Name   string `json:"name"`
}

type GroupsSubjectItem struct {
	ID   int64  `json:"id"`   // Subject ID
	Name string `json:"name"` // Subject title
}

type GroupsTokenPermissionSetting struct {
	Name    string `json:"name"`
	Setting int64  `json:"setting"`
}

// allof groups_user_xtr_role
type GroupsUserXtrRole struct {
	*UsersUserFull `json:"users_user_full,omitempty"`
	Role           *GroupsRoleOptions `json:"role,omitempty"`
}

type LeadsChecked struct {
	Reason    string             `json:"reason"` // Reason why user can't start the lead
	Result    LeadsCheckedResult `json:"result"`
	Sid       string             `json:"sid"`        // Session ID
	StartLink string             `json:"start_link"` // URL user should open to start the lead
}

// Information whether user can start the lead
type LeadsCheckedResult string

const (
	LeadsCheckedResultTrue  LeadsCheckedResult = "true"
	LeadsCheckedResultFalse LeadsCheckedResult = "false"
)

type LeadsComplete struct {
	Cost     int64       `json:"cost"`  // Offer cost
	Limit    int64       `json:"limit"` // Offer limit
	Spent    int64       `json:"spent"` // Amount of spent votes
	Success  int64       `json:"success"`
	TestMode BaseBoolInt `json:"test_mode"` // Information whether test mode is enabled
}

type LeadsEntry struct {
	Aid       int64       `json:"aid"`        // Application ID
	Comment   string      `json:"comment"`    // Comment text
	Date      int64       `json:"date"`       // Date when the action has been started in Unixtime
	Sid       string      `json:"sid"`        // Session string ID
	StartDate int64       `json:"start_date"` // Start date in Unixtime (for status=2)
	Status    int64       `json:"status"`     // Action type
	TestMode  BaseBoolInt `json:"test_mode"`  // Information whether test mode is enabled
	Uid       int64       `json:"uid"`        // User ID
}

type LeadsLead struct {
	Completed   int64         `json:"completed"` // Completed offers number
	Cost        int64         `json:"cost"`      // Offer cost
	Days        LeadsLeadDays `json:"days"`
	Impressions int64         `json:"impressions"` // Impressions number
	Limit       int64         `json:"limit"`       // Lead limit
	Spent       int64         `json:"spent"`       // Amount of spent votes
	Started     int64         `json:"started"`     // Started offers number
}

type LeadsLeadDays struct {
	Completed   int64 `json:"completed"`   // Completed offers number
	Impressions int64 `json:"impressions"` // Impressions number
	Spent       int64 `json:"spent"`       // Amount of spent votes
	Started     int64 `json:"started"`     // Started offers number
}

type LeadsStart struct {
	TestMode BaseBoolInt `json:"test_mode"` // Information whether test mode is enabled
	VKSid    string      `json:"vk_sid"`    // Session data
}

type LikesType string

const (
	LikesTypePost          LikesType = "post"
	LikesTypeComment       LikesType = "comment"
	LikesTypePhoto         LikesType = "photo"
	LikesTypeAudio         LikesType = "audio"
	LikesTypeVideo         LikesType = "video"
	LikesTypeNote          LikesType = "note"
	LikesTypeMarket        LikesType = "market"
	LikesTypePhotoComment  LikesType = "photo_comment"
	LikesTypeVideoComment  LikesType = "video_comment"
	LikesTypeTopicComment  LikesType = "topic_comment"
	LikesTypeMarketComment LikesType = "market_comment"
	LikesTypeSitepage      LikesType = "sitepage"
)

type LinkTargetObject struct {
	Type    string `json:"type"`     // Object type
	OwnerID int64  `json:"owner_id"` // Owner ID
	ItemID  int64  `json:"item_id"`  // Item ID
}

type MarketCurrency struct {
	ID   int64  `json:"id"`   // Currency ID
	Name string `json:"name"` // Currency sign
}

type MarketMarketAlbum struct {
	Count       int64       `json:"count"`    // Items number
	ID          int64       `json:"id"`       // Market album ID
	OwnerID     int64       `json:"owner_id"` // Market album owner's ID
	Photo       PhotosPhoto `json:"photo"`
	Title       string      `json:"title"`        // Market album title
	UpdatedTime int64       `json:"updated_time"` // Date when album has been updated last time in Unixtime
}

type MarketMarketCategory struct {
	ID      int64         `json:"id"`   // Category ID
	Name    string        `json:"name"` // Category name
	Section MarketSection `json:"section"`
}

type MarketMarketItem struct {
	AccessKey          string                       `json:"access_key"` // Access key for the market item
	Availability       MarketMarketItemAvailability `json:"availability"`
	ButtonTitle        string                       `json:"button_title"` // Title for button for url
	Category           MarketMarketCategory         `json:"category"`
	Date               int64                        `json:"date"`        // Date when the item has been created in Unixtime
	Description        string                       `json:"description"` // Item description
	ExternalID         string                       `json:"external_id"`
	ID                 int64                        `json:"id"` // Item ID
	IsFavorite         bool                         `json:"is_favorite"`
	OwnerID            int64                        `json:"owner_id"` // Item owner's ID
	Price              MarketPrice                  `json:"price"`
	ThumbPhoto         string                       `json:"thumb_photo"` // URL of the preview image
	Title              string                       `json:"title"`       // Item title
	URL                string                       `json:"url"`         // URL to item
	VariantsGroupingID int64                        `json:"variants_grouping_id"`
	IsMainVariant      bool                         `json:"is_main_variant"`
}

// Information whether the item is available
type MarketMarketItemAvailability int64

const (
	MarketMarketItemAvailabilityAvailable   MarketMarketItemAvailability = 0
	MarketMarketItemAvailabilityRemoved     MarketMarketItemAvailability = 1
	MarketMarketItemAvailabilityUnavailable MarketMarketItemAvailability = 2
)

// allof market_market_item_full
type MarketMarketItemFull struct {
	*MarketMarketItem `json:"market_market_item,omitempty"`
	AlbumsIDs         *[]int64         `json:"albums_ids,omitempty"`
	Photos            *[]PhotosPhoto   `json:"photos,omitempty"`
	CanComment        *BaseBoolInt     `json:"can_comment,omitempty"`
	CanRepost         *BaseBoolInt     `json:"can_repost,omitempty"`
	Likes             *BaseLikes       `json:"likes,omitempty"`
	Reposts           *BaseRepostsInfo `json:"reposts,omitempty"`
	ViewsCount        *int64           `json:"views_count,omitempty"`
}

type MarketPrice struct {
	Amount       string         `json:"amount"` // Amount
	Currency     MarketCurrency `json:"currency"`
	DiscountRate int64          `json:"discount_rate"`
	OldAmount    string         `json:"old_amount"`
	Text         string         `json:"text"` // Text
}

type MarketSection struct {
	ID   int64  `json:"id"`   // Section ID
	Name string `json:"name"` // Section name
}

// Media restrictions
type MediaRestriction struct {
	Text        string                 `json:"text"`
	Title       string                 `json:"title"`
	Button      VideoRestrictionButton `json:"button"`
	AlwaysShown BaseBoolInt            `json:"always_shown"` // Need show restriction always or not
	Blur        BaseBoolInt            `json:"blur"`         // Need blur current video or not
	CanPlay     BaseBoolInt            `json:"can_play"`     // Can play video or not
	CanPreview  BaseBoolInt            `json:"can_preview"`  // Can preview video or not
	CardIcon    []BaseImage            `json:"card_icon"`
	ListIcon    []BaseImage            `json:"list_icon"`
}

type MessageChatPreview struct {
	AdminID      int64   `json:"admin_id"`
	Joined       bool    `json:"joined"`
	LocalID      int64   `json:"local_id"`
	Members      []int64 `json:"members"`
	MembersCount int64   `json:"members_count"`
	Title        string  `json:"title"`
}

type MessagesAudioMessage struct {
	AccessKey string  `json:"access_key"` // Access key for audio message
	Duration  int64   `json:"duration"`   // Audio message duration in seconds
	ID        int64   `json:"id"`         // Audio message ID
	LinkMp3   string  `json:"link_mp3"`   // MP3 file URL
	LinkOgg   string  `json:"link_ogg"`   // OGG file URL
	OwnerID   int64   `json:"owner_id"`   // Audio message owner ID
	Waveform  []int64 `json:"waveform"`
}

type MessagesChat struct {
	AdminID        int64                    `json:"admin_id"`  // Chat creator ID
	ID             int64                    `json:"id"`        // Chat ID
	Kicked         BaseBoolInt              `json:"kicked"`    // Shows that user has been kicked from the chat
	Left           BaseBoolInt              `json:"left"`      // Shows that user has been left the chat
	Photo100       string                   `json:"photo_100"` // URL of the preview image with 100 px in width
	Photo200       string                   `json:"photo_200"` // URL of the preview image with 200 px in width
	Photo50        string                   `json:"photo_50"`  // URL of the preview image with 50 px in width
	PushSettings   MessagesChatPushSettings `json:"push_settings"`
	Title          string                   `json:"title"` // Chat title
	Type           string                   `json:"type"`  // Chat type
	Users          []int64                  `json:"users"`
	IsDefaultPhoto bool                     `json:"is_default_photo"` // If provided photo is default
}

type MessagesChatFull struct {
	AdminID      int64                      `json:"admin_id"`  // Chat creator ID
	ID           int64                      `json:"id"`        // Chat ID
	Kicked       BaseBoolInt                `json:"kicked"`    // Shows that user has been kicked from the chat
	Left         BaseBoolInt                `json:"left"`      // Shows that user has been left the chat
	Photo100     string                     `json:"photo_100"` // URL of the preview image with 100 px in width
	Photo200     string                     `json:"photo_200"` // URL of the preview image with 200 px in width
	Photo50      string                     `json:"photo_50"`  // URL of the preview image with 50 px in width
	PushSettings MessagesChatPushSettings   `json:"push_settings"`
	Title        string                     `json:"title"` // Chat title
	Type         string                     `json:"type"`  // Chat type
	Users        []MessagesUserXtrInvitedBy `json:"users"`
}

type MessagesChatPushSettings struct {
	DisabledUntil int64       `json:"disabled_until"` // Time until that notifications are disabled
	Sound         BaseBoolInt `json:"sound"`          // Information whether the sound is on
}

type MessagesChatRestrictions struct {
	AdminsPromoteUsers bool `json:"admins_promote_users"`  // Only admins can promote users to admins
	OnlyAdminsEditInfo bool `json:"only_admins_edit_info"` // Only admins can change chat info
	OnlyAdminsEditPin  bool `json:"only_admins_edit_pin"`  // Only admins can edit pinned message
	OnlyAdminsInvite   bool `json:"only_admins_invite"`    // Only admins can invite users to this chat
	OnlyAdminsKick     bool `json:"only_admins_kick"`      // Only admins can kick users from this chat
}

type MessagesConversation struct {
	Peer               MessagesConversationPeer   `json:"peer"`
	LastMessageID      int64                      `json:"last_message_id"`  // ID of the last message in conversation
	InRead             int64                      `json:"in_read"`          // Last message user have read
	OutRead            int64                      `json:"out_read"`         // Last outcoming message have been read by the opponent
	UnreadCount        int64                      `json:"unread_count"`     // Unread messages number
	IsMarkedUnread     bool                       `json:"is_marked_unread"` // Is this conversation uread
	Important          bool                       `json:"important"`
	Unanswered         bool                       `json:"unanswered"`
	SpecialServiceType string                     `json:"special_service_type"`
	MessageRequestData MessagesMessageRequestData `json:"message_request_data"`
	Mentions           []int64                    `json:"mentions"` // Ids of messages with mentions
	CurrentKeyboard    MessagesKeyboard           `json:"current_keyboard"`
}

type MessagesConversationMember struct {
	CanKick          bool  `json:"can_kick"` // Is it possible for user to kick this member
	InvitedBy        int64 `json:"invited_by"`
	IsAdmin          bool  `json:"is_admin"`
	IsOwner          bool  `json:"is_owner"`
	IsMessageRequest bool  `json:"is_message_request"`
	JoinDate         int64 `json:"join_date"`
	RequestDate      int64 `json:"request_date"` // Message request date
	MemberID         int64 `json:"member_id"`
}

type MessagesConversationPeer struct {
	ID      int64                        `json:"id"`
	LocalID int64                        `json:"local_id"`
	Type    MessagesConversationPeerType `json:"type"`
}

// Peer type
type MessagesConversationPeerType string

const (
	MessagesConversationPeerTypeChat  MessagesConversationPeerType = "chat"
	MessagesConversationPeerTypeEmail MessagesConversationPeerType = "email"
	MessagesConversationPeerTypeUser  MessagesConversationPeerType = "user"
	MessagesConversationPeerTypeGroup MessagesConversationPeerType = "group"
)

type MessagesConversationWithMessage struct {
	Conversation MessagesConversation `json:"conversation"`
	LastMessage  MessagesMessage      `json:"last_message"`
}

type MessagesForeignMessage struct {
	Attachments           []MessagesMessageAttachment `json:"attachments"`
	ConversationMessageID int64                       `json:"conversation_message_id"` // Conversation message ID
	Date                  int64                       `json:"date"`                    // Date when the message was created
	FromID                int64                       `json:"from_id"`                 // Message author's ID
	FwdMessages           []MessagesForeignMessage    `json:"fwd_messages"`
	Geo                   BaseGeo                     `json:"geo"`
	ID                    int64                       `json:"id"`      // Message ID
	PeerID                int64                       `json:"peer_id"` // Peer ID
	ReplyMessage          *MessagesForeignMessage     `json:"reply_message"`
	Text                  string                      `json:"text"`         // Message text
	UpdateTime            int64                       `json:"update_time"`  // Date when the message has been updated in Unixtime
	WasListened           bool                        `json:"was_listened"` // Was the audio message inside already listened by you
	Payload               string                      `json:"payload"`      // Additional data sent along with message for developer convenience
}

type MessagesGraffiti struct {
	AccessKey string `json:"access_key"` // Access key for graffiti
	Height    int64  `json:"height"`     // Graffiti height
	ID        int64  `json:"id"`         // Graffiti ID
	OwnerID   int64  `json:"owner_id"`   // Graffiti owner ID
	URL       string `json:"url"`        // Graffiti URL
	Width     int64  `json:"width"`      // Graffiti width
}

type MessagesHistoryAttachment struct {
	Attachment MessagesHistoryMessageAttachment `json:"attachment"`
	MessageID  int64                            `json:"message_id"` // Message ID
	FromID     int64                            `json:"from_id"`    // Message author's ID
}

type MessagesHistoryMessageAttachment struct {
	Audio        AudioAudio                           `json:"audio"`
	AudioMessage MessagesAudioMessage                 `json:"audio_message"`
	Doc          DocsDoc                              `json:"doc"`
	Graffiti     MessagesGraffiti                     `json:"graffiti"`
	Link         BaseLink                             `json:"link"`
	Market       BaseLink                             `json:"market"`
	Photo        PhotosPhoto                          `json:"photo"`
	Share        BaseLink                             `json:"share"`
	Type         MessagesHistoryMessageAttachmentType `json:"type"`
	Video        VideoVideo                           `json:"video"`
	Wall         BaseLink                             `json:"wall"`
}

// Attachments type
type MessagesHistoryMessageAttachmentType string

const (
	MessagesHistoryMessageAttachmentTypePhoto        MessagesHistoryMessageAttachmentType = "photo"
	MessagesHistoryMessageAttachmentTypeVideo        MessagesHistoryMessageAttachmentType = "video"
	MessagesHistoryMessageAttachmentTypeAudio        MessagesHistoryMessageAttachmentType = "audio"
	MessagesHistoryMessageAttachmentTypeDoc          MessagesHistoryMessageAttachmentType = "doc"
	MessagesHistoryMessageAttachmentTypeLink         MessagesHistoryMessageAttachmentType = "link"
	MessagesHistoryMessageAttachmentTypeMarket       MessagesHistoryMessageAttachmentType = "market"
	MessagesHistoryMessageAttachmentTypeWall         MessagesHistoryMessageAttachmentType = "wall"
	MessagesHistoryMessageAttachmentTypeShare        MessagesHistoryMessageAttachmentType = "share"
	MessagesHistoryMessageAttachmentTypeGraffiti     MessagesHistoryMessageAttachmentType = "graffiti"
	MessagesHistoryMessageAttachmentTypeAudioMessage MessagesHistoryMessageAttachmentType = "audio_message"
)

type MessagesKeyboard struct {
	AuthorID int64                      `json:"author_id"` // Community or bot, which set this keyboard
	Buttons  [][]MessagesKeyboardButton `json:"buttons"`
	OneTime  bool                       `json:"one_time"` // Should this keyboard disappear on first use
	Inline   bool                       `json:"inline"`
}

type MessagesKeyboardButton struct {
	Action MessagesKeyboardButtonAction `json:"action"`
	Color  string                       `json:"color"` // Button color
}

// Description of the action, that should be performed on button click
type MessagesKeyboardButtonAction struct {
	AppID   int64                           `json:"app_id"`   // Fragment value in app link like vk.com/app{app_id}_-654321#hash
	Hash    string                          `json:"hash"`     // Fragment value in app link like vk.com/app123456_-654321#{hash}
	Label   string                          `json:"label"`    // Label for button
	Link    string                          `json:"link"`     // link for button
	OwnerID int64                           `json:"owner_id"` // Fragment value in app link like vk.com/app123456_{owner_id}#hash
	Payload string                          `json:"payload"`  // Additional data sent along with message for developer convenience
	Type    MessagesTemplateActionTypeNames `json:"type"`     // Button type
}

type MessagesLastActivity struct {
	Online BaseBoolInt `json:"online"` // Information whether user is online
	Time   int64       `json:"time"`   // Time when user was online in Unixtime
}

type MessagesLongpollMessages struct {
	Count int64             `json:"count"` // Total number
	Items []MessagesMessage `json:"items"`
}

type MessagesLongpollParams struct {
	Key    string `json:"key"`    // Key
	Pts    int64  `json:"pts"`    // Persistent timestamp
	Server string `json:"server"` // Server URL
	Ts     string `json:"ts"`     // Timestamp
}

type MessagesMessage struct {
	Action                MessagesMessageAction       `json:"action"`
	AdminAuthorID         int64                       `json:"admin_author_id"` // Only for messages from community. Contains user ID of community admin, who sent this message.
	Attachments           []MessagesMessageAttachment `json:"attachments"`
	ConversationMessageID int64                       `json:"conversation_message_id"` // Unique auto-incremented number for all messages with this peer
	Date                  int64                       `json:"date"`                    // Date when the message has been sent in Unixtime
	Deleted               BaseBoolInt                 `json:"deleted"`                 // Is it an deleted message
	FromID                int64                       `json:"from_id"`                 // Message author's ID
	FwdMessages           []MessagesForeignMessage    `json:"fwd_messages"`            // Forwarded messages
	Geo                   BaseGeo                     `json:"geo"`
	ID                    int64                       `json:"id"`        // Message ID
	Important             bool                        `json:"important"` // Is it an important message
	IsHidden              bool                        `json:"is_hidden"`
	IsCropped             bool                        `json:"is_cropped"` // this message is cropped for bot
	Keyboard              MessagesKeyboard            `json:"keyboard"`
	MembersCount          int64                       `json:"members_count"` // Members number
	Out                   BaseBoolInt                 `json:"out"`           // Information whether the message is outcoming
	Payload               string                      `json:"payload"`
	PeerID                int64                       `json:"peer_id"`   // Peer ID
	RandomID              int64                       `json:"random_id"` // ID used for sending messages. It returned only for outgoing messages
	Ref                   string                      `json:"ref"`
	RefSource             string                      `json:"ref_source"`
	ReplyMessage          MessagesForeignMessage      `json:"reply_message"`
	Text                  string                      `json:"text"`         // Message text
	UpdateTime            int64                       `json:"update_time"`  // Date when the message has been updated in Unixtime
	WasListened           bool                        `json:"was_listened"` // Was the audio message inside already listened by you
	PinnedAt              int64                       `json:"pinned_at"`    // Date when the message has been pinned in Unixtime
}

type MessagesMessageAction struct {
	ConversationMessageID int64                       `json:"conversation_message_id"` // Message ID
	Email                 string                      `json:"email"`                   // Email address for chat_invite_user or chat_kick_user actions
	MemberID              int64                       `json:"member_id"`               // User or email peer ID
	Message               string                      `json:"message"`                 // Message body of related message
	Photo                 MessagesMessageActionPhoto  `json:"photo"`
	Text                  string                      `json:"text"` // New chat title for chat_create and chat_title_update actions
	Type                  MessagesMessageActionStatus `json:"type"`
}

type MessagesMessageActionPhoto struct {
	Photo100 string `json:"photo_100"` // URL of the preview image with 100px in width
	Photo200 string `json:"photo_200"` // URL of the preview image with 200px in width
	Photo50  string `json:"photo_50"`  // URL of the preview image with 50px in width
}

// Action status
type MessagesMessageActionStatus string

const (
	MessagesMessageActionStatusChatPhotoUpdate      MessagesMessageActionStatus = "chat_photo_update"
	MessagesMessageActionStatusChatPhotoRemove      MessagesMessageActionStatus = "chat_photo_remove"
	MessagesMessageActionStatusChatCreate           MessagesMessageActionStatus = "chat_create"
	MessagesMessageActionStatusChatTitleUpdate      MessagesMessageActionStatus = "chat_title_update"
	MessagesMessageActionStatusChatInviteUser       MessagesMessageActionStatus = "chat_invite_user"
	MessagesMessageActionStatusChatKickUser         MessagesMessageActionStatus = "chat_kick_user"
	MessagesMessageActionStatusChatPinMessage       MessagesMessageActionStatus = "chat_pin_message"
	MessagesMessageActionStatusChatUnpinMessage     MessagesMessageActionStatus = "chat_unpin_message"
	MessagesMessageActionStatusChatInviteUserByLink MessagesMessageActionStatus = "chat_invite_user_by_link"
)

type MessagesMessageAttachment struct {
	Audio             AudioAudio                    `json:"audio"`
	AudioMessage      MessagesAudioMessage          `json:"audio_message"`
	Doc               DocsDoc                       `json:"doc"`
	Gift              GiftsLayout                   `json:"gift"`
	Graffiti          MessagesGraffiti              `json:"graffiti"`
	Link              BaseLink                      `json:"link"`
	Market            MarketMarketItem              `json:"market"`
	MarketMarketAlbum MarketMarketAlbum             `json:"market_market_album"`
	Photo             PhotosPhoto                   `json:"photo"`
	Sticker           BaseSticker                   `json:"sticker"`
	Story             StoriesStory                  `json:"story"`
	Type              MessagesMessageAttachmentType `json:"type"`
	Video             VideoVideo                    `json:"video"`
	Wall              WallWallpostFull              `json:"wall"`
	WallReply         WallWallComment               `json:"wall_reply"`
}

// Attachment type
type MessagesMessageAttachmentType string

const (
	MessagesMessageAttachmentTypePhoto        MessagesMessageAttachmentType = "photo"
	MessagesMessageAttachmentTypeAudio        MessagesMessageAttachmentType = "audio"
	MessagesMessageAttachmentTypeVideo        MessagesMessageAttachmentType = "video"
	MessagesMessageAttachmentTypeDoc          MessagesMessageAttachmentType = "doc"
	MessagesMessageAttachmentTypeLink         MessagesMessageAttachmentType = "link"
	MessagesMessageAttachmentTypeMarket       MessagesMessageAttachmentType = "market"
	MessagesMessageAttachmentTypeMarketAlbum  MessagesMessageAttachmentType = "market_album"
	MessagesMessageAttachmentTypeGift         MessagesMessageAttachmentType = "gift"
	MessagesMessageAttachmentTypeSticker      MessagesMessageAttachmentType = "sticker"
	MessagesMessageAttachmentTypeWall         MessagesMessageAttachmentType = "wall"
	MessagesMessageAttachmentTypeWallReply    MessagesMessageAttachmentType = "wall_reply"
	MessagesMessageAttachmentTypeArticle      MessagesMessageAttachmentType = "article"
	MessagesMessageAttachmentTypeGraffiti     MessagesMessageAttachmentType = "graffiti"
	MessagesMessageAttachmentTypeAudioMessage MessagesMessageAttachmentType = "audio_message"
)

type MessagesMessageRequestData struct {
	Status      string `json:"status"`       // Status of message request
	InviterID   int64  `json:"inviter_id"`   // Message request sender id
	RequestDate int64  `json:"request_date"` // Message request date
}

type MessagesPinnedMessage struct {
	Attachments           []MessagesMessageAttachment `json:"attachments"`
	ConversationMessageID int64                       `json:"conversation_message_id"` // Unique auto-incremented number for all messages with this peer
	Date                  int64                       `json:"date"`                    // Date when the message has been sent in Unixtime
	FromID                int64                       `json:"from_id"`                 // Message author's ID
	FwdMessages           []MessagesForeignMessage    `json:"fwd_messages"`            // Forwarded messages
	Geo                   BaseGeo                     `json:"geo"`
	ID                    int64                       `json:"id"`      // Message ID
	PeerID                int64                       `json:"peer_id"` // Peer ID
	ReplyMessage          MessagesForeignMessage      `json:"reply_message"`
	Text                  string                      `json:"text"` // Message text
	Keyboard              MessagesKeyboard            `json:"keyboard"`
}

// Template action type names
type MessagesTemplateActionTypeNames string

const (
	MessagesTemplateActionTypeNamesText      MessagesTemplateActionTypeNames = "text"
	MessagesTemplateActionTypeNamesStart     MessagesTemplateActionTypeNames = "start"
	MessagesTemplateActionTypeNamesLocation  MessagesTemplateActionTypeNames = "location"
	MessagesTemplateActionTypeNamesVKpay     MessagesTemplateActionTypeNames = "vkpay"
	MessagesTemplateActionTypeNamesOpenApp   MessagesTemplateActionTypeNames = "open_app"
	MessagesTemplateActionTypeNamesOpenPhoto MessagesTemplateActionTypeNames = "open_photo"
	MessagesTemplateActionTypeNamesOpenLink  MessagesTemplateActionTypeNames = "open_link"
)

// allof messages_user_xtr_invited_by
type MessagesUserXtrInvitedBy struct {
	*UsersUserXtrType `json:"users_user_xtr_type,omitempty"`
	InvitedBy         *int64 `json:"invited_by,omitempty"`
}

type NewsfeedCommentsFilters string

const (
	NewsfeedCommentsFiltersPost  NewsfeedCommentsFilters = "post"
	NewsfeedCommentsFiltersPhoto NewsfeedCommentsFilters = "photo"
	NewsfeedCommentsFiltersVideo NewsfeedCommentsFilters = "video"
	NewsfeedCommentsFiltersTopic NewsfeedCommentsFilters = "topic"
	NewsfeedCommentsFiltersNote  NewsfeedCommentsFilters = "note"
)

type NewsfeedEventActivity struct {
	Address      string                      `json:"address"`       // address of event
	ButtonText   string                      `json:"button_text"`   // text of attach
	Friends      []int64                     `json:"friends"`       // array of friends ids
	MemberStatus GroupsGroupFullMemberStatus `json:"member_status"` // Current user's member status
	Text         string                      `json:"text"`          // text of attach
	Time         int64                       `json:"time"`          // event start time
}

type NewsfeedFilters string

const (
	NewsfeedFiltersPost              NewsfeedFilters = "post"
	NewsfeedFiltersPhoto             NewsfeedFilters = "photo"
	NewsfeedFiltersPhotoTag          NewsfeedFilters = "photo_tag"
	NewsfeedFiltersWallPhoto         NewsfeedFilters = "wall_photo"
	NewsfeedFiltersFriend            NewsfeedFilters = "friend"
	NewsfeedFiltersRecommendedGroups NewsfeedFilters = "recommended_groups"
	NewsfeedFiltersNote              NewsfeedFilters = "note"
	NewsfeedFiltersAudio             NewsfeedFilters = "audio"
	NewsfeedFiltersVideo             NewsfeedFilters = "video"
	NewsfeedFiltersAudioPlaylist     NewsfeedFilters = "audio_playlist"
	NewsfeedFiltersClip              NewsfeedFilters = "clip"
)

type NewsfeedIgnoreItemType string

const (
	NewsfeedIgnoreItemTypePostOnTheWall NewsfeedIgnoreItemType = "wall"
	NewsfeedIgnoreItemTypeTagOnAPhoto   NewsfeedIgnoreItemType = "tag"
	NewsfeedIgnoreItemTypeProfilePhoto  NewsfeedIgnoreItemType = "profilephoto"
	NewsfeedIgnoreItemTypeVideo         NewsfeedIgnoreItemType = "video"
	NewsfeedIgnoreItemTypePhoto         NewsfeedIgnoreItemType = "photo"
	NewsfeedIgnoreItemTypeAudio         NewsfeedIgnoreItemType = "audio"
)

// allof newsfeed_item_audio
type NewsfeedItemAudio struct {
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Audio             *NewsfeedItemAudioAudio `json:"audio,omitempty"`
	PostID            *int64                  `json:"post_id,omitempty"`
}

type NewsfeedItemAudioAudio struct {
	Count int64        `json:"count"` // Audios number
	Items []AudioAudio `json:"items"`
}

type NewsfeedItemBase struct {
	Type     NewsfeedNewsfeedItemType `json:"type"`
	SourceID int64                    `json:"source_id"` // Item source ID
	Date     int64                    `json:"date"`      // Date when item has been added in Unixtime
}

// allof newsfeed_item_digest
type NewsfeedItemDigest struct {
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	ButtonText        *string         `json:"button_text,omitempty"`
	FeedID            *string         `json:"feed_id,omitempty"`
	Items             *[]WallWallpost `json:"items,omitempty"`
	MainPostIDs       *[]string       `json:"main_post_ids,omitempty"`
	Template          *string         `json:"template,omitempty"`
	Title             *string         `json:"title,omitempty"`
	TrackCode         *string         `json:"track_code,omitempty"`
}

// allof newsfeed_item_friend
type NewsfeedItemFriend struct {
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Friends           *NewsfeedItemFriendFriends `json:"friends,omitempty"`
}

type NewsfeedItemFriendFriends struct {
	Count int64        `json:"count"` // Number of friends has been added
	Items []BaseUserID `json:"items"`
}

type NewsfeedItemHolidayRecommendationsBlockHeader struct {
	Title    string               `json:"title"`    // Title of the header
	Subtitle string               `json:"subtitle"` // Subtitle of the header
	Image    []BaseImage          `json:"image"`
	Action   BaseLinkButtonAction `json:"action"`
}

// allof newsfeed_item_note
type NewsfeedItemNote struct {
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Notes             *NewsfeedItemNoteNotes `json:"notes,omitempty"`
}

type NewsfeedItemNoteNotes struct {
	Count int64                  `json:"count"` // Notes number
	Items []NewsfeedNewsfeedNote `json:"items"`
}

// allof newsfeed_item_photo
type NewsfeedItemPhoto struct {
	*WallCarouselBase `json:"wall_carousel_base,omitempty"`
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Photos            *NewsfeedItemPhotoPhotos `json:"photos,omitempty"`
	PostID            *int64                   `json:"post_id,omitempty"`
}

type NewsfeedItemPhotoPhotos struct {
	Count int64                   `json:"count"` // Photos number
	Items []NewsfeedNewsfeedPhoto `json:"items"`
}

// allof newsfeed_item_photo_tag
type NewsfeedItemPhotoTag struct {
	*WallCarouselBase `json:"wall_carousel_base,omitempty"`
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	PhotoTags         *NewsfeedItemPhotoTagPhotoTags `json:"photo_tags,omitempty"`
	PostID            *int64                         `json:"post_id,omitempty"`
}

type NewsfeedItemPhotoTagPhotoTags struct {
	Count int64                   `json:"count"` // Tags number
	Items []NewsfeedNewsfeedPhoto `json:"items"`
}

// allof newsfeed_item_promo_button
type NewsfeedItemPromoButton struct {
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Text              *string                         `json:"text,omitempty"`
	Title             *string                         `json:"title,omitempty"`
	Action            *NewsfeedItemPromoButtonAction  `json:"action,omitempty"`
	Images            *[]NewsfeedItemPromoButtonImage `json:"images,omitempty"`
	TrackCode         *string                         `json:"track_code,omitempty"`
}

type NewsfeedItemPromoButtonAction struct {
	URL    string `json:"url"`
	Type   string `json:"type"`
	Target string `json:"target"`
}

type NewsfeedItemPromoButtonImage struct {
	Width  int64  `json:"width"`
	Height int64  `json:"height"`
	URL    string `json:"url"`
}

// allof newsfeed_item_topic
type NewsfeedItemTopic struct {
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Comments          *BaseCommentsInfo `json:"comments,omitempty"`
	Likes             *BaseLikesInfo    `json:"likes,omitempty"`
	PostID            *int64            `json:"post_id,omitempty"`
	Text              *string           `json:"text,omitempty"`
}

// allof newsfeed_item_video
type NewsfeedItemVideo struct {
	*WallCarouselBase `json:"wall_carousel_base,omitempty"`
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Video             *NewsfeedItemVideoVideo `json:"video,omitempty"`
}

type NewsfeedItemVideoVideo struct {
	Count int64        `json:"count"` // Tags number
	Items []VideoVideo `json:"items"`
}

// allof newsfeed_item_wallpost
type NewsfeedItemWallpost struct {
	*WallCarouselBase `json:"wall_carousel_base,omitempty"`
	*NewsfeedItemBase `json:"newsfeed_item_base,omitempty"`
	Activity          *NewsfeedEventActivity        `json:"activity,omitempty"`
	Attachments       *[]WallWallpostAttachment     `json:"attachments,omitempty"`
	Comments          *BaseCommentsInfo             `json:"comments,omitempty"`
	CopyHistory       *[]WallWallpost               `json:"copy_history,omitempty"`
	Feedback          *NewsfeedItemWallpostFeedback `json:"feedback,omitempty"`
	Geo               *BaseGeo                      `json:"geo,omitempty"`
	IsFavorite        *bool                         `json:"is_favorite,omitempty"`
	Likes             *BaseLikesInfo                `json:"likes,omitempty"`
	MarkedAsAds       *BaseBoolInt                  `json:"marked_as_ads,omitempty"`
	PostID            *int64                        `json:"post_id,omitempty"`
	PostSource        *WallPostSource               `json:"post_source,omitempty"`
	PostType          *NewsfeedItemWallpostType     `json:"post_type,omitempty"`
	Reposts           *BaseRepostsInfo              `json:"reposts,omitempty"`
	SignerID          *int64                        `json:"signer_id,omitempty"`
	Text              *string                       `json:"text,omitempty"`
	Views             *WallViews                    `json:"views,omitempty"`
	ShortTextRate     *float64                      `json:"short_text_rate,omitempty"`
}

type NewsfeedItemWallpostFeedback struct {
	Type       NewsfeedItemWallpostFeedbackType     `json:"type"`
	Question   string                               `json:"question"`
	Answers    []NewsfeedItemWallpostFeedbackAnswer `json:"answers"`
	StarsCount int64                                `json:"stars_count"`
	Gratitude  string                               `json:"gratitude"`
}

type NewsfeedItemWallpostFeedbackAnswer struct {
	Title string `json:"title"`
	ID    string `json:"id"`
}

type NewsfeedItemWallpostFeedbackType string

const (
	NewsfeedItemWallpostFeedbackTypeButtons NewsfeedItemWallpostFeedbackType = "buttons"
	NewsfeedItemWallpostFeedbackTypeStars   NewsfeedItemWallpostFeedbackType = "stars"
)

// Post type
type NewsfeedItemWallpostType string

const (
	NewsfeedItemWallpostTypePost  NewsfeedItemWallpostType = "post"
	NewsfeedItemWallpostTypeCopy  NewsfeedItemWallpostType = "copy"
	NewsfeedItemWallpostTypeReply NewsfeedItemWallpostType = "reply"
)

type NewsfeedList struct {
	ID    int64  `json:"id"`    // List ID
	Title string `json:"title"` // List title
}

// allof newsfeed_list_full
type NewsfeedListFull struct {
	*NewsfeedList `json:"newsfeed_list,omitempty"`
	NoReposts     *BaseBoolInt `json:"no_reposts,omitempty"`
	SourceIDs     *[]int64     `json:"source_ids,omitempty"`
}

// oneof newsfeed_newsfeed_item
type NewsfeedNewsfeedItem struct {
	*NewsfeedItemWallpost    `json:"newsfeed_item_wallpost,omitempty"`
	*NewsfeedItemPhoto       `json:"newsfeed_item_photo,omitempty"`
	*NewsfeedItemPhotoTag    `json:"newsfeed_item_photo_tag,omitempty"`
	*NewsfeedItemFriend      `json:"newsfeed_item_friend,omitempty"`
	*NewsfeedItemNote        `json:"newsfeed_item_note,omitempty"`
	*NewsfeedItemAudio       `json:"newsfeed_item_audio,omitempty"`
	*NewsfeedItemVideo       `json:"newsfeed_item_video,omitempty"`
	*NewsfeedItemTopic       `json:"newsfeed_item_topic,omitempty"`
	*NewsfeedItemDigest      `json:"newsfeed_item_digest,omitempty"`
	*NewsfeedItemPromoButton `json:"newsfeed_item_promo_button,omitempty"`
}

// Item type
type NewsfeedNewsfeedItemType string

const (
	NewsfeedNewsfeedItemTypePost            NewsfeedNewsfeedItemType = "post"
	NewsfeedNewsfeedItemTypePhoto           NewsfeedNewsfeedItemType = "photo"
	NewsfeedNewsfeedItemTypePhotoTag        NewsfeedNewsfeedItemType = "photo_tag"
	NewsfeedNewsfeedItemTypeWallPhoto       NewsfeedNewsfeedItemType = "wall_photo"
	NewsfeedNewsfeedItemTypeFriend          NewsfeedNewsfeedItemType = "friend"
	NewsfeedNewsfeedItemTypeNote            NewsfeedNewsfeedItemType = "note"
	NewsfeedNewsfeedItemTypeAudio           NewsfeedNewsfeedItemType = "audio"
	NewsfeedNewsfeedItemTypeVideo           NewsfeedNewsfeedItemType = "video"
	NewsfeedNewsfeedItemTypeTopic           NewsfeedNewsfeedItemType = "topic"
	NewsfeedNewsfeedItemTypeDigest          NewsfeedNewsfeedItemType = "digest"
	NewsfeedNewsfeedItemTypeStories         NewsfeedNewsfeedItemType = "stories"
	NewsfeedNewsfeedItemTypeTagsSuggestions NewsfeedNewsfeedItemType = "tags_suggestions"
)

type NewsfeedNewsfeedNote struct {
	Comments int64  `json:"comments"` // Comments Number
	ID       int64  `json:"id"`       // Note ID
	OwnerID  int64  `json:"owner_id"` // integer
	Title    string `json:"title"`    // Note title
}

// allof newsfeed_newsfeed_photo
type NewsfeedNewsfeedPhoto struct {
	*PhotosPhoto `json:"photos_photo,omitempty"`
	Likes        *BaseLikes       `json:"likes,omitempty"`
	Comments     *BaseObjectCount `json:"comments,omitempty"`
	CanRepost    *BaseBoolInt     `json:"can_repost,omitempty"`
}

type NotesNote struct {
	ReadComments int64       `json:"read_comments"`
	CanComment   BaseBoolInt `json:"can_comment"` // Information whether current user can comment the note
	Comments     int64       `json:"comments"`    // Comments number
	Date         int64       `json:"date"`        // Date when the note has been created in Unixtime
	ID           int64       `json:"id"`          // Note ID
	OwnerID      int64       `json:"owner_id"`    // Note owner's ID
	Text         string      `json:"text"`        // Note text
	TextWiki     string      `json:"text_wiki"`   // Note text in wiki format
	Title        string      `json:"title"`       // Note title
	ViewURL      string      `json:"view_url"`    // URL of the page with note preview
}

type NotesNoteComment struct {
	Date    int64  `json:"date"`     // Date when the comment has beed added in Unixtime
	ID      int64  `json:"id"`       // Comment ID
	Message string `json:"message"`  // Comment text
	Nid     int64  `json:"nid"`      // Note ID
	Oid     int64  `json:"oid"`      // Note ID
	ReplyTo int64  `json:"reply_to"` // ID of replied comment
	Uid     int64  `json:"uid"`      // Comment author's ID
}

type NotificationsFeedback struct {
	Attachments []WallWallpostAttachment `json:"attachments"`
	FromID      int64                    `json:"from_id"` // Reply author's ID
	Geo         BaseGeo                  `json:"geo"`
	ID          int64                    `json:"id"` // Item ID
	Likes       BaseLikesInfo            `json:"likes"`
	Text        string                   `json:"text"`  // Reply text
	ToID        int64                    `json:"to_id"` // Wall owner's ID
}

type NotificationsNotification struct {
	Date     int64                           `json:"date"` // Date when the event has been occurred
	Feedback NotificationsFeedback           `json:"feedback"`
	Parent   NotificationsNotificationParent `json:"parent"`
	Reply    NotificationsReply              `json:"reply"`
	Type     string                          `json:"type"` // Notification type
}

type NotificationsNotificationItem interface{}

// allof notifications_notification_parent
type NotificationsNotificationParent struct {
	*WallWallpostToID                  `json:"wall_wallpost_to_id,omitempty"`
	*PhotosPhoto                       `json:"photos_photo,omitempty"`
	*BoardTopic                        `json:"board_topic,omitempty"`
	*VideoVideo                        `json:"video_video,omitempty"`
	*NotificationsNotificationsComment `json:"notifications_notifications_comment,omitempty"`
}

type NotificationsNotificationsComment struct {
	Date    int64        `json:"date"`     // Date when the comment has been added in Unixtime
	ID      int64        `json:"id"`       // Comment ID
	OwnerID int64        `json:"owner_id"` // Author ID
	Photo   PhotosPhoto  `json:"photo"`
	Post    WallWallpost `json:"post"`
	Text    string       `json:"text"` // Comment text
	Topic   BoardTopic   `json:"topic"`
	Video   VideoVideo   `json:"video"`
}

type NotificationsReply struct {
	Date int64 `json:"date"` // Date when the reply has been created in Unixtime
	ID   int64 `json:"id"`   // Reply ID
	Text int64 `json:"text"` // Reply text
}

type NotificationsSendMessageError struct {
	Code        int64  `json:"code"`        // Error code
	Description string `json:"description"` // Error description
}

type NotificationsSendMessageItem struct {
	UserID int64                         `json:"user_id"` // User ID
	Status bool                          `json:"status"`  // Notification status
	Error  NotificationsSendMessageError `json:"error"`
}

type OauthError struct {
	Error            string `json:"error"`             // Error type
	ErrorDescription string `json:"error_description"` // Error description
	RedirectUri      string `json:"redirect_uri"`      // URI for validation
}

type OrdersAmount struct {
	Amounts  []OrdersAmountItem `json:"amounts"`
	Currency string             `json:"currency"` // Currency name
}

type OrdersAmountItem struct {
	Amount      int64  `json:"amount"`      // Votes amount in user's currency
	Description string `json:"description"` // Amount description
	Votes       string `json:"votes"`       // Votes number
}

type OrdersOrder struct {
	Amount              int64  `json:"amount"`                // Amount
	AppOrderID          int64  `json:"app_order_id"`          // App order ID
	CancelTransactionID int64  `json:"cancel_transaction_id"` // Cancel transaction ID
	Date                int64  `json:"date"`                  // Date of creation in Unixtime
	ID                  int64  `json:"id"`                    // Order ID
	Item                string `json:"item"`                  // Order item
	ReceiverID          int64  `json:"receiver_id"`           // Receiver ID
	Status              string `json:"status"`                // Order status
	TransactionID       int64  `json:"transaction_id"`        // Transaction ID
	UserID              int64  `json:"user_id"`               // User ID
}

type OrdersSubscription struct {
	CancelReason    string `json:"cancel_reason"`     // Cancel reason
	CreateTime      int64  `json:"create_time"`       // Date of creation in Unixtime
	ID              int64  `json:"id"`                // Subscription ID
	ItemID          string `json:"item_id"`           // Subscription order item
	NextBillTime    int64  `json:"next_bill_time"`    // Date of next bill in Unixtime
	PendingCancel   bool   `json:"pending_cancel"`    // Pending cancel state
	Period          int64  `json:"period"`            // Subscription period
	PeriodStartTime int64  `json:"period_start_time"` // Date of last period start in Unixtime
	Price           int64  `json:"price"`             // Subscription price
	Status          string `json:"status"`            // Subscription status
	TestMode        bool   `json:"test_mode"`         // Is test subscription
	TrialExpireTime int64  `json:"trial_expire_time"` // Date of trial expire in Unixtime
	UpdateTime      int64  `json:"update_time"`       // Date of last change in Unixtime
}

type OwnerState struct {
	State       int64  `json:"state"`
	Description string `json:"description"` // wiki text to describe user state
}

type PagesPrivacySettings int64

const (
	PagesPrivacySettingsCommunityManagersOnly PagesPrivacySettings = 0
	PagesPrivacySettingsCommunityMembersOnly  PagesPrivacySettings = 1
	PagesPrivacySettingsEveryone              PagesPrivacySettings = 2
)

type PagesWikipage struct {
	CreatorID   int64                `json:"creator_id"`   // Page creator ID
	CreatorName int64                `json:"creator_name"` // Page creator name
	EditorID    int64                `json:"editor_id"`    // Last editor ID
	EditorName  string               `json:"editor_name"`  // Last editor name
	GroupID     int64                `json:"group_id"`     // Community ID
	ID          int64                `json:"id"`           // Page ID
	Title       string               `json:"title"`        // Page title
	Views       int64                `json:"views"`        // Views number
	WhoCanEdit  PagesPrivacySettings `json:"who_can_edit"` // Edit settings of the page
	WhoCanView  PagesPrivacySettings `json:"who_can_view"` // View settings of the page
}

type PagesWikipageFull struct {
	Created                  int64                `json:"created"`                      // Date when the page has been created in Unixtime
	CreatorID                int64                `json:"creator_id"`                   // Page creator ID
	CurrentUserCanEdit       BaseBoolInt          `json:"current_user_can_edit"`        // Information whether current user can edit the page
	CurrentUserCanEditAccess BaseBoolInt          `json:"current_user_can_edit_access"` // Information whether current user can edit the page access settings
	Edited                   int64                `json:"edited"`                       // Date when the page has been edited in Unixtime
	EditorID                 int64                `json:"editor_id"`                    // Last editor ID
	GroupID                  int64                `json:"group_id"`                     // Community ID
	Html                     string               `json:"html"`                         // Page content, HTML
	ID                       int64                `json:"id"`                           // Page ID
	Source                   string               `json:"source"`                       // Page content, wiki
	Title                    string               `json:"title"`                        // Page title
	ViewURL                  string               `json:"view_url"`                     // URL of the page preview
	Views                    int64                `json:"views"`                        // Views number
	WhoCanEdit               PagesPrivacySettings `json:"who_can_edit"`                 // Edit settings of the page
	WhoCanView               PagesPrivacySettings `json:"who_can_view"`                 // View settings of the page
}

type PagesWikipageHistory struct {
	ID         int64  `json:"id"`          // Version ID
	Length     int64  `json:"length"`      // Page size in bytes
	Date       int64  `json:"date"`        // Date when the page has been edited in Unixtime
	EditorID   int64  `json:"editor_id"`   // Last editor ID
	EditorName string `json:"editor_name"` // Last editor name
}

type PhotosCommentXtrPid struct {
	Attachments    []WallCommentAttachment `json:"attachments"`
	Date           int64                   `json:"date"`    // Date when the comment has been added in Unixtime
	FromID         int64                   `json:"from_id"` // Author ID
	ID             int64                   `json:"id"`      // Comment ID
	Likes          BaseLikesInfo           `json:"likes"`
	Pid            int64                   `json:"pid"`              // Photo ID
	ReplyToComment int64                   `json:"reply_to_comment"` // Replied comment ID
	ReplyToUser    int64                   `json:"reply_to_user"`    // Replied user ID
	Text           string                  `json:"text"`             // Comment text
	ParentsStack   []int64                 `json:"parents_stack"`
	Thread         CommentThread           `json:"thread"`
}

type PhotosImage struct {
	Height int64           `json:"height"` // Height of the photo in px.
	Type   PhotosImageType `json:"type"`
	URL    string          `json:"url"`   // Photo URL.
	Width  int64           `json:"width"` // Width of the photo in px.
}

// Photo's type.
type PhotosImageType string

const (
	PhotosImageTypeS PhotosImageType = "s"
	PhotosImageTypeM PhotosImageType = "m"
	PhotosImageTypeX PhotosImageType = "x"
	PhotosImageTypeL PhotosImageType = "l"
	PhotosImageTypeO PhotosImageType = "o"
	PhotosImageTypeP PhotosImageType = "p"
	PhotosImageTypeQ PhotosImageType = "q"
	PhotosImageTypeR PhotosImageType = "r"
	PhotosImageTypeY PhotosImageType = "y"
	PhotosImageTypeZ PhotosImageType = "z"
	PhotosImageTypeW PhotosImageType = "w"
)

type PhotosMarketAlbumUploadResponse struct {
	Gid    int64  `json:"gid"`    // Community ID
	Hash   string `json:"hash"`   // Uploading hash
	Photo  string `json:"photo"`  // Uploaded photo data
	Server int64  `json:"server"` // Upload server number
}

type PhotosMarketUploadResponse struct {
	CropData string `json:"crop_data"` // Crop data
	CropHash string `json:"crop_hash"` // Crop hash
	GroupID  int64  `json:"group_id"`  // Community ID
	Hash     string `json:"hash"`      // Uploading hash
	Photo    string `json:"photo"`     // Uploaded photo data
	Server   int64  `json:"server"`    // Upload server number
}

type PhotosMessageUploadResponse struct {
	Hash   string `json:"hash"`   // Uploading hash
	Photo  string `json:"photo"`  // Uploaded photo data
	Server int64  `json:"server"` // Upload server number
}

type PhotosOwnerUploadResponse struct {
	Hash   string `json:"hash"`   // Uploading hash
	Photo  string `json:"photo"`  // Uploaded photo data
	Server int64  `json:"server"` // Upload server number
}

type PhotosPhoto struct {
	AccessKey    string             `json:"access_key"` // Access key for the photo
	AlbumID      int64              `json:"album_id"`   // Album ID
	Date         int64              `json:"date"`       // Date when uploaded
	Height       int64              `json:"height"`     // Original photo height
	ID           int64              `json:"id"`         // Photo ID
	Images       []PhotosImage      `json:"images"`
	Lat          float64            `json:"lat"`         // Latitude
	Long         float64            `json:"long"`        // Longitude
	OwnerID      int64              `json:"owner_id"`    // Photo owner's ID
	Photo256     string             `json:"photo_256"`   // URL of image with 2560 px width
	CanComment   BaseBoolInt        `json:"can_comment"` // Information whether current user can comment the photo
	Place        string             `json:"place"`
	PostID       int64              `json:"post_id"` // Post ID
	Sizes        []PhotosPhotoSizes `json:"sizes"`
	Text         string             `json:"text"`     // Photo caption
	UserID       int64              `json:"user_id"`  // ID of the user who have uploaded the photo
	Width        int64              `json:"width"`    // Original photo width
	HasTags      bool               `json:"has_tags"` // Whether photo has attached tag links
	Restrictions MediaRestriction   `json:"restrictions"`
}

type PhotosPhotoAlbum struct {
	Created     int64       `json:"created"`     // Date when the album has been created in Unixtime
	Description string      `json:"description"` // Photo album description
	ID          int64       `json:"id"`          // Photo album ID
	OwnerID     int64       `json:"owner_id"`    // Album owner's ID
	Size        int64       `json:"size"`        // Photos number
	Thumb       PhotosPhoto `json:"thumb"`
	Title       string      `json:"title"`   // Photo album title
	Updated     int64       `json:"updated"` // Date when the album has been updated last time in Unixtime
}

type PhotosPhotoAlbumFull struct {
	CanUpload          BaseBoolInt        `json:"can_upload"`        // Information whether current user can upload photo to the album
	CommentsDisabled   BaseBoolInt        `json:"comments_disabled"` // Information whether album comments are disabled
	Created            int64              `json:"created"`           // Date when the album has been created in Unixtime
	Description        string             `json:"description"`       // Photo album description
	ID                 int64              `json:"id"`                // Photo album ID
	OwnerID            int64              `json:"owner_id"`          // Album owner's ID
	Size               int64              `json:"size"`              // Photos number
	Sizes              []PhotosPhotoSizes `json:"sizes"`
	ThumbID            int64              `json:"thumb_id"`              // Thumb photo ID
	ThumbIsLast        BaseBoolInt        `json:"thumb_is_last"`         // Information whether the album thumb is last photo
	ThumbSrc           string             `json:"thumb_src"`             // URL of the thumb image
	Title              string             `json:"title"`                 // Photo album title
	Updated            int64              `json:"updated"`               // Date when the album has been updated last time in Unixtime
	UploadByAdminsOnly BaseBoolInt        `json:"upload_by_admins_only"` // Information whether only community administrators can upload photos
}

type PhotosPhotoFull struct {
	AccessKey  string          `json:"access_key"`  // Access key for the photo
	AlbumID    int64           `json:"album_id"`    // Album ID
	CanComment BaseBoolInt     `json:"can_comment"` // Information whether current user can comment the photo
	Comments   BaseObjectCount `json:"comments"`
	Date       int64           `json:"date"`   // Date when uploaded
	Height     int64           `json:"height"` // Original photo height
	ID         int64           `json:"id"`     // Photo ID
	Images     []PhotosImage   `json:"images"`
	Lat        float64         `json:"lat"` // Latitude
	Likes      BaseLikes       `json:"likes"`
	Long       float64         `json:"long"`     // Longitude
	OwnerID    int64           `json:"owner_id"` // Photo owner's ID
	PostID     int64           `json:"post_id"`  // Post ID
	Reposts    BaseObjectCount `json:"reposts"`
	Tags       BaseObjectCount `json:"tags"`
	Text       string          `json:"text"`    // Photo caption
	UserID     int64           `json:"user_id"` // ID of the user who have uploaded the photo
	Width      int64           `json:"width"`   // Original photo width
}

type PhotosPhotoFullXtrRealOffset struct {
	AccessKey  string             `json:"access_key"` // Access key for the photo
	AlbumID    int64              `json:"album_id"`   // Album ID
	CanComment BaseBoolInt        `json:"can_comment"`
	Comments   BaseObjectCount    `json:"comments"`
	Date       int64              `json:"date"`   // Date when uploaded
	Height     int64              `json:"height"` // Original photo height
	Hidden     BasePropertyExists `json:"hidden"` // Returns if the photo is hidden above the wall
	ID         int64              `json:"id"`     // Photo ID
	Lat        float64            `json:"lat"`    // Latitude
	Likes      BaseLikes          `json:"likes"`
	Long       float64            `json:"long"`        // Longitude
	OwnerID    int64              `json:"owner_id"`    // Photo owner's ID
	Photo1280  string             `json:"photo_1280"`  // URL of image with 1280 px width
	Photo130   string             `json:"photo_130"`   // URL of image with 130 px width
	Photo2560  string             `json:"photo_2560"`  // URL of image with 2560 px width
	Photo604   string             `json:"photo_604"`   // URL of image with 604 px width
	Photo75    string             `json:"photo_75"`    // URL of image with 75 px width
	Photo807   string             `json:"photo_807"`   // URL of image with 807 px width
	PostID     int64              `json:"post_id"`     // Post ID
	RealOffset int64              `json:"real_offset"` // Real position of the photo
	Reposts    BaseObjectCount    `json:"reposts"`
	Sizes      []PhotosPhotoSizes `json:"sizes"`
	Tags       BaseObjectCount    `json:"tags"`
	Text       string             `json:"text"`    // Photo caption
	UserID     int64              `json:"user_id"` // ID of the user who have uploaded the photo
	Width      int64              `json:"width"`   // Original photo width
}

type PhotosPhotoSizes struct {
	Height int64                `json:"height"` // Height in px
	URL    string               `json:"url"`    // URL of the image
	Src    string               `json:"src"`    // URL of the image
	Type   PhotosPhotoSizesType `json:"type"`
	Width  int64                `json:"width"` // Width in px
}

// Size type
type PhotosPhotoSizesType string

const (
	PhotosPhotoSizesTypeS PhotosPhotoSizesType = "s"
	PhotosPhotoSizesTypeM PhotosPhotoSizesType = "m"
	PhotosPhotoSizesTypeX PhotosPhotoSizesType = "x"
	PhotosPhotoSizesTypeO PhotosPhotoSizesType = "o"
	PhotosPhotoSizesTypeP PhotosPhotoSizesType = "p"
	PhotosPhotoSizesTypeQ PhotosPhotoSizesType = "q"
	PhotosPhotoSizesTypeR PhotosPhotoSizesType = "r"
	PhotosPhotoSizesTypeK PhotosPhotoSizesType = "k"
	PhotosPhotoSizesTypeL PhotosPhotoSizesType = "l"
	PhotosPhotoSizesTypeY PhotosPhotoSizesType = "y"
	PhotosPhotoSizesTypeZ PhotosPhotoSizesType = "z"
	PhotosPhotoSizesTypeC PhotosPhotoSizesType = "c"
	PhotosPhotoSizesTypeW PhotosPhotoSizesType = "w"
)

type PhotosPhotoTag struct {
	Date       int64       `json:"date"`        // Date when tag has been added in Unixtime
	ID         int64       `json:"id"`          // Tag ID
	PlacerID   int64       `json:"placer_id"`   // ID of the tag creator
	TaggedName string      `json:"tagged_name"` // Tag description
	UserID     int64       `json:"user_id"`     // Tagged user ID
	Viewed     BaseBoolInt `json:"viewed"`      // Information whether the tag is reviewed
	X          float64     `json:"x"`           // Coordinate X of the left upper corner
	X2         float64     `json:"x2"`          // Coordinate X of the right lower corner
	Y          float64     `json:"y"`           // Coordinate Y of the left upper corner
	Y2         float64     `json:"y2"`          // Coordinate Y of the right lower corner
}

type PhotosPhotoUpload struct {
	AlbumID           int64  `json:"album_id"`            // Album ID
	UploadURL         string `json:"upload_url"`          // URL to upload photo
	FallbackUploadURL string `json:"fallback_upload_url"` // Fallback URL if upload_url returned error
	UserID            int64  `json:"user_id"`             // User ID
	GroupID           int64  `json:"group_id"`            // Group ID
}

type PhotosPhotoUploadResponse struct {
	Aid        int64  `json:"aid"`         // Album ID
	Hash       string `json:"hash"`        // Uploading hash
	PhotosList string `json:"photos_list"` // Uploaded photos data
	Server     int64  `json:"server"`      // Upload server number
}

type PhotosPhotoXtrRealOffset struct {
	AccessKey  string             `json:"access_key"`  // Access key for the photo
	AlbumID    int64              `json:"album_id"`    // Album ID
	Date       int64              `json:"date"`        // Date when uploaded
	Height     int64              `json:"height"`      // Original photo height
	Hidden     BasePropertyExists `json:"hidden"`      // Returns if the photo is hidden above the wall
	ID         int64              `json:"id"`          // Photo ID
	Lat        float64            `json:"lat"`         // Latitude
	Long       float64            `json:"long"`        // Longitude
	OwnerID    int64              `json:"owner_id"`    // Photo owner's ID
	Photo1280  string             `json:"photo_1280"`  // URL of image with 1280 px width
	Photo130   string             `json:"photo_130"`   // URL of image with 130 px width
	Photo2560  string             `json:"photo_2560"`  // URL of image with 2560 px width
	Photo604   string             `json:"photo_604"`   // URL of image with 604 px width
	Photo75    string             `json:"photo_75"`    // URL of image with 75 px width
	Photo807   string             `json:"photo_807"`   // URL of image with 807 px width
	PostID     int64              `json:"post_id"`     // Post ID
	RealOffset int64              `json:"real_offset"` // Real position of the photo
	Sizes      []PhotosPhotoSizes `json:"sizes"`
	Text       string             `json:"text"`    // Photo caption
	UserID     int64              `json:"user_id"` // ID of the user who have uploaded the photo
	Width      int64              `json:"width"`   // Original photo width
}

type PhotosPhotoXtrTagInfo struct {
	AccessKey  string             `json:"access_key"` // Access key for the photo
	AlbumID    int64              `json:"album_id"`   // Album ID
	Date       int64              `json:"date"`       // Date when uploaded
	Height     int64              `json:"height"`     // Original photo height
	ID         int64              `json:"id"`         // Photo ID
	Lat        float64            `json:"lat"`        // Latitude
	Long       float64            `json:"long"`       // Longitude
	OwnerID    int64              `json:"owner_id"`   // Photo owner's ID
	Photo1280  string             `json:"photo_1280"` // URL of image with 1280 px width
	Photo130   string             `json:"photo_130"`  // URL of image with 130 px width
	Photo2560  string             `json:"photo_2560"` // URL of image with 2560 px width
	Photo604   string             `json:"photo_604"`  // URL of image with 604 px width
	Photo75    string             `json:"photo_75"`   // URL of image with 75 px width
	Photo807   string             `json:"photo_807"`  // URL of image with 807 px width
	PlacerID   int64              `json:"placer_id"`  // ID of the tag creator
	PostID     int64              `json:"post_id"`    // Post ID
	Sizes      []PhotosPhotoSizes `json:"sizes"`
	TagCreated int64              `json:"tag_created"` // Date when tag has been added in Unixtime
	TagID      int64              `json:"tag_id"`      // Tag ID
	Text       string             `json:"text"`        // Photo caption
	UserID     int64              `json:"user_id"`     // ID of the user who have uploaded the photo
	Width      int64              `json:"width"`       // Original photo width
}

type PhotosTagsSuggestionItem struct {
	Title   string                           `json:"title"`
	Type    string                           `json:"type"`
	Buttons []PhotosTagsSuggestionItemButton `json:"buttons"`
	Photo   PhotosPhoto                      `json:"photo"`
	Tags    []PhotosPhotoTag                 `json:"tags"`
}

type PhotosTagsSuggestionItemButton struct {
	Title  string `json:"title"`
	Action string `json:"action"`
	Style  string `json:"style"`
}

type PhotosWallUploadResponse struct {
	Hash   string `json:"hash"`   // Uploading hash
	Photo  string `json:"photo"`  // Uploaded photo data
	Server int64  `json:"server"` // Upload server number
}

type PollsAnswer struct {
	ID    int64   `json:"id"`    // Answer ID
	Rate  float64 `json:"rate"`  // Answer rate in percents
	Text  string  `json:"text"`  // Answer text
	Votes int64   `json:"votes"` // Votes number
}

type PollsBackground struct {
	Angle  int64               `json:"angle"`  // Gradient angle with 0 on positive X axis
	Color  string              `json:"color"`  // Hex color code without #
	Height int64               `json:"height"` // Original height of pattern tile
	ID     int64               `json:"id"`
	Name   string              `json:"name"`
	Images []BaseImage         `json:"images"` // Pattern tiles
	Points []BaseGradientPoint `json:"points"` // Gradient points
	Type   string              `json:"type"`
	Width  int64               `json:"width"` // Original with of pattern tile
}

type PollsFriend struct {
	ID int64 `json:"id"`
}

type PollsPoll struct {
	Anonymous     PollsPollAnonymous `json:"anonymous"`
	Friends       []PollsFriend      `json:"friends"`
	Multiple      bool               `json:"multiple"`  // Information whether the poll with multiple choices
	AnswerID      int64              `json:"answer_id"` // Current user's answer ID
	EndDate       int64              `json:"end_date"`
	AnswerIDs     []int64            `json:"answer_ids"` // Current user's answer IDs
	Closed        bool               `json:"closed"`
	IsBoard       bool               `json:"is_board"`
	CanEdit       bool               `json:"can_edit"`
	CanVote       bool               `json:"can_vote"`
	CanReport     bool               `json:"can_report"`
	CanShare      bool               `json:"can_share"`
	Photo         PollsBackground    `json:"photo"`
	Answers       []PollsAnswer      `json:"answers"`
	Created       int64              `json:"created"`   // Date when poll has been created in Unixtime
	ID            int64              `json:"id"`        // Poll ID
	OwnerID       int64              `json:"owner_id"`  // Poll owner's ID
	AuthorID      int64              `json:"author_id"` // Poll author's ID
	Question      string             `json:"question"`  // Poll question
	Background    PollsBackground    `json:"background"`
	Votes         int64              `json:"votes"` // Votes number
	DisableUnvote bool               `json:"disable_unvote"`
}

// Information whether the field is anonymous
type PollsPollAnonymous bool

type PollsVoters struct {
	AnswerID int64            `json:"answer_id"` // Answer ID
	Users    PollsVotersUsers `json:"users"`
}

type PollsVotersUsers struct {
	Count int64   `json:"count"` // Votes number
	Items []int64 `json:"items"`
}

type PrettyCardsPrettyCard struct {
	Button     string      `json:"button"`      // Button key
	ButtonText string      `json:"button_text"` // Button text in current language
	CardID     string      `json:"card_id"`     // Card ID (long int returned as string)
	Images     []BaseImage `json:"images"`
	LinkURL    string      `json:"link_url"`  // Link URL
	Photo      string      `json:"photo"`     // Photo ID (format "<owner_id>_<media_id>")
	Price      string      `json:"price"`     // Price if set (decimal number returned as string)
	PriceOld   string      `json:"price_old"` // Old price if set (decimal number returned as string)
	Title      string      `json:"title"`     // Title
}

type SearchHint struct {
	App         AppsApp           `json:"app"`
	Description string            `json:"description"` // Object description
	Global      BaseBoolInt       `json:"global"`      // Information whether the object has been found globally
	Group       GroupsGroup       `json:"group"`
	Profile     UsersUserMin      `json:"profile"`
	Section     SearchHintSection `json:"section"`
	Type        SearchHintType    `json:"type"`
}

// Section title
type SearchHintSection string

const (
	SearchHintSectionGroups         SearchHintSection = "groups"
	SearchHintSectionEvents         SearchHintSection = "events"
	SearchHintSectionPublics        SearchHintSection = "publics"
	SearchHintSectionCorrespondents SearchHintSection = "correspondents"
	SearchHintSectionPeople         SearchHintSection = "people"
	SearchHintSectionFriends        SearchHintSection = "friends"
	SearchHintSectionMutualFriends  SearchHintSection = "mutual_friends"
)

// Object type
type SearchHintType string

const (
	SearchHintTypeGroup     SearchHintType = "group"
	SearchHintTypeProfile   SearchHintType = "profile"
	SearchHintTypeVKApp     SearchHintType = "vk_app"
	SearchHintTypeApp       SearchHintType = "app"
	SearchHintTypeHtml5Game SearchHintType = "html5_game"
)

type SecureLevel struct {
	Level int64 `json:"level"` // Level
	Uid   int64 `json:"uid"`   // User ID
}

type SecureSmsNotification struct {
	AppID   string `json:"app_id"`  // Application ID
	Date    string `json:"date"`    // Date when message has been sent in Unixtime
	ID      string `json:"id"`      // Notification ID
	Message string `json:"message"` // Messsage text
	UserID  string `json:"user_id"` // User ID
}

type SecureTokenChecked struct {
	Date    int64 `json:"date"`    // Date when access_token has been generated in Unixtime
	Expire  int64 `json:"expire"`  // Date when access_token will expire in Unixtime
	Success int64 `json:"success"` // Returns if successfully processed
	UserID  int64 `json:"user_id"` // User ID
}

type SecureTransaction struct {
	Date    int64 `json:"date"`     // Transaction date in Unixtime
	ID      int64 `json:"id"`       // Transaction ID
	UidFrom int64 `json:"uid_from"` // From ID
	UidTo   int64 `json:"uid_to"`   // To ID
	Votes   int64 `json:"votes"`    // Votes number
}

// Activity stats
type StatsActivity struct {
	Comments     int64 `json:"comments"`     // Comments number
	Copies       int64 `json:"copies"`       // Reposts number
	Hidden       int64 `json:"hidden"`       // Hidden from news count
	Likes        int64 `json:"likes"`        // Likes number
	Subscribed   int64 `json:"subscribed"`   // New subscribers count
	Unsubscribed int64 `json:"unsubscribed"` // Unsubscribed count
}

type StatsCity struct {
	Count int64  `json:"count"` // Visitors number
	Name  string `json:"name"`  // City name
	Value int64  `json:"value"` // City ID
}

type StatsCountry struct {
	Code  string `json:"code"`  // Country code
	Count int64  `json:"count"` // Visitors number
	Name  string `json:"name"`  // Country name
	Value int64  `json:"value"` // Country ID
}

type StatsPeriod struct {
	Activity   StatsActivity `json:"activity"`
	PeriodFrom int64         `json:"period_from"` // Unix timestamp
	PeriodTo   int64         `json:"period_to"`   // Unix timestamp
	Reach      StatsReach    `json:"reach"`
	Visitors   StatsViews    `json:"visitors"`
}

// Reach stats
type StatsReach struct {
	Age              []StatsSexAge  `json:"age"`
	Cities           []StatsCity    `json:"cities"`
	Countries        []StatsCountry `json:"countries"`
	MobileReach      int64          `json:"mobile_reach"`      // Reach count from mobile devices
	Reach            int64          `json:"reach"`             // Reach count
	ReachSubscribers int64          `json:"reach_subscribers"` // Subscribers reach count
	Sex              []StatsSexAge  `json:"sex"`
	SexAge           []StatsSexAge  `json:"sex_age"`
}

type StatsSexAge struct {
	Count            int64  `json:"count"` // Visitors number
	Value            string `json:"value"` // Sex/age value
	Reach            int64  `json:"reach"`
	ReachSubscribers int64  `json:"reach_subscribers"`
	CountSubscribers int64  `json:"count_subscribers"`
}

// Views stats
type StatsViews struct {
	Age         []StatsSexAge  `json:"age"`
	Cities      []StatsCity    `json:"cities"`
	Countries   []StatsCountry `json:"countries"`
	MobileViews int64          `json:"mobile_views"` // Number of views from mobile devices
	Sex         []StatsSexAge  `json:"sex"`
	SexAge      []StatsSexAge  `json:"sex_age"`
	Views       int64          `json:"views"`    // Views number
	Visitors    int64          `json:"visitors"` // Visitors number
}

type StatsWallpostStat struct {
	PostID                int64         `json:"post_id"`
	Hide                  int64         `json:"hide"`              // Hidings number
	JoinGroup             int64         `json:"join_group"`        // People have joined the group
	Links                 int64         `json:"links"`             // Link clickthrough
	ReachSubscribers      int64         `json:"reach_subscribers"` // Subscribers reach
	ReachSubscribersCount int64         `json:"reach_subscribers_count"`
	ReachTotal            int64         `json:"reach_total"` // Total reach
	ReachTotalCount       int64         `json:"reach_total_count"`
	ReachViral            int64         `json:"reach_viral"`
	ReachAds              int64         `json:"reach_ads"`
	Report                int64         `json:"report"`      // Reports number
	ToGroup               int64         `json:"to_group"`    // Clickthrough to community
	Unsubscribe           int64         `json:"unsubscribe"` // Unsubscribed members
	SexAge                []StatsSexAge `json:"sex_age"`
}

type StatusStatus struct {
	Text  string     `json:"text"` // Status text
	Audio AudioAudio `json:"audio"`
}

type StorageValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type StoriesClickableArea struct {
	X int64 `json:"x"`
	Y int64 `json:"y"`
}

type StoriesClickableSticker struct {
	ClickableArea            []StoriesClickableArea `json:"clickable_area"`
	ID                       int64                  `json:"id"` // Clickable sticker ID
	Hashtag                  string                 `json:"hashtag"`
	LinkObject               BaseLink               `json:"link_object"`
	Mention                  string                 `json:"mention"`
	TooltipText              string                 `json:"tooltip_text"`
	OwnerID                  int64                  `json:"owner_id"`
	StoryID                  int64                  `json:"story_id"`
	Question                 string                 `json:"question"`
	QuestionButton           string                 `json:"question_button"`
	PlaceID                  int64                  `json:"place_id"`
	MarketItem               MarketMarketItem       `json:"market_item"`
	Audio                    AudioAudio             `json:"audio"`
	AudioStartTime           int64                  `json:"audio_start_time"`
	Style                    string                 `json:"style"`
	Type                     string                 `json:"type"`
	Subtype                  string                 `json:"subtype"`
	PostOwnerID              int64                  `json:"post_owner_id"`
	PostID                   int64                  `json:"post_id"`
	Poll                     PollsPoll              `json:"poll"`
	Color                    string                 `json:"color"`           // Color, hex format
	StickerID                int64                  `json:"sticker_id"`      // Sticker ID
	StickerPackID            int64                  `json:"sticker_pack_id"` // Sticker pack ID
	App                      AppsAppMin             `json:"app"`
	AppContext               string                 `json:"app_context"`                 // Additional context for app sticker
	HasNewInteractions       bool                   `json:"has_new_interactions"`        // Whether current user has unread interaction with this app
	IsBroadcastNotifyAllowed bool                   `json:"is_broadcast_notify_allowed"` // Whether current user allowed broadcast notify from this app
}

type StoriesClickableStickers struct {
	ClickableStickers []StoriesClickableSticker `json:"clickable_stickers"`
	OriginalHeight    int64                     `json:"original_height"`
	OriginalWidth     int64                     `json:"original_width"`
}

type StoriesFeedItem struct {
	Type      string            `json:"type"`       // Type of Feed Item
	Stories   []StoriesStory    `json:"stories"`    // Author stories
	Grouped   []StoriesFeedItem `json:"grouped"`    // Grouped stories of various authors (for types community_grouped_stories/app_grouped_stories type)
	App       AppsAppMin        `json:"app"`        // App, which stories has been grouped (for type app_grouped_stories)
	PromoData StoriesPromoBlock `json:"promo_data"` // Additional data for promo stories (for type promo_stories)
}

// Additional data for promo stories
type StoriesPromoBlock struct {
	Name        string `json:"name"`         // Promo story title
	Photo50     string `json:"photo_50"`     // RL of square photo of the story with 50 pixels in width
	Photo100    string `json:"photo_100"`    // RL of square photo of the story with 100 pixels in width
	NotAnimated bool   `json:"not_animated"` // Hide animation for promo story
}

type StoriesReplies struct {
	Count int64 `json:"count"` // Replies number.
	New   int64 `json:"new"`   // New replies number.
}

type StoriesStatLine struct {
	Name          string `json:"name"`
	Counter       int64  `json:"counter"`
	IsUnavailable bool   `json:"is_unavailable"`
}

type StoriesStory struct {
	AccessKey            string                   `json:"access_key"`  // Access key for private object.
	CanComment           BaseBoolInt              `json:"can_comment"` // Information whether current user can comment the story (0 - no, 1 - yes).
	CanReply             BaseBoolInt              `json:"can_reply"`   // Information whether current user can reply to the story (0 - no, 1 - yes).
	CanSee               BaseBoolInt              `json:"can_see"`     // Information whether current user can see the story (0 - no, 1 - yes).
	CanLike              bool                     `json:"can_like"`    // Information whether current user can like the story.
	CanShare             BaseBoolInt              `json:"can_share"`   // Information whether current user can share the story (0 - no, 1 - yes).
	CanHide              BaseBoolInt              `json:"can_hide"`    // Information whether current user can hide the story (0 - no, 1 - yes).
	Date                 int64                    `json:"date"`        // Date when story has been added in Unixtime.
	ExpiresAt            int64                    `json:"expires_at"`  // Story expiration time. Unixtime.
	ID                   int64                    `json:"id"`          // Story ID.
	IsDeleted            bool                     `json:"is_deleted"`  // Information whether the story is deleted (false - no, true - yes).
	IsExpired            bool                     `json:"is_expired"`  // Information whether the story is expired (false - no, true - yes).
	Link                 StoriesStoryLink         `json:"link"`
	OwnerID              int64                    `json:"owner_id"` // Story owner's ID.
	ParentStory          *StoriesStory            `json:"parent_story"`
	ParentStoryAccessKey string                   `json:"parent_story_access_key"` // Access key for private object.
	ParentStoryID        int64                    `json:"parent_story_id"`         // Parent story ID.
	ParentStoryOwnerID   int64                    `json:"parent_story_owner_id"`   // Parent story owner's ID.
	Photo                PhotosPhoto              `json:"photo"`
	Replies              StoriesReplies           `json:"replies"` // Replies counters to current story.
	Seen                 BaseBoolInt              `json:"seen"`    // Information whether current user has seen the story or not (0 - no, 1 - yes).
	Type                 StoriesStoryType         `json:"type"`
	ClickableStickers    StoriesClickableStickers `json:"clickable_stickers"`
	Video                VideoVideo               `json:"video"`
	Views                int64                    `json:"views"`             // Views number.
	CanAsk               BaseBoolInt              `json:"can_ask"`           // Information whether story has question sticker and current user can send question to the author
	CanAskAnonymous      BaseBoolInt              `json:"can_ask_anonymous"` // Information whether story has question sticker and current user can send anonymous question to the author
	NarrativesCount      int64                    `json:"narratives_count"`
	FirstNarrativeTitle  string                   `json:"first_narrative_title"`
	BirthdayWishUserID   int64                    `json:"birthday_wish_user_id"`
}

type StoriesStoryLink struct {
	Text string `json:"text"` // Link text
	URL  string `json:"url"`  // Link URL
}

type StoriesStoryStats struct {
	Answer      StoriesStoryStatsStat `json:"answer"`
	Bans        StoriesStoryStatsStat `json:"bans"`
	OpenLink    StoriesStoryStatsStat `json:"open_link"`
	Replies     StoriesStoryStatsStat `json:"replies"`
	Shares      StoriesStoryStatsStat `json:"shares"`
	Subscribers StoriesStoryStatsStat `json:"subscribers"`
	Views       StoriesStoryStatsStat `json:"views"`
	Likes       StoriesStoryStatsStat `json:"likes"`
}

type StoriesStoryStatsStat struct {
	Count int64                  `json:"count"` // Stat value
	State StoriesStoryStatsState `json:"state"`
}

// Statistic state
type StoriesStoryStatsState string

const (
	StoriesStoryStatsStateOn     StoriesStoryStatsState = "on"
	StoriesStoryStatsStateOff    StoriesStoryStatsState = "off"
	StoriesStoryStatsStateHidden StoriesStoryStatsState = "hidden"
)

// Story type.
type StoriesStoryType string

const (
	StoriesStoryTypePhoto        StoriesStoryType = "photo"
	StoriesStoryTypeVideo        StoriesStoryType = "video"
	StoriesStoryTypeLiveActive   StoriesStoryType = "live_active"
	StoriesStoryTypeLiveFinished StoriesStoryType = "live_finished"
)

type StoriesUploadLinkText string

const (
	StoriesUploadLinkTextToStore   StoriesUploadLinkText = "to_store"
	StoriesUploadLinkTextVote      StoriesUploadLinkText = "vote"
	StoriesUploadLinkTextMore      StoriesUploadLinkText = "more"
	StoriesUploadLinkTextBook      StoriesUploadLinkText = "book"
	StoriesUploadLinkTextOrder     StoriesUploadLinkText = "order"
	StoriesUploadLinkTextEnroll    StoriesUploadLinkText = "enroll"
	StoriesUploadLinkTextFill      StoriesUploadLinkText = "fill"
	StoriesUploadLinkTextSignup    StoriesUploadLinkText = "signup"
	StoriesUploadLinkTextBuy       StoriesUploadLinkText = "buy"
	StoriesUploadLinkTextTicket    StoriesUploadLinkText = "ticket"
	StoriesUploadLinkTextWrite     StoriesUploadLinkText = "write"
	StoriesUploadLinkTextOpen      StoriesUploadLinkText = "open"
	StoriesUploadLinkTextLearnMore StoriesUploadLinkText = "learn_more"
	StoriesUploadLinkTextView      StoriesUploadLinkText = "view"
	StoriesUploadLinkTextGoTo      StoriesUploadLinkText = "go_to"
	StoriesUploadLinkTextContact   StoriesUploadLinkText = "contact"
	StoriesUploadLinkTextWatch     StoriesUploadLinkText = "watch"
	StoriesUploadLinkTextPlay      StoriesUploadLinkText = "play"
	StoriesUploadLinkTextInstall   StoriesUploadLinkText = "install"
	StoriesUploadLinkTextRead      StoriesUploadLinkText = "read"
	StoriesUploadLinkTextCalendar  StoriesUploadLinkText = "calendar"
)

type StoriesViewersItem struct {
	IsLiked bool          `json:"is_liked"` // user has like for this object
	UserID  int64         `json:"user_id"`  // user id
	User    UsersUserFull `json:"user"`
}

type UsersCareer struct {
	CityID    int64  `json:"city_id"`    // City ID
	Company   string `json:"company"`    // Company name
	CountryID int64  `json:"country_id"` // Country ID
	From      int64  `json:"from"`       // From year
	GroupID   int64  `json:"group_id"`   // Community ID
	ID        int64  `json:"id"`         // Career ID
	Position  string `json:"position"`   // Position
	Until     int64  `json:"until"`      // Till year
}

type UsersExports struct {
	Facebook    int64 `json:"facebook"`
	Livejournal int64 `json:"livejournal"`
	Twitter     int64 `json:"twitter"`
}

type UsersFields string

const (
	UsersFieldsPhotoID                UsersFields = "photo_id"
	UsersFieldsVerified               UsersFields = "verified"
	UsersFieldsSex                    UsersFields = "sex"
	UsersFieldsBdate                  UsersFields = "bdate"
	UsersFieldsCity                   UsersFields = "city"
	UsersFieldsCountry                UsersFields = "country"
	UsersFieldsHomeTown               UsersFields = "home_town"
	UsersFieldsHasPhoto               UsersFields = "has_photo"
	UsersFieldsPhoto50                UsersFields = "photo_50"
	UsersFieldsPhoto100               UsersFields = "photo_100"
	UsersFieldsPhoto200Orig           UsersFields = "photo_200_orig"
	UsersFieldsPhoto200               UsersFields = "photo_200"
	UsersFieldsPhoto400Orig           UsersFields = "photo_400_orig"
	UsersFieldsPhotoMax               UsersFields = "photo_max"
	UsersFieldsPhotoMaxOrig           UsersFields = "photo_max_orig"
	UsersFieldsOnline                 UsersFields = "online"
	UsersFieldsLists                  UsersFields = "lists"
	UsersFieldsDomain                 UsersFields = "domain"
	UsersFieldsHasMobile              UsersFields = "has_mobile"
	UsersFieldsContacts               UsersFields = "contacts"
	UsersFieldsSite                   UsersFields = "site"
	UsersFieldsEducation              UsersFields = "education"
	UsersFieldsUniversities           UsersFields = "universities"
	UsersFieldsSchools                UsersFields = "schools"
	UsersFieldsStatus                 UsersFields = "status"
	UsersFieldsLastSeen               UsersFields = "last_seen"
	UsersFieldsFollowersCount         UsersFields = "followers_count"
	UsersFieldsCounters               UsersFields = "counters"
	UsersFieldsCommonCount            UsersFields = "common_count"
	UsersFieldsOccupation             UsersFields = "occupation"
	UsersFieldsNickname               UsersFields = "nickname"
	UsersFieldsRelatives              UsersFields = "relatives"
	UsersFieldsRelation               UsersFields = "relation"
	UsersFieldsPersonal               UsersFields = "personal"
	UsersFieldsConnections            UsersFields = "connections"
	UsersFieldsExports                UsersFields = "exports"
	UsersFieldsWallComments           UsersFields = "wall_comments"
	UsersFieldsActivities             UsersFields = "activities"
	UsersFieldsInterests              UsersFields = "interests"
	UsersFieldsMusic                  UsersFields = "music"
	UsersFieldsMovies                 UsersFields = "movies"
	UsersFieldsTV                     UsersFields = "tv"
	UsersFieldsBooks                  UsersFields = "books"
	UsersFieldsGames                  UsersFields = "games"
	UsersFieldsAbout                  UsersFields = "about"
	UsersFieldsQuotes                 UsersFields = "quotes"
	UsersFieldsCanPost                UsersFields = "can_post"
	UsersFieldsCanSeeAllPosts         UsersFields = "can_see_all_posts"
	UsersFieldsCanSeeAudio            UsersFields = "can_see_audio"
	UsersFieldsCanWritePrivateMessage UsersFields = "can_write_private_message"
	UsersFieldsCanSendFriendRequest   UsersFields = "can_send_friend_request"
	UsersFieldsIsFavorite             UsersFields = "is_favorite"
	UsersFieldsIsHiddenFromFeed       UsersFields = "is_hidden_from_feed"
	UsersFieldsTimezone               UsersFields = "timezone"
	UsersFieldsScreenName             UsersFields = "screen_name"
	UsersFieldsMaidenName             UsersFields = "maiden_name"
	UsersFieldsCropPhoto              UsersFields = "crop_photo"
	UsersFieldsIsFriend               UsersFields = "is_friend"
	UsersFieldsFriendStatus           UsersFields = "friend_status"
	UsersFieldsCareer                 UsersFields = "career"
	UsersFieldsMilitary               UsersFields = "military"
	UsersFieldsBlacklisted            UsersFields = "blacklisted"
	UsersFieldsBlacklistedByMe        UsersFields = "blacklisted_by_me"
	UsersFieldsCanSubscribePosts      UsersFields = "can_subscribe_posts"
	UsersFieldsDescriptions           UsersFields = "descriptions"
	UsersFieldsTrending               UsersFields = "trending"
	UsersFieldsMutual                 UsersFields = "mutual"
	UsersFieldsFriendshipWeeks        UsersFields = "friendship_weeks"
	UsersFieldsCanInviteToChats       UsersFields = "can_invite_to_chats"
	UsersFieldsStoriesArchiveCount    UsersFields = "stories_archive_count"
	UsersFieldsVideoLiveLevel         UsersFields = "video_live_level"
	UsersFieldsVideoLiveCount         UsersFields = "video_live_count"
	UsersFieldsClipsCount             UsersFields = "clips_count"
)

type UsersLastSeen struct {
	Platform int64 `json:"platform"` // Type of the platform that used for the last authorization
	Time     int64 `json:"time"`     // Last visit date (in Unix time)
}

type UsersMilitary struct {
	CountryID int64  `json:"country_id"` // Country ID
	From      int64  `json:"from"`       // From year
	ID        int64  `json:"id"`         // Military ID
	Unit      string `json:"unit"`       // Unit name
	UnitID    int64  `json:"unit_id"`    // Unit ID
	Until     int64  `json:"until"`      // Till year
}

type UsersOccupation struct {
	ID   int64  `json:"id"`   // ID of school, university, company group
	Name string `json:"name"` // Name of occupation
	Type string `json:"type"` // Type of occupation
}

type UsersOnlineInfo struct {
	Visible  bool   `json:"visible"`   // Whether you can see real online status of user or not
	LastSeen int64  `json:"last_seen"` // Last time we saw user being active
	IsOnline bool   `json:"is_online"` // Whether user is currently online or not
	AppID    int64  `json:"app_id"`    // Application id from which user is currently online or was last seen online
	IsMobile bool   `json:"is_mobile"` // Is user online from desktop app or mobile app
	Status   string `json:"status"`    // In case user online is not visible, it indicates approximate timeframe of user online
}

type UsersPersonal struct {
	Alcohol    int64    `json:"alcohol"`     // User's views on alcohol
	InspiredBy string   `json:"inspired_by"` // User's inspired by
	Langs      []string `json:"langs"`
	LifeMain   int64    `json:"life_main"`   // User's personal priority in life
	PeopleMain int64    `json:"people_main"` // User's personal priority in people
	Political  int64    `json:"political"`   // User's political views
	Religion   string   `json:"religion"`    // User's religion
	ReligionID int64    `json:"religion_id"` // User's religion id
	Smoking    int64    `json:"smoking"`     // User's views on smoking
}

type UsersRelative struct {
	BirthDate string `json:"birth_date"` // Date of child birthday (format dd.mm.yyyy)
	ID        int64  `json:"id"`         // Relative ID
	Name      string `json:"name"`       // Name of relative
	Type      string `json:"type"`       // Relative type
}

type UsersSchool struct {
	City          int64  `json:"city"`           // City ID
	Class         string `json:"class"`          // School class letter
	Country       int64  `json:"country"`        // Country ID
	ID            string `json:"id"`             // School ID
	Name          string `json:"name"`           // School name
	Type          int64  `json:"type"`           // School type ID
	TypeStr       string `json:"type_str"`       // School type name
	YearFrom      int64  `json:"year_from"`      // Year the user started to study
	YearGraduated int64  `json:"year_graduated"` // Graduation year
	YearTo        int64  `json:"year_to"`        // Year the user finished to study
}

// oneof users_subscriptions_item
type UsersSubscriptionsItem struct {
	*UsersUserXtrType `json:"users_user_xtr_type,omitempty"`
	*GroupsGroupFull  `json:"groups_group_full,omitempty"`
}

type UsersUniversity struct {
	Chair           int64  `json:"chair"`            // Chair ID
	ChairName       string `json:"chair_name"`       // Chair name
	City            int64  `json:"city"`             // City ID
	Country         int64  `json:"country"`          // Country ID
	EducationForm   string `json:"education_form"`   // Education form
	EducationStatus string `json:"education_status"` // Education status
	Faculty         int64  `json:"faculty"`          // Faculty ID
	FacultyName     string `json:"faculty_name"`     // Faculty name
	Graduation      int64  `json:"graduation"`       // Graduation year
	ID              int64  `json:"id"`               // University ID
	Name            string `json:"name"`             // University name
}

// allof users_user
type UsersUser struct {
	*UsersUserMin `json:"users_user_min,omitempty"`
	Sex           *BaseSex                   `json:"sex,omitempty"`
	ScreenName    *string                    `json:"screen_name,omitempty"`
	Photo50       *string                    `json:"photo_50,omitempty"`
	Photo100      *string                    `json:"photo_100,omitempty"`
	OnlineInfo    *UsersOnlineInfo           `json:"online_info,omitempty"`
	Online        *BaseBoolInt               `json:"online,omitempty"`
	OnlineMobile  *BaseBoolInt               `json:"online_mobile,omitempty"`
	OnlineApp     *int64                     `json:"online_app,omitempty"`
	Verified      *BaseBoolInt               `json:"verified,omitempty"`
	Trending      *BaseBoolInt               `json:"trending,omitempty"`
	FriendStatus  *FriendsFriendStatusStatus `json:"friend_status,omitempty"`
	Mutual        *FriendsRequestsMutual     `json:"mutual,omitempty"`
}

type UsersUserConnections struct {
	Skype        string `json:"skype"`         // User's Skype nickname
	Facebook     string `json:"facebook"`      // User's Facebook account
	FacebookName string `json:"facebook_name"` // User's Facebook name
	Twitter      string `json:"twitter"`       // User's Twitter account
	Livejournal  string `json:"livejournal"`   // User's Livejournal account
	Instagram    string `json:"instagram"`     // User's Instagram account
}

type UsersUserCounters struct {
	Albums        int64 `json:"albums"`         // Albums number
	Audios        int64 `json:"audios"`         // Audios number
	Followers     int64 `json:"followers"`      // Followers number
	Friends       int64 `json:"friends"`        // Friends number
	Gifts         int64 `json:"gifts"`          // Gifts number
	Groups        int64 `json:"groups"`         // Communities number
	Notes         int64 `json:"notes"`          // Notes number
	OnlineFriends int64 `json:"online_friends"` // Online friends number
	Pages         int64 `json:"pages"`          // Public pages number
	Photos        int64 `json:"photos"`         // Photos number
	Subscriptions int64 `json:"subscriptions"`  // Subscriptions number
	UserPhotos    int64 `json:"user_photos"`    // Number of photos with user
	UserVideos    int64 `json:"user_videos"`    // Number of videos with user
	Videos        int64 `json:"videos"`         // Videos number
}

// allof users_user_full
type UsersUserFull struct {
	*UsersUser             `json:"users_user,omitempty"`
	FirstNameNom           *string            `json:"first_name_nom,omitempty"`
	FirstNameGen           *string            `json:"first_name_gen,omitempty"`
	FirstNameDat           *string            `json:"first_name_dat,omitempty"`
	FirstNameAcc           *string            `json:"first_name_acc,omitempty"`
	FirstNameIns           *string            `json:"first_name_ins,omitempty"`
	FirstNameAbl           *string            `json:"first_name_abl,omitempty"`
	LastNameNom            *string            `json:"last_name_nom,omitempty"`
	LastNameGen            *string            `json:"last_name_gen,omitempty"`
	LastNameDat            *string            `json:"last_name_dat,omitempty"`
	LastNameAcc            *string            `json:"last_name_acc,omitempty"`
	LastNameIns            *string            `json:"last_name_ins,omitempty"`
	LastNameAbl            *string            `json:"last_name_abl,omitempty"`
	Nickname               *string            `json:"nickname,omitempty"`
	MaidenName             *string            `json:"maiden_name,omitempty"`
	Domain                 *string            `json:"domain,omitempty"`
	Bdate                  *string            `json:"bdate,omitempty"`
	City                   *BaseObject        `json:"city,omitempty"`
	Country                *BaseCountry       `json:"country,omitempty"`
	Timezone               *int64             `json:"timezone,omitempty"`
	OwnerState             *OwnerState        `json:"owner_state,omitempty"`
	Photo200               *string            `json:"photo_200,omitempty"`
	PhotoMax               *string            `json:"photo_max,omitempty"`
	Photo200Orig           *string            `json:"photo_200_orig,omitempty"`
	Photo400Orig           *string            `json:"photo_400_orig,omitempty"`
	PhotoMaxOrig           *string            `json:"photo_max_orig,omitempty"`
	PhotoID                *string            `json:"photo_id,omitempty"`
	HasPhoto               *BaseBoolInt       `json:"has_photo,omitempty"`
	HasMobile              *BaseBoolInt       `json:"has_mobile,omitempty"`
	IsFriend               *BaseBoolInt       `json:"is_friend,omitempty"`
	WallComments           *BaseBoolInt       `json:"wall_comments,omitempty"`
	CanPost                *BaseBoolInt       `json:"can_post,omitempty"`
	CanSeeAllPosts         *BaseBoolInt       `json:"can_see_all_posts,omitempty"`
	CanSeeAudio            *BaseBoolInt       `json:"can_see_audio,omitempty"`
	CanWritePrivateMessage *BaseBoolInt       `json:"can_write_private_message,omitempty"`
	CanSendFriendRequest   *BaseBoolInt       `json:"can_send_friend_request,omitempty"`
	CanBeInvitedGroup      *bool              `json:"can_be_invited_group,omitempty"`
	MobilePhone            *string            `json:"mobile_phone,omitempty"`
	HomePhone              *string            `json:"home_phone,omitempty"`
	Site                   *string            `json:"site,omitempty"`
	StatusAudio            *AudioAudio        `json:"status_audio,omitempty"`
	Status                 *string            `json:"status,omitempty"`
	Activity               *string            `json:"activity,omitempty"`
	LastSeen               *UsersLastSeen     `json:"last_seen,omitempty"`
	Exports                *UsersExports      `json:"exports,omitempty"`
	CropPhoto              *BaseCropPhoto     `json:"crop_photo,omitempty"`
	FollowersCount         *int64             `json:"followers_count,omitempty"`
	VideoLiveLevel         *int64             `json:"video_live_level,omitempty"`
	VideoLiveCount         *int64             `json:"video_live_count,omitempty"`
	Blacklisted            *BaseBoolInt       `json:"blacklisted,omitempty"`
	BlacklistedByMe        *BaseBoolInt       `json:"blacklisted_by_me,omitempty"`
	IsFavorite             *BaseBoolInt       `json:"is_favorite,omitempty"`
	IsHiddenFromFeed       *BaseBoolInt       `json:"is_hidden_from_feed,omitempty"`
	CommonCount            *int64             `json:"common_count,omitempty"`
	Occupation             *UsersOccupation   `json:"occupation,omitempty"`
	Career                 *[]UsersCareer     `json:"career,omitempty"`
	Military               *[]UsersMilitary   `json:"military,omitempty"`
	University             *int64             `json:"university,omitempty"`
	UniversityName         *string            `json:"university_name,omitempty"`
	Faculty                *int64             `json:"faculty,omitempty"`
	FacultyName            *string            `json:"faculty_name,omitempty"`
	Graduation             *int64             `json:"graduation,omitempty"`
	EducationForm          *string            `json:"education_form,omitempty"`
	EducationStatus        *string            `json:"education_status,omitempty"`
	HomeTown               *string            `json:"home_town,omitempty"`
	Relation               *UsersUserRelation `json:"relation,omitempty"`
	RelationPartner        *UsersUserMin      `json:"relation_partner,omitempty"`
	Personal               *UsersPersonal     `json:"personal,omitempty"`
	Universities           *[]UsersUniversity `json:"universities,omitempty"`
	Schools                *[]UsersSchool     `json:"schools,omitempty"`
	Relatives              *[]UsersRelative   `json:"relatives,omitempty"`
	IsSubscribedPodcasts   *bool              `json:"is_subscribed_podcasts,omitempty"`
	CanSubscribePodcasts   *bool              `json:"can_subscribe_podcasts,omitempty"`
	CanSubscribePosts      *bool              `json:"can_subscribe_posts,omitempty"`
}

type UsersUserMin struct {
	Deactivated     string `json:"deactivated"` // Returns if a profile is deleted or blocked
	FirstName       string `json:"first_name"`  // User first name
	Hidden          int64  `json:"hidden"`      // Returns if a profile is hidden.
	ID              int64  `json:"id"`          // User ID
	LastName        string `json:"last_name"`   // User last name
	CanAccessClosed bool   `json:"can_access_closed"`
	IsClosed        bool   `json:"is_closed"`
}

type UsersUserRelation int64

const (
	UsersUserRelationNotSpecified      UsersUserRelation = 0
	UsersUserRelationSingle            UsersUserRelation = 1
	UsersUserRelationInARelationship   UsersUserRelation = 2
	UsersUserRelationEngaged           UsersUserRelation = 3
	UsersUserRelationMarried           UsersUserRelation = 4
	UsersUserRelationComplicated       UsersUserRelation = 5
	UsersUserRelationActivelySearching UsersUserRelation = 6
	UsersUserRelationInLove            UsersUserRelation = 7
	UsersUserRelationInACivilUnion     UsersUserRelation = 8
)

type UsersUserSettingsXtr struct {
	Connections      UsersUserConnections         `json:"connections"`
	Bdate            string                       `json:"bdate"`            // User's date of birth
	BdateVisibility  int64                        `json:"bdate_visibility"` // Information whether user's birthdate are hidden
	City             BaseCity                     `json:"city"`
	Country          BaseCountry                  `json:"country"`
	FirstName        string                       `json:"first_name"`  // User first name
	HomeTown         string                       `json:"home_town"`   // User's hometown
	LastName         string                       `json:"last_name"`   // User last name
	MaidenName       string                       `json:"maiden_name"` // User maiden name
	NameRequest      AccountNameRequest           `json:"name_request"`
	Personal         UsersPersonal                `json:"personal"`
	Phone            string                       `json:"phone"`    // User phone number with some hidden digits
	Relation         UsersUserRelation            `json:"relation"` // User relationship status
	RelationPartner  UsersUserMin                 `json:"relation_partner"`
	RelationPending  BaseBoolInt                  `json:"relation_pending"` // Information whether relation status is pending
	RelationRequests []UsersUserMin               `json:"relation_requests"`
	ScreenName       string                       `json:"screen_name"` // Domain name of the user's page
	Sex              BaseSex                      `json:"sex"`         // User sex
	Status           string                       `json:"status"`      // User status
	StatusAudio      AudioAudio                   `json:"status_audio"`
	Interests        AccountUserSettingsInterests `json:"interests"`
	Languages        []string                     `json:"languages"`
}

// Object type
type UsersUserType string

const (
	UsersUserTypeProfile UsersUserType = "profile"
)

// allof users_user_xtr_counters
type UsersUserXtrCounters struct {
	*UsersUserFull `json:"users_user_full,omitempty"`
	Counters       *UsersUserCounters `json:"counters,omitempty"`
}

// allof users_user_xtr_type
type UsersUserXtrType struct {
	*UsersUser `json:"users_user,omitempty"`
	Type       *UsersUserType `json:"type,omitempty"`
}

type UsersUsersArray struct {
	Count int64   `json:"count"` // Users number
	Items []int64 `json:"items"`
}

type UtilsDomainResolved struct {
	ObjectID int64                   `json:"object_id"` // Object ID
	GroupID  int64                   `json:"group_id"`  // Group ID
	Type     UtilsDomainResolvedType `json:"type"`
}

// Object type
type UtilsDomainResolvedType string

const (
	UtilsDomainResolvedTypeUser        UtilsDomainResolvedType = "user"
	UtilsDomainResolvedTypeGroup       UtilsDomainResolvedType = "group"
	UtilsDomainResolvedTypeApplication UtilsDomainResolvedType = "application"
	UtilsDomainResolvedTypePage        UtilsDomainResolvedType = "page"
)

type UtilsLastShortenedLink struct {
	AccessKey string `json:"access_key"` // Access key for private stats
	Key       string `json:"key"`        // Link key (characters after vk.cc/)
	ShortURL  string `json:"short_url"`  // Short link URL
	Timestamp int64  `json:"timestamp"`  // Creation time in Unixtime
	URL       string `json:"url"`        // Full URL
	Views     int64  `json:"views"`      // Total views number
}

type UtilsLinkChecked struct {
	Link   string                 `json:"link"` // Link URL
	Status UtilsLinkCheckedStatus `json:"status"`
}

// Link status
type UtilsLinkCheckedStatus string

const (
	UtilsLinkCheckedStatusNotBanned  UtilsLinkCheckedStatus = "not_banned"
	UtilsLinkCheckedStatusBanned     UtilsLinkCheckedStatus = "banned"
	UtilsLinkCheckedStatusProcessing UtilsLinkCheckedStatus = "processing"
)

type UtilsLinkStats struct {
	Key   string       `json:"key"` // Link key (characters after vk.cc/)
	Stats []UtilsStats `json:"stats"`
}

type UtilsLinkStatsExtended struct {
	Key   string               `json:"key"` // Link key (characters after vk.cc/)
	Stats []UtilsStatsExtended `json:"stats"`
}

type UtilsShortLink struct {
	AccessKey string `json:"access_key"` // Access key for private stats
	Key       string `json:"key"`        // Link key (characters after vk.cc/)
	ShortURL  string `json:"short_url"`  // Short link URL
	URL       string `json:"url"`        // Full URL
}

type UtilsStats struct {
	Timestamp int64 `json:"timestamp"` // Start time
	Views     int64 `json:"views"`     // Total views number
}

type UtilsStatsCity struct {
	CityID int64 `json:"city_id"` // City ID
	Views  int64 `json:"views"`   // Views number
}

type UtilsStatsCountry struct {
	CountryID int64 `json:"country_id"` // Country ID
	Views     int64 `json:"views"`      // Views number
}

type UtilsStatsExtended struct {
	Cities    []UtilsStatsCity    `json:"cities"`
	Countries []UtilsStatsCountry `json:"countries"`
	SexAge    []UtilsStatsSexAge  `json:"sex_age"`
	Timestamp int64               `json:"timestamp"` // Start time
	Views     int64               `json:"views"`     // Total views number
}

type UtilsStatsSexAge struct {
	AgeRange string `json:"age_range"` // Age denotation
	Female   int64  `json:"female"`    //  Views by female users
	Male     int64  `json:"male"`      //  Views by male users
}

// Video live settings
type VideoLiveSettings struct {
	CanRewind   BaseBoolInt `json:"can_rewind"`   // If user car rewind live or not
	IsEndless   BaseBoolInt `json:"is_endless"`   // If live is endless or not
	MaxDuration int64       `json:"max_duration"` // Max possible time for rewind
}

// Video restriction button
type VideoRestrictionButton struct {
	Action string `json:"action"`
	Title  string `json:"title"`
}

type VideoSaveResult struct {
	AccessKey   string `json:"access_key"`  // Video access key
	Description string `json:"description"` // Video description
	OwnerID     int64  `json:"owner_id"`    // Video owner ID
	Title       string `json:"title"`       // Video title
	UploadURL   string `json:"upload_url"`  // URL for the video uploading
	VideoID     int64  `json:"video_id"`    // Video ID
}

// allof video_video
type VideoVideo struct {
	AccessKey                *string             `json:"access_key,omitempty"`
	AddingDate               *int64              `json:"adding_date,omitempty"`
	CanComment               *BaseBoolInt        `json:"can_comment,omitempty"`
	CanEdit                  *BaseBoolInt        `json:"can_edit,omitempty"`
	CanLike                  *BaseBoolInt        `json:"can_like,omitempty"`
	CanRepost                *BaseBoolInt        `json:"can_repost,omitempty"`
	CanSubscribe             *BaseBoolInt        `json:"can_subscribe,omitempty"`
	CanAddToFaves            *BaseBoolInt        `json:"can_add_to_faves,omitempty"`
	CanAdd                   *BaseBoolInt        `json:"can_add,omitempty"`
	CanAttachLink            *BaseBoolInt        `json:"can_attach_link,omitempty"`
	IsPrivate                *BaseBoolInt        `json:"is_private,omitempty"`
	Comments                 *int64              `json:"comments,omitempty"`
	Date                     *int64              `json:"date,omitempty"`
	Description              *string             `json:"description,omitempty"`
	Duration                 *int64              `json:"duration,omitempty"`
	Image                    *[]VideoVideoImage  `json:"image,omitempty"`
	FirstFrame               *[]VideoVideoImage  `json:"first_frame,omitempty"`
	Width                    *int64              `json:"width,omitempty"`
	Height                   *int64              `json:"height,omitempty"`
	ID                       *int64              `json:"id,omitempty"`
	OwnerID                  *int64              `json:"owner_id,omitempty"`
	UserID                   *int64              `json:"user_id,omitempty"`
	Title                    *string             `json:"title,omitempty"`
	IsFavorite               *bool               `json:"is_favorite,omitempty"`
	Player                   *string             `json:"player,omitempty"`
	Processing               *BasePropertyExists `json:"processing,omitempty"`
	Converting               *BaseBoolInt        `json:"converting,omitempty"`
	Restriction              *MediaRestriction   `json:"restriction,omitempty"`
	Added                    *BaseBoolInt        `json:"added,omitempty"`
	IsSubscribed             *BaseBoolInt        `json:"is_subscribed,omitempty"`
	TrackCode                *string             `json:"track_code,omitempty"`
	Repeat                   *BasePropertyExists `json:"repeat,omitempty"`
	Type                     *string             `json:"type,omitempty"`
	Views                    *int64              `json:"views,omitempty"`
	LocalViews               *int64              `json:"local_views,omitempty"`
	ContentRestricted        *int64              `json:"content_restricted,omitempty"`
	ContentRestrictedMessage *string             `json:"content_restricted_message,omitempty"`
	Balance                  *int64              `json:"balance,omitempty"`
	LiveStatus               *string             `json:"live_status,omitempty"`
	Live                     *BasePropertyExists `json:"live,omitempty"`
	Upcoming                 *BasePropertyExists `json:"upcoming,omitempty"`
	Spectators               *int64              `json:"spectators,omitempty"`
	Platform                 *string             `json:"platform,omitempty"`
	Likes                    *BaseLikes          `json:"likes,omitempty"`
	Reposts                  *BaseRepostsInfo    `json:"reposts,omitempty"`
}

type VideoVideoAlbumFull struct {
	Count       int64              `json:"count"`        // Total number of videos in album
	ID          int64              `json:"id"`           // Album ID
	Image       []VideoVideoImage  `json:"image"`        // Album cover image in different sizes
	ImageBlur   BasePropertyExists `json:"image_blur"`   // Need blur album thumb or not
	IsSystem    BasePropertyExists `json:"is_system"`    // Information whether album is system
	OwnerID     int64              `json:"owner_id"`     // Album owner's ID
	Title       string             `json:"title"`        // Album title
	UpdatedTime int64              `json:"updated_time"` // Date when the album has been updated last time in Unixtime
}

type VideoVideoFiles struct {
	External string `json:"external"` // URL of the external player
	Mp4240   string `json:"mp4_240"`  // URL of the mpeg4 file with 240p quality
	Mp4360   string `json:"mp4_360"`  // URL of the mpeg4 file with 360p quality
	Mp4480   string `json:"mp4_480"`  // URL of the mpeg4 file with 480p quality
	Mp4720   string `json:"mp4_720"`  // URL of the mpeg4 file with 720p quality
	Mp41080  string `json:"mp4_1080"` // URL of the mpeg4 file with 1080p quality
	Flv320   string `json:"flv_320"`  // URL of the flv file with 320p quality
}

// allof video_video_full
type VideoVideoFull struct {
	*VideoVideo  `json:"video_video,omitempty"`
	Files        *VideoVideoFiles   `json:"files,omitempty"`
	LiveSettings *VideoLiveSettings `json:"live_settings,omitempty"`
}

// allof video_video_image
type VideoVideoImage struct {
	*BaseImage  `json:"base_image,omitempty"`
	WithPadding *BasePropertyExists `json:"with_padding,omitempty"`
}

type WallAppPost struct {
	ID       int64  `json:"id"`        // Application ID
	Name     string `json:"name"`      // Application name
	Photo130 string `json:"photo_130"` // URL of the preview image with 130 px in width
	Photo604 string `json:"photo_604"` // URL of the preview image with 604 px in width
}

type WallAttachedNote struct {
	Comments     int64  `json:"comments"`      // Comments number
	Date         int64  `json:"date"`          // Date when the note has been created in Unixtime
	ID           int64  `json:"id"`            // Note ID
	OwnerID      int64  `json:"owner_id"`      // Note owner's ID
	ReadComments int64  `json:"read_comments"` // Read comments number
	Title        string `json:"title"`         // Note title
	ViewURL      string `json:"view_url"`      // URL of the page with note preview
}

type WallCarouselBase struct {
	CarouselOffset int64 `json:"carousel_offset"` // Index of current carousel element
}

type WallCommentAttachment struct {
	Audio             AudioAudio                `json:"audio"`
	Doc               DocsDoc                   `json:"doc"`
	Link              BaseLink                  `json:"link"`
	Market            MarketMarketItem          `json:"market"`
	MarketMarketAlbum MarketMarketAlbum         `json:"market_market_album"`
	Note              WallAttachedNote          `json:"note"`
	Page              PagesWikipageFull         `json:"page"`
	Photo             PhotosPhoto               `json:"photo"`
	Sticker           BaseSticker               `json:"sticker"`
	Type              WallCommentAttachmentType `json:"type"`
	Video             VideoVideo                `json:"video"`
}

// Attachment type
type WallCommentAttachmentType string

const (
	WallCommentAttachmentTypePhoto             WallCommentAttachmentType = "photo"
	WallCommentAttachmentTypeAudio             WallCommentAttachmentType = "audio"
	WallCommentAttachmentTypeVideo             WallCommentAttachmentType = "video"
	WallCommentAttachmentTypeDoc               WallCommentAttachmentType = "doc"
	WallCommentAttachmentTypeLink              WallCommentAttachmentType = "link"
	WallCommentAttachmentTypeNote              WallCommentAttachmentType = "note"
	WallCommentAttachmentTypePage              WallCommentAttachmentType = "page"
	WallCommentAttachmentTypeMarketMarketAlbum WallCommentAttachmentType = "market_market_album"
	WallCommentAttachmentTypeMarket            WallCommentAttachmentType = "market"
	WallCommentAttachmentTypeSticker           WallCommentAttachmentType = "sticker"
)

type WallGeo struct {
	Coordinates string    `json:"coordinates"` // Coordinates as string. <latitude> <longtitude>
	Place       BasePlace `json:"place"`
	Showmap     int64     `json:"showmap"` // Information whether a map is showed
	Type        string    `json:"type"`    // Place type
}

type WallGraffiti struct {
	ID       int64  `json:"id"`        // Graffiti ID
	OwnerID  int64  `json:"owner_id"`  // Graffiti owner's ID
	Photo200 string `json:"photo_200"` // URL of the preview image with 200 px in width
	Photo586 string `json:"photo_586"` // URL of the preview image with 586 px in width
}

type WallPostCopyright struct {
	ID   int64  `json:"id"`
	Link string `json:"link"`
	Name string `json:"name"`
	Type string `json:"type"`
}

type WallPostSource struct {
	Data     string             `json:"data"`     // Additional data
	Platform string             `json:"platform"` // Platform name
	Type     WallPostSourceType `json:"type"`
	URL      string             `json:"url"` // URL to an external site used to publish the post
}

// Type of post source
type WallPostSourceType string

const (
	WallPostSourceTypeVK     WallPostSourceType = "vk"
	WallPostSourceTypeWidget WallPostSourceType = "widget"
	WallPostSourceTypeApi    WallPostSourceType = "api"
	WallPostSourceTypeRss    WallPostSourceType = "rss"
	WallPostSourceTypeSms    WallPostSourceType = "sms"
)

// Post type
type WallPostType string

const (
	WallPostTypePost     WallPostType = "post"
	WallPostTypeCopy     WallPostType = "copy"
	WallPostTypeReply    WallPostType = "reply"
	WallPostTypePostpone WallPostType = "postpone"
	WallPostTypeSuggest  WallPostType = "suggest"
)

type WallPostedPhoto struct {
	ID       int64  `json:"id"`        // Photo ID
	OwnerID  int64  `json:"owner_id"`  // Photo owner's ID
	Photo130 string `json:"photo_130"` // URL of the preview image with 130 px in width
	Photo604 string `json:"photo_604"` // URL of the preview image with 604 px in width
}

type WallViews struct {
	Count int64 `json:"count"` // Count
}

type WallWallComment struct {
	Attachments    []WallCommentAttachment `json:"attachments"`
	Date           int64                   `json:"date"`    // Date when the comment has been added in Unixtime
	FromID         int64                   `json:"from_id"` // Author ID
	ID             int64                   `json:"id"`      // Comment ID
	Likes          BaseLikesInfo           `json:"likes"`
	RealOffset     int64                   `json:"real_offset"`      // Real position of the comment
	ReplyToComment int64                   `json:"reply_to_comment"` // Replied comment ID
	ReplyToUser    int64                   `json:"reply_to_user"`    // Replied user ID
	Text           string                  `json:"text"`             // Comment text
	Thread         CommentThread           `json:"thread"`
	PostID         int64                   `json:"post_id"`
	OwnerID        int64                   `json:"owner_id"`
	ParentsStack   []int64                 `json:"parents_stack"`
	Deleted        bool                    `json:"deleted"`
}

type WallWallpost struct {
	AccessKey   string                   `json:"access_key"` // Access key to private object
	Attachments []WallWallpostAttachment `json:"attachments"`
	Copyright   WallPostCopyright        `json:"copyright"` // Information about the source of the post
	Date        int64                    `json:"date"`      // Date of publishing in Unixtime
	Edited      int64                    `json:"edited"`    // Date of editing in Unixtime
	FromID      int64                    `json:"from_id"`   // Post author ID
	Geo         WallGeo                  `json:"geo"`
	ID          int64                    `json:"id"`          // Post ID
	IsArchived  bool                     `json:"is_archived"` // Is post archived, only for post owners
	IsFavorite  bool                     `json:"is_favorite"` // Information whether the post in favorites list
	Likes       BaseLikesInfo            `json:"likes"`       // Count of likes
	OwnerID     int64                    `json:"owner_id"`    // Wall owner's ID
	PostSource  WallPostSource           `json:"post_source"`
	PostType    WallPostType             `json:"post_type"`
	Reposts     BaseRepostsInfo          `json:"reposts"`   // Count of views
	SignerID    int64                    `json:"signer_id"` // Post signer ID
	Text        string                   `json:"text"`      // Post text
	Views       WallViews                `json:"views"`     // Count of views
}

type WallWallpostAttachment struct {
	AccessKey   string                     `json:"access_key"` // Access key for the audio
	Album       PhotosPhotoAlbum           `json:"album"`
	App         WallAppPost                `json:"app"`
	Audio       AudioAudio                 `json:"audio"`
	Doc         DocsDoc                    `json:"doc"`
	Event       EventsEventAttach          `json:"event"`
	Group       GroupsGroupAttach          `json:"group"`
	Graffiti    WallGraffiti               `json:"graffiti"`
	Link        BaseLink                   `json:"link"`
	Market      MarketMarketItem           `json:"market"`
	MarketAlbum MarketMarketAlbum          `json:"market_album"`
	Note        WallAttachedNote           `json:"note"`
	Page        PagesWikipageFull          `json:"page"`
	Photo       PhotosPhoto                `json:"photo"`
	PhotosList  []string                   `json:"photos_list"`
	Poll        PollsPoll                  `json:"poll"`
	PostedPhoto WallPostedPhoto            `json:"posted_photo"`
	Type        WallWallpostAttachmentType `json:"type"`
	Video       VideoVideo                 `json:"video"`
}

// Attachment type
type WallWallpostAttachmentType string

const (
	WallWallpostAttachmentTypePhoto             WallWallpostAttachmentType = "photo"
	WallWallpostAttachmentTypePostedPhoto       WallWallpostAttachmentType = "posted_photo"
	WallWallpostAttachmentTypeAudio             WallWallpostAttachmentType = "audio"
	WallWallpostAttachmentTypeVideo             WallWallpostAttachmentType = "video"
	WallWallpostAttachmentTypeDoc               WallWallpostAttachmentType = "doc"
	WallWallpostAttachmentTypeLink              WallWallpostAttachmentType = "link"
	WallWallpostAttachmentTypeGraffiti          WallWallpostAttachmentType = "graffiti"
	WallWallpostAttachmentTypeNote              WallWallpostAttachmentType = "note"
	WallWallpostAttachmentTypeApp               WallWallpostAttachmentType = "app"
	WallWallpostAttachmentTypePoll              WallWallpostAttachmentType = "poll"
	WallWallpostAttachmentTypePage              WallWallpostAttachmentType = "page"
	WallWallpostAttachmentTypeAlbum             WallWallpostAttachmentType = "album"
	WallWallpostAttachmentTypePhotosList        WallWallpostAttachmentType = "photos_list"
	WallWallpostAttachmentTypeMarketMarketAlbum WallWallpostAttachmentType = "market_market_album"
	WallWallpostAttachmentTypeMarket            WallWallpostAttachmentType = "market"
	WallWallpostAttachmentTypeEvent             WallWallpostAttachmentType = "event"
)

// allof wall_wallpost_full
type WallWallpostFull struct {
	*WallCarouselBase `json:"wall_carousel_base,omitempty"`
	*WallWallpost     `json:"wall_wallpost,omitempty"`
	CopyHistory       *[]WallWallpost   `json:"copy_history,omitempty"`
	CanEdit           *BaseBoolInt      `json:"can_edit,omitempty"`
	CreatedBy         *int64            `json:"created_by,omitempty"`
	CanDelete         *BaseBoolInt      `json:"can_delete,omitempty"`
	CanPin            *BaseBoolInt      `json:"can_pin,omitempty"`
	IsPinned          *int64            `json:"is_pinned,omitempty"`
	Comments          *BaseCommentsInfo `json:"comments,omitempty"`
	MarkedAsAds       *BaseBoolInt      `json:"marked_as_ads,omitempty"`
	ShortTextRate     *float64          `json:"short_text_rate,omitempty"`
}

type WallWallpostToID struct {
	Attachments []WallWallpostAttachment `json:"attachments"`
	Comments    BaseCommentsInfo         `json:"comments"`
	CopyOwnerID int64                    `json:"copy_owner_id"` // ID of the source post owner
	CopyPostID  int64                    `json:"copy_post_id"`  // ID of the source post
	Date        int64                    `json:"date"`          // Date of publishing in Unixtime
	FromID      int64                    `json:"from_id"`       // Post author ID
	Geo         WallGeo                  `json:"geo"`
	ID          int64                    `json:"id"`          // Post ID
	IsFavorite  bool                     `json:"is_favorite"` // Information whether the post in favorites list
	Likes       BaseLikesInfo            `json:"likes"`
	PostID      int64                    `json:"post_id"` // wall post ID (if comment)
	PostSource  WallPostSource           `json:"post_source"`
	PostType    WallPostType             `json:"post_type"`
	Reposts     BaseRepostsInfo          `json:"reposts"`
	SignerID    int64                    `json:"signer_id"` // Post signer ID
	Text        string                   `json:"text"`      // Post text
	ToID        int64                    `json:"to_id"`     // Wall owner's ID
}

type WidgetsCommentMedia struct {
	ItemID   int64                   `json:"item_id"`   // Media item ID
	OwnerID  int64                   `json:"owner_id"`  // Media owner's ID
	ThumbSrc string                  `json:"thumb_src"` // URL of the preview image (type=photo only)
	Type     WidgetsCommentMediaType `json:"type"`
}

// Media type
type WidgetsCommentMediaType string

const (
	WidgetsCommentMediaTypeAudio WidgetsCommentMediaType = "audio"
	WidgetsCommentMediaTypePhoto WidgetsCommentMediaType = "photo"
	WidgetsCommentMediaTypeVideo WidgetsCommentMediaType = "video"
)

type WidgetsCommentReplies struct {
	CanPost BaseBoolInt                 `json:"can_post"` // Information whether current user can comment the post
	Count   int64                       `json:"count"`    // Comments number
	Replies []WidgetsCommentRepliesItem `json:"replies"`
}

type WidgetsCommentRepliesItem struct {
	Cid   int64              `json:"cid"`  // Comment ID
	Date  int64              `json:"date"` // Date when the comment has been added in Unixtime
	Likes WidgetsWidgetLikes `json:"likes"`
	Text  string             `json:"text"` // Comment text
	Uid   int64              `json:"uid"`  // User ID
	User  UsersUserFull      `json:"user"`
}

type WidgetsWidgetComment struct {
	Attachments []WallCommentAttachment `json:"attachments"`
	CanDelete   BaseBoolInt             `json:"can_delete"` // Information whether current user can delete the comment
	Comments    WidgetsCommentReplies   `json:"comments"`
	Date        int64                   `json:"date"`    // Date when the comment has been added in Unixtime
	FromID      int64                   `json:"from_id"` // Comment author ID
	ID          int64                   `json:"id"`      // Comment ID
	Likes       BaseLikesInfo           `json:"likes"`
	Media       WidgetsCommentMedia     `json:"media"`
	PostSource  WallPostSource          `json:"post_source"`
	PostType    int64                   `json:"post_type"` // Post type
	Reposts     BaseRepostsInfo         `json:"reposts"`
	Text        string                  `json:"text"`  // Comment text
	ToID        int64                   `json:"to_id"` // Wall owner
	User        UsersUserFull           `json:"user"`
}

type WidgetsWidgetLikes struct {
	Count int64 `json:"count"` // Likes number
}

type WidgetsWidgetPage struct {
	Comments    BaseObjectCount `json:"comments"`
	Date        int64           `json:"date"`        // Date when widgets on the page has been initialized firstly in Unixtime
	Description string          `json:"description"` // Page description
	ID          int64           `json:"id"`          // Page ID
	Likes       BaseObjectCount `json:"likes"`
	PageID      string          `json:"page_id"` // page_id parameter value
	Photo       string          `json:"photo"`   // URL of the preview image
	Title       string          `json:"title"`   // Page title
	URL         string          `json:"url"`     // Page absolute URL
}
