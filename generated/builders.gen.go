// Code generated by vkgen; DO NOT EDIT.

package generated

// AccountBanBuilder builder.
//
// https://vk.com/dev/account.ban
type AccountBanBuilder struct {
	api.Params
}

// AccountBanBuilder func.
func NewAccountBanBuilder() *AccountBanBuilder {
	return &AccountBanBuilder{api.Params{}}
}

func (b *AccountBanBuilder) OwnerID(v int64) *AccountBanBuilder {
	b.Params["owner_id"] = v
	return b
}

// AccountChangePasswordBuilder builder.
//
// Changes a user password after access is successfully restored with the [vk.com/dev/auth.restore|auth.restore] method.
//
// https://vk.com/dev/account.changePassword
type AccountChangePasswordBuilder struct {
	api.Params
}

// AccountChangePasswordBuilder func.
func NewAccountChangePasswordBuilder() *AccountChangePasswordBuilder {
	return &AccountChangePasswordBuilder{api.Params{}}
}

// Session id received after the [vk.com/dev/auth.restore|auth.restore] method is executed. (If the password is changed right after the access was restored)
func (b *AccountChangePasswordBuilder) RestoreSid(v string) *AccountChangePasswordBuilder {
	b.Params["restore_sid"] = v
	return b
}

// Hash received after a successful OAuth authorization with a code got by SMS. (If the password is changed right after the access was restored)
func (b *AccountChangePasswordBuilder) ChangePasswordHash(v string) *AccountChangePasswordBuilder {
	b.Params["change_password_hash"] = v
	return b
}

// Current user password.
func (b *AccountChangePasswordBuilder) OldPassword(v string) *AccountChangePasswordBuilder {
	b.Params["old_password"] = v
	return b
}

// New password that will be set as a current
func (b *AccountChangePasswordBuilder) NewPassword(v string) *AccountChangePasswordBuilder {
	b.Params["new_password"] = v
	return b
}

// AccountGetActiveOffersBuilder builder.
//
// Returns a list of active ads (offers) which executed by the user will bring him/her respective number of votes to his balance in the application.
//
// https://vk.com/dev/account.getActiveOffers
type AccountGetActiveOffersBuilder struct {
	api.Params
}

// AccountGetActiveOffersBuilder func.
func NewAccountGetActiveOffersBuilder() *AccountGetActiveOffersBuilder {
	return &AccountGetActiveOffersBuilder{api.Params{}}
}

func (b *AccountGetActiveOffersBuilder) Offset(v int64) *AccountGetActiveOffersBuilder {
	b.Params["offset"] = v
	return b
}

// Number of results to return.
func (b *AccountGetActiveOffersBuilder) Count(v int64) *AccountGetActiveOffersBuilder {
	b.Params["count"] = v
	return b
}

// AccountGetAppPermissionsBuilder builder.
//
// Gets settings of the user in this application.
//
// https://vk.com/dev/account.getAppPermissions
type AccountGetAppPermissionsBuilder struct {
	api.Params
}

// AccountGetAppPermissionsBuilder func.
func NewAccountGetAppPermissionsBuilder() *AccountGetAppPermissionsBuilder {
	return &AccountGetAppPermissionsBuilder{api.Params{}}
}

// User ID whose settings information shall be got. By default: current user.
func (b *AccountGetAppPermissionsBuilder) UserID(v int64) *AccountGetAppPermissionsBuilder {
	b.Params["user_id"] = v
	return b
}

// AccountGetBannedBuilder builder.
//
// Returns a user's blacklist.
//
// https://vk.com/dev/account.getBanned
type AccountGetBannedBuilder struct {
	api.Params
}

// AccountGetBannedBuilder func.
func NewAccountGetBannedBuilder() *AccountGetBannedBuilder {
	return &AccountGetBannedBuilder{api.Params{}}
}

// Offset needed to return a specific subset of results.
func (b *AccountGetBannedBuilder) Offset(v int64) *AccountGetBannedBuilder {
	b.Params["offset"] = v
	return b
}

// Number of results to return.
func (b *AccountGetBannedBuilder) Count(v int64) *AccountGetBannedBuilder {
	b.Params["count"] = v
	return b
}

// AccountGetCountersBuilder builder.
//
// Returns non-null values of user counters.
//
// https://vk.com/dev/account.getCounters
type AccountGetCountersBuilder struct {
	api.Params
}

// AccountGetCountersBuilder func.
func NewAccountGetCountersBuilder() *AccountGetCountersBuilder {
	return &AccountGetCountersBuilder{api.Params{}}
}

// Counters to be returned.
func (b *AccountGetCountersBuilder) Filter(v []string) *AccountGetCountersBuilder {
	b.Params["filter"] = v
	return b
}

// AccountGetInfoBuilder builder.
//
// Returns current account info.
//
// https://vk.com/dev/account.getInfo
type AccountGetInfoBuilder struct {
	api.Params
}

// AccountGetInfoBuilder func.
func NewAccountGetInfoBuilder() *AccountGetInfoBuilder {
	return &AccountGetInfoBuilder{api.Params{}}
}

// Fields to return. Possible values: *'country' — user country,, *'https_required' — is "HTTPS only" option enabled,, *'own_posts_default' — is "Show my posts only" option is enabled,, *'no_wall_replies' — are wall replies disabled or not,, *'intro' — is intro passed by user or not,, *'lang' — user language. By default: all.
func (b *AccountGetInfoBuilder) Fields(v []string) *AccountGetInfoBuilder {
	b.Params["fields"] = v
	return b
}

// AccountGetProfileInfoBuilder builder.
//
// Returns the current account info.
//
// https://vk.com/dev/account.getProfileInfo
type AccountGetProfileInfoBuilder struct {
	api.Params
}

// AccountGetProfileInfoBuilder func.
func NewAccountGetProfileInfoBuilder() *AccountGetProfileInfoBuilder {
	return &AccountGetProfileInfoBuilder{api.Params{}}
}

// AccountGetPushSettingsBuilder builder.
//
// Gets settings of push notifications.
//
// https://vk.com/dev/account.getPushSettings
type AccountGetPushSettingsBuilder struct {
	api.Params
}

// AccountGetPushSettingsBuilder func.
func NewAccountGetPushSettingsBuilder() *AccountGetPushSettingsBuilder {
	return &AccountGetPushSettingsBuilder{api.Params{}}
}

// Unique device ID.
func (b *AccountGetPushSettingsBuilder) DeviceID(v string) *AccountGetPushSettingsBuilder {
	b.Params["device_id"] = v
	return b
}

// AccountRegisterDeviceBuilder builder.
//
// Subscribes an iOS/Android/Windows Phone-based device to receive push notifications
//
// https://vk.com/dev/account.registerDevice
type AccountRegisterDeviceBuilder struct {
	api.Params
}

// AccountRegisterDeviceBuilder func.
func NewAccountRegisterDeviceBuilder() *AccountRegisterDeviceBuilder {
	return &AccountRegisterDeviceBuilder{api.Params{}}
}

// Device token used to send notifications. (for mpns, the token shall be URL for sending of notifications)
func (b *AccountRegisterDeviceBuilder) Token(v string) *AccountRegisterDeviceBuilder {
	b.Params["token"] = v
	return b
}

// String name of device model.
func (b *AccountRegisterDeviceBuilder) DeviceModel(v string) *AccountRegisterDeviceBuilder {
	b.Params["device_model"] = v
	return b
}

// Device year.
func (b *AccountRegisterDeviceBuilder) DeviceYear(v int64) *AccountRegisterDeviceBuilder {
	b.Params["device_year"] = v
	return b
}

// Unique device ID.
func (b *AccountRegisterDeviceBuilder) DeviceID(v string) *AccountRegisterDeviceBuilder {
	b.Params["device_id"] = v
	return b
}

// String version of device operating system.
func (b *AccountRegisterDeviceBuilder) SystemVersion(v string) *AccountRegisterDeviceBuilder {
	b.Params["system_version"] = v
	return b
}

// Push settings in a [vk.com/dev/push_settings|special format].
func (b *AccountRegisterDeviceBuilder) Settings(v string) *AccountRegisterDeviceBuilder {
	b.Params["settings"] = v
	return b
}

func (b *AccountRegisterDeviceBuilder) Sandbox(v bool) *AccountRegisterDeviceBuilder {
	b.Params["sandbox"] = v
	return b
}

// AccountSaveProfileInfoBuilder builder.
//
// Edits current profile info.
//
// https://vk.com/dev/account.saveProfileInfo
type AccountSaveProfileInfoBuilder struct {
	api.Params
}

// AccountSaveProfileInfoBuilder func.
func NewAccountSaveProfileInfoBuilder() *AccountSaveProfileInfoBuilder {
	return &AccountSaveProfileInfoBuilder{api.Params{}}
}

// User first name.
func (b *AccountSaveProfileInfoBuilder) FirstName(v string) *AccountSaveProfileInfoBuilder {
	b.Params["first_name"] = v
	return b
}

// User last name.
func (b *AccountSaveProfileInfoBuilder) LastName(v string) *AccountSaveProfileInfoBuilder {
	b.Params["last_name"] = v
	return b
}

// User maiden name (female only)
func (b *AccountSaveProfileInfoBuilder) MaidenName(v string) *AccountSaveProfileInfoBuilder {
	b.Params["maiden_name"] = v
	return b
}

// User screen name.
func (b *AccountSaveProfileInfoBuilder) ScreenName(v string) *AccountSaveProfileInfoBuilder {
	b.Params["screen_name"] = v
	return b
}

// ID of the name change request to be canceled. If this parameter is sent, all the others are ignored.
func (b *AccountSaveProfileInfoBuilder) CancelRequestID(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["cancel_request_id"] = v
	return b
}

// User sex. Possible values: , * '1' – female,, * '2' – male.
func (b *AccountSaveProfileInfoBuilder) Sex(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["sex"] = v
	return b
}

// User relationship status. Possible values: , * '1' – single,, * '2' – in a relationship,, * '3' – engaged,, * '4' – married,, * '5' – it's complicated,, * '6' – actively searching,, * '7' – in love,, * '0' – not specified.
func (b *AccountSaveProfileInfoBuilder) Relation(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["relation"] = v
	return b
}

// ID of the relationship partner.
func (b *AccountSaveProfileInfoBuilder) RelationPartnerID(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["relation_partner_id"] = v
	return b
}

// User birth date, format: DD.MM.YYYY.
func (b *AccountSaveProfileInfoBuilder) Bdate(v string) *AccountSaveProfileInfoBuilder {
	b.Params["bdate"] = v
	return b
}

// Birth date visibility. Returned values: , * '1' – show birth date,, * '2' – show only month and day,, * '0' – hide birth date.
func (b *AccountSaveProfileInfoBuilder) BdateVisibility(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["bdate_visibility"] = v
	return b
}

// User home town.
func (b *AccountSaveProfileInfoBuilder) HomeTown(v string) *AccountSaveProfileInfoBuilder {
	b.Params["home_town"] = v
	return b
}

// User country.
func (b *AccountSaveProfileInfoBuilder) CountryID(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["country_id"] = v
	return b
}

// User city.
func (b *AccountSaveProfileInfoBuilder) CityID(v int64) *AccountSaveProfileInfoBuilder {
	b.Params["city_id"] = v
	return b
}

// Status text.
func (b *AccountSaveProfileInfoBuilder) Status(v string) *AccountSaveProfileInfoBuilder {
	b.Params["status"] = v
	return b
}

// AccountSetInfoBuilder builder.
//
// Allows to edit the current account info.
//
// https://vk.com/dev/account.setInfo
type AccountSetInfoBuilder struct {
	api.Params
}

// AccountSetInfoBuilder func.
func NewAccountSetInfoBuilder() *AccountSetInfoBuilder {
	return &AccountSetInfoBuilder{api.Params{}}
}

// Setting name.
func (b *AccountSetInfoBuilder) Name(v string) *AccountSetInfoBuilder {
	b.Params["name"] = v
	return b
}

// Setting value.
func (b *AccountSetInfoBuilder) Value(v string) *AccountSetInfoBuilder {
	b.Params["value"] = v
	return b
}

// AccountSetNameInMenuBuilder builder.
//
// Sets an application screen name (up to 17 characters), that is shown to the user in the left menu.
//
// https://vk.com/dev/account.setNameInMenu
type AccountSetNameInMenuBuilder struct {
	api.Params
}

// AccountSetNameInMenuBuilder func.
func NewAccountSetNameInMenuBuilder() *AccountSetNameInMenuBuilder {
	return &AccountSetNameInMenuBuilder{api.Params{}}
}

// User ID.
func (b *AccountSetNameInMenuBuilder) UserID(v int64) *AccountSetNameInMenuBuilder {
	b.Params["user_id"] = v
	return b
}

// Application screen name.
func (b *AccountSetNameInMenuBuilder) Name(v string) *AccountSetNameInMenuBuilder {
	b.Params["name"] = v
	return b
}

// AccountSetOfflineBuilder builder.
//
// Marks a current user as offline.
//
// https://vk.com/dev/account.setOffline
type AccountSetOfflineBuilder struct {
	api.Params
}

// AccountSetOfflineBuilder func.
func NewAccountSetOfflineBuilder() *AccountSetOfflineBuilder {
	return &AccountSetOfflineBuilder{api.Params{}}
}

// AccountSetOnlineBuilder builder.
//
// Marks the current user as online for 15 minutes.
//
// https://vk.com/dev/account.setOnline
type AccountSetOnlineBuilder struct {
	api.Params
}

// AccountSetOnlineBuilder func.
func NewAccountSetOnlineBuilder() *AccountSetOnlineBuilder {
	return &AccountSetOnlineBuilder{api.Params{}}
}

// '1' if videocalls are available for current device.
func (b *AccountSetOnlineBuilder) Voip(v bool) *AccountSetOnlineBuilder {
	b.Params["voip"] = v
	return b
}

// AccountSetPushSettingsBuilder builder.
//
// Change push settings.
//
// https://vk.com/dev/account.setPushSettings
type AccountSetPushSettingsBuilder struct {
	api.Params
}

// AccountSetPushSettingsBuilder func.
func NewAccountSetPushSettingsBuilder() *AccountSetPushSettingsBuilder {
	return &AccountSetPushSettingsBuilder{api.Params{}}
}

// Unique device ID.
func (b *AccountSetPushSettingsBuilder) DeviceID(v string) *AccountSetPushSettingsBuilder {
	b.Params["device_id"] = v
	return b
}

// Push settings in a [vk.com/dev/push_settings|special format].
func (b *AccountSetPushSettingsBuilder) Settings(v string) *AccountSetPushSettingsBuilder {
	b.Params["settings"] = v
	return b
}

// Notification key.
func (b *AccountSetPushSettingsBuilder) Key(v string) *AccountSetPushSettingsBuilder {
	b.Params["key"] = v
	return b
}

// New value for the key in a [vk.com/dev/push_settings|special format].
func (b *AccountSetPushSettingsBuilder) Value(v []string) *AccountSetPushSettingsBuilder {
	b.Params["value"] = v
	return b
}

// AccountSetSilenceModeBuilder builder.
//
// Mutes push notifications for the set period of time.
//
// https://vk.com/dev/account.setSilenceMode
type AccountSetSilenceModeBuilder struct {
	api.Params
}

// AccountSetSilenceModeBuilder func.
func NewAccountSetSilenceModeBuilder() *AccountSetSilenceModeBuilder {
	return &AccountSetSilenceModeBuilder{api.Params{}}
}

// Unique device ID.
func (b *AccountSetSilenceModeBuilder) DeviceID(v string) *AccountSetSilenceModeBuilder {
	b.Params["device_id"] = v
	return b
}

// Time in seconds for what notifications should be disabled. '-1' to disable forever.
func (b *AccountSetSilenceModeBuilder) Time(v int64) *AccountSetSilenceModeBuilder {
	b.Params["time"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. "
func (b *AccountSetSilenceModeBuilder) PeerID(v int64) *AccountSetSilenceModeBuilder {
	b.Params["peer_id"] = v
	return b
}

// '1' — to enable sound in this dialog, '0' — to disable sound. Only if 'peer_id' contains user or community ID.
func (b *AccountSetSilenceModeBuilder) Sound(v int64) *AccountSetSilenceModeBuilder {
	b.Params["sound"] = v
	return b
}

// AccountUnbanBuilder builder.
//
// https://vk.com/dev/account.unban
type AccountUnbanBuilder struct {
	api.Params
}

// AccountUnbanBuilder func.
func NewAccountUnbanBuilder() *AccountUnbanBuilder {
	return &AccountUnbanBuilder{api.Params{}}
}

func (b *AccountUnbanBuilder) OwnerID(v int64) *AccountUnbanBuilder {
	b.Params["owner_id"] = v
	return b
}

// AccountUnregisterDeviceBuilder builder.
//
// Unsubscribes a device from push notifications.
//
// https://vk.com/dev/account.unregisterDevice
type AccountUnregisterDeviceBuilder struct {
	api.Params
}

// AccountUnregisterDeviceBuilder func.
func NewAccountUnregisterDeviceBuilder() *AccountUnregisterDeviceBuilder {
	return &AccountUnregisterDeviceBuilder{api.Params{}}
}

// Unique device ID.
func (b *AccountUnregisterDeviceBuilder) DeviceID(v string) *AccountUnregisterDeviceBuilder {
	b.Params["device_id"] = v
	return b
}

func (b *AccountUnregisterDeviceBuilder) Sandbox(v bool) *AccountUnregisterDeviceBuilder {
	b.Params["sandbox"] = v
	return b
}

// AdsAddOfficeUsersBuilder builder.
//
// Adds managers and/or supervisors to advertising account.
//
// https://vk.com/dev/ads.addOfficeUsers
type AdsAddOfficeUsersBuilder struct {
	api.Params
}

// AdsAddOfficeUsersBuilder func.
func NewAdsAddOfficeUsersBuilder() *AdsAddOfficeUsersBuilder {
	return &AdsAddOfficeUsersBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsAddOfficeUsersBuilder) AccountID(v int64) *AdsAddOfficeUsersBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe added managers. Description of 'user_specification' objects see below.
func (b *AdsAddOfficeUsersBuilder) Data(v string) *AdsAddOfficeUsersBuilder {
	b.Params["data"] = v
	return b
}

// AdsCheckLinkBuilder builder.
//
// Allows to check the ad link.
//
// https://vk.com/dev/ads.checkLink
type AdsCheckLinkBuilder struct {
	api.Params
}

// AdsCheckLinkBuilder func.
func NewAdsCheckLinkBuilder() *AdsCheckLinkBuilder {
	return &AdsCheckLinkBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsCheckLinkBuilder) AccountID(v int64) *AdsCheckLinkBuilder {
	b.Params["account_id"] = v
	return b
}

// Object type: *'community' — community,, *'post' — community post,, *'application' — VK application,, *'video' — video,, *'site' — external site.
func (b *AdsCheckLinkBuilder) LinkType(v string) *AdsCheckLinkBuilder {
	b.Params["link_type"] = v
	return b
}

// Object URL.
func (b *AdsCheckLinkBuilder) LinkURL(v string) *AdsCheckLinkBuilder {
	b.Params["link_url"] = v
	return b
}

// Campaign ID
func (b *AdsCheckLinkBuilder) CampaignID(v int64) *AdsCheckLinkBuilder {
	b.Params["campaign_id"] = v
	return b
}

// AdsCreateAdsBuilder builder.
//
// Creates ads.
//
// https://vk.com/dev/ads.createAds
type AdsCreateAdsBuilder struct {
	api.Params
}

// AdsCreateAdsBuilder func.
func NewAdsCreateAdsBuilder() *AdsCreateAdsBuilder {
	return &AdsCreateAdsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsCreateAdsBuilder) AccountID(v int64) *AdsCreateAdsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe created ads. Description of 'ad_specification' objects see below.
func (b *AdsCreateAdsBuilder) Data(v string) *AdsCreateAdsBuilder {
	b.Params["data"] = v
	return b
}

// AdsCreateCampaignsBuilder builder.
//
// Creates advertising campaigns.
//
// https://vk.com/dev/ads.createCampaigns
type AdsCreateCampaignsBuilder struct {
	api.Params
}

// AdsCreateCampaignsBuilder func.
func NewAdsCreateCampaignsBuilder() *AdsCreateCampaignsBuilder {
	return &AdsCreateCampaignsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsCreateCampaignsBuilder) AccountID(v int64) *AdsCreateCampaignsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe created campaigns. Description of 'campaign_specification' objects see below.
func (b *AdsCreateCampaignsBuilder) Data(v string) *AdsCreateCampaignsBuilder {
	b.Params["data"] = v
	return b
}

// AdsCreateClientsBuilder builder.
//
// Creates clients of an advertising agency.
//
// https://vk.com/dev/ads.createClients
type AdsCreateClientsBuilder struct {
	api.Params
}

// AdsCreateClientsBuilder func.
func NewAdsCreateClientsBuilder() *AdsCreateClientsBuilder {
	return &AdsCreateClientsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsCreateClientsBuilder) AccountID(v int64) *AdsCreateClientsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe created campaigns. Description of 'client_specification' objects see below.
func (b *AdsCreateClientsBuilder) Data(v string) *AdsCreateClientsBuilder {
	b.Params["data"] = v
	return b
}

// AdsCreateTargetGroupBuilder builder.
//
// Creates a group to re-target ads for users who visited advertiser's site (viewed information about the product, registered, etc.).
//
// https://vk.com/dev/ads.createTargetGroup
type AdsCreateTargetGroupBuilder struct {
	api.Params
}

// AdsCreateTargetGroupBuilder func.
func NewAdsCreateTargetGroupBuilder() *AdsCreateTargetGroupBuilder {
	return &AdsCreateTargetGroupBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsCreateTargetGroupBuilder) AccountID(v int64) *AdsCreateTargetGroupBuilder {
	b.Params["account_id"] = v
	return b
}

// 'Only for advertising agencies.', ID of the client with the advertising account where the group will be created.
func (b *AdsCreateTargetGroupBuilder) ClientID(v int64) *AdsCreateTargetGroupBuilder {
	b.Params["client_id"] = v
	return b
}

// Name of the target group — a string up to 64 characters long.
func (b *AdsCreateTargetGroupBuilder) Name(v string) *AdsCreateTargetGroupBuilder {
	b.Params["name"] = v
	return b
}

// 'For groups with auditory created with pixel code only.', , Number of days after that users will be automatically removed from the group.
func (b *AdsCreateTargetGroupBuilder) Lifetime(v int64) *AdsCreateTargetGroupBuilder {
	b.Params["lifetime"] = v
	return b
}

func (b *AdsCreateTargetGroupBuilder) TargetPixelID(v int64) *AdsCreateTargetGroupBuilder {
	b.Params["target_pixel_id"] = v
	return b
}

func (b *AdsCreateTargetGroupBuilder) TargetPixelRules(v string) *AdsCreateTargetGroupBuilder {
	b.Params["target_pixel_rules"] = v
	return b
}

// AdsDeleteAdsBuilder builder.
//
// Archives ads.
//
// https://vk.com/dev/ads.deleteAds
type AdsDeleteAdsBuilder struct {
	api.Params
}

// AdsDeleteAdsBuilder func.
func NewAdsDeleteAdsBuilder() *AdsDeleteAdsBuilder {
	return &AdsDeleteAdsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsDeleteAdsBuilder) AccountID(v int64) *AdsDeleteAdsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array with ad IDs.
func (b *AdsDeleteAdsBuilder) IDs(v string) *AdsDeleteAdsBuilder {
	b.Params["ids"] = v
	return b
}

// AdsDeleteCampaignsBuilder builder.
//
// Archives advertising campaigns.
//
// https://vk.com/dev/ads.deleteCampaigns
type AdsDeleteCampaignsBuilder struct {
	api.Params
}

// AdsDeleteCampaignsBuilder func.
func NewAdsDeleteCampaignsBuilder() *AdsDeleteCampaignsBuilder {
	return &AdsDeleteCampaignsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsDeleteCampaignsBuilder) AccountID(v int64) *AdsDeleteCampaignsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array with IDs of deleted campaigns.
func (b *AdsDeleteCampaignsBuilder) IDs(v string) *AdsDeleteCampaignsBuilder {
	b.Params["ids"] = v
	return b
}

// AdsDeleteClientsBuilder builder.
//
// Archives clients of an advertising agency.
//
// https://vk.com/dev/ads.deleteClients
type AdsDeleteClientsBuilder struct {
	api.Params
}

// AdsDeleteClientsBuilder func.
func NewAdsDeleteClientsBuilder() *AdsDeleteClientsBuilder {
	return &AdsDeleteClientsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsDeleteClientsBuilder) AccountID(v int64) *AdsDeleteClientsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array with IDs of deleted clients.
func (b *AdsDeleteClientsBuilder) IDs(v string) *AdsDeleteClientsBuilder {
	b.Params["ids"] = v
	return b
}

// AdsDeleteTargetGroupBuilder builder.
//
// Deletes a retarget group.
//
// https://vk.com/dev/ads.deleteTargetGroup
type AdsDeleteTargetGroupBuilder struct {
	api.Params
}

// AdsDeleteTargetGroupBuilder func.
func NewAdsDeleteTargetGroupBuilder() *AdsDeleteTargetGroupBuilder {
	return &AdsDeleteTargetGroupBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsDeleteTargetGroupBuilder) AccountID(v int64) *AdsDeleteTargetGroupBuilder {
	b.Params["account_id"] = v
	return b
}

// 'Only for advertising agencies.' , ID of the client with the advertising account where the group will be created.
func (b *AdsDeleteTargetGroupBuilder) ClientID(v int64) *AdsDeleteTargetGroupBuilder {
	b.Params["client_id"] = v
	return b
}

// Group ID.
func (b *AdsDeleteTargetGroupBuilder) TargetGroupID(v int64) *AdsDeleteTargetGroupBuilder {
	b.Params["target_group_id"] = v
	return b
}

// AdsGetAccountsBuilder builder.
//
// Returns a list of advertising accounts.
//
// https://vk.com/dev/ads.getAccounts
type AdsGetAccountsBuilder struct {
	api.Params
}

// AdsGetAccountsBuilder func.
func NewAdsGetAccountsBuilder() *AdsGetAccountsBuilder {
	return &AdsGetAccountsBuilder{api.Params{}}
}

// AdsGetAdsBuilder builder.
//
// Returns number of ads.
//
// https://vk.com/dev/ads.getAds
type AdsGetAdsBuilder struct {
	api.Params
}

// AdsGetAdsBuilder func.
func NewAdsGetAdsBuilder() *AdsGetAdsBuilder {
	return &AdsGetAdsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetAdsBuilder) AccountID(v int64) *AdsGetAdsBuilder {
	b.Params["account_id"] = v
	return b
}

// Filter by ads. Serialized JSON array with ad IDs. If the parameter is null, all ads will be shown.
func (b *AdsGetAdsBuilder) AdIDs(v string) *AdsGetAdsBuilder {
	b.Params["ad_ids"] = v
	return b
}

// Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is null, ads of all campaigns will be shown.
func (b *AdsGetAdsBuilder) CampaignIDs(v string) *AdsGetAdsBuilder {
	b.Params["campaign_ids"] = v
	return b
}

// 'Available and required for advertising agencies.' ID of the client ads are retrieved from.
func (b *AdsGetAdsBuilder) ClientID(v int64) *AdsGetAdsBuilder {
	b.Params["client_id"] = v
	return b
}

// Flag that specifies whether archived ads shall be shown: *0 — show only active ads,, *1 — show all ads.
func (b *AdsGetAdsBuilder) IncludeDeleted(v bool) *AdsGetAdsBuilder {
	b.Params["include_deleted"] = v
	return b
}

// Flag that specifies whether to show only archived ads: *0 — show all ads,, *1 — show only archived ads. Available when include_deleted flag is *1
func (b *AdsGetAdsBuilder) OnlyDeleted(v bool) *AdsGetAdsBuilder {
	b.Params["only_deleted"] = v
	return b
}

// Limit of number of returned ads. Used only if ad_ids parameter is null, and 'campaign_ids' parameter contains ID of only one campaign.
func (b *AdsGetAdsBuilder) Limit(v int64) *AdsGetAdsBuilder {
	b.Params["limit"] = v
	return b
}

// Offset. Used in the same cases as 'limit' parameter.
func (b *AdsGetAdsBuilder) Offset(v int64) *AdsGetAdsBuilder {
	b.Params["offset"] = v
	return b
}

// AdsGetAdsLayoutBuilder builder.
//
// Returns descriptions of ad layouts.
//
// https://vk.com/dev/ads.getAdsLayout
type AdsGetAdsLayoutBuilder struct {
	api.Params
}

// AdsGetAdsLayoutBuilder func.
func NewAdsGetAdsLayoutBuilder() *AdsGetAdsLayoutBuilder {
	return &AdsGetAdsLayoutBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetAdsLayoutBuilder) AccountID(v int64) *AdsGetAdsLayoutBuilder {
	b.Params["account_id"] = v
	return b
}

// Filter by ads. Serialized JSON array with ad IDs. If the parameter is null, all ads will be shown.
func (b *AdsGetAdsLayoutBuilder) AdIDs(v string) *AdsGetAdsLayoutBuilder {
	b.Params["ad_ids"] = v
	return b
}

// Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is null, ads of all campaigns will be shown.
func (b *AdsGetAdsLayoutBuilder) CampaignIDs(v string) *AdsGetAdsLayoutBuilder {
	b.Params["campaign_ids"] = v
	return b
}

// 'For advertising agencies.' ID of the client ads are retrieved from.
func (b *AdsGetAdsLayoutBuilder) ClientID(v int64) *AdsGetAdsLayoutBuilder {
	b.Params["client_id"] = v
	return b
}

// Flag that specifies whether archived ads shall be shown. *0 — show only active ads,, *1 — show all ads.
func (b *AdsGetAdsLayoutBuilder) IncludeDeleted(v bool) *AdsGetAdsLayoutBuilder {
	b.Params["include_deleted"] = v
	return b
}

// Limit of number of returned ads. Used only if 'ad_ids' parameter is null, and 'campaign_ids' parameter contains ID of only one campaign.
func (b *AdsGetAdsLayoutBuilder) Limit(v int64) *AdsGetAdsLayoutBuilder {
	b.Params["limit"] = v
	return b
}

// Offset. Used in the same cases as 'limit' parameter.
func (b *AdsGetAdsLayoutBuilder) Offset(v int64) *AdsGetAdsLayoutBuilder {
	b.Params["offset"] = v
	return b
}

// AdsGetAdsTargetingBuilder builder.
//
// Returns ad targeting parameters.
//
// https://vk.com/dev/ads.getAdsTargeting
type AdsGetAdsTargetingBuilder struct {
	api.Params
}

// AdsGetAdsTargetingBuilder func.
func NewAdsGetAdsTargetingBuilder() *AdsGetAdsTargetingBuilder {
	return &AdsGetAdsTargetingBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetAdsTargetingBuilder) AccountID(v int64) *AdsGetAdsTargetingBuilder {
	b.Params["account_id"] = v
	return b
}

// Filter by ads. Serialized JSON array with ad IDs. If the parameter is null, all ads will be shown.
func (b *AdsGetAdsTargetingBuilder) AdIDs(v string) *AdsGetAdsTargetingBuilder {
	b.Params["ad_ids"] = v
	return b
}

// Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is null, ads of all campaigns will be shown.
func (b *AdsGetAdsTargetingBuilder) CampaignIDs(v string) *AdsGetAdsTargetingBuilder {
	b.Params["campaign_ids"] = v
	return b
}

// 'For advertising agencies.' ID of the client ads are retrieved from.
func (b *AdsGetAdsTargetingBuilder) ClientID(v int64) *AdsGetAdsTargetingBuilder {
	b.Params["client_id"] = v
	return b
}

// flag that specifies whether archived ads shall be shown: *0 — show only active ads,, *1 — show all ads.
func (b *AdsGetAdsTargetingBuilder) IncludeDeleted(v bool) *AdsGetAdsTargetingBuilder {
	b.Params["include_deleted"] = v
	return b
}

// Limit of number of returned ads. Used only if 'ad_ids' parameter is null, and 'campaign_ids' parameter contains ID of only one campaign.
func (b *AdsGetAdsTargetingBuilder) Limit(v int64) *AdsGetAdsTargetingBuilder {
	b.Params["limit"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *AdsGetAdsTargetingBuilder) Offset(v int64) *AdsGetAdsTargetingBuilder {
	b.Params["offset"] = v
	return b
}

// AdsGetBudgetBuilder builder.
//
// Returns current budget of the advertising account.
//
// https://vk.com/dev/ads.getBudget
type AdsGetBudgetBuilder struct {
	api.Params
}

// AdsGetBudgetBuilder func.
func NewAdsGetBudgetBuilder() *AdsGetBudgetBuilder {
	return &AdsGetBudgetBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetBudgetBuilder) AccountID(v int64) *AdsGetBudgetBuilder {
	b.Params["account_id"] = v
	return b
}

// AdsGetCampaignsBuilder builder.
//
// Returns a list of campaigns in an advertising account.
//
// https://vk.com/dev/ads.getCampaigns
type AdsGetCampaignsBuilder struct {
	api.Params
}

// AdsGetCampaignsBuilder func.
func NewAdsGetCampaignsBuilder() *AdsGetCampaignsBuilder {
	return &AdsGetCampaignsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetCampaignsBuilder) AccountID(v int64) *AdsGetCampaignsBuilder {
	b.Params["account_id"] = v
	return b
}

// 'For advertising agencies'. ID of the client advertising campaigns are retrieved from.
func (b *AdsGetCampaignsBuilder) ClientID(v int64) *AdsGetCampaignsBuilder {
	b.Params["client_id"] = v
	return b
}

// Flag that specifies whether archived ads shall be shown. *0 — show only active campaigns,, *1 — show all campaigns.
func (b *AdsGetCampaignsBuilder) IncludeDeleted(v bool) *AdsGetCampaignsBuilder {
	b.Params["include_deleted"] = v
	return b
}

// Filter of advertising campaigns to show. Serialized JSON array with campaign IDs. Only campaigns that exist in 'campaign_ids' and belong to the specified advertising account will be shown. If the parameter is null, all campaigns will be shown.
func (b *AdsGetCampaignsBuilder) CampaignIDs(v string) *AdsGetCampaignsBuilder {
	b.Params["campaign_ids"] = v
	return b
}

func (b *AdsGetCampaignsBuilder) Fields(v []string) *AdsGetCampaignsBuilder {
	b.Params["fields"] = v
	return b
}

// AdsGetCategoriesBuilder builder.
//
// Returns a list of possible ad categories.
//
// https://vk.com/dev/ads.getCategories
type AdsGetCategoriesBuilder struct {
	api.Params
}

// AdsGetCategoriesBuilder func.
func NewAdsGetCategoriesBuilder() *AdsGetCategoriesBuilder {
	return &AdsGetCategoriesBuilder{api.Params{}}
}

// Language. The full list of supported languages is [vk.com/dev/api_requests|here].
func (b *AdsGetCategoriesBuilder) Lang(v string) *AdsGetCategoriesBuilder {
	b.Params["lang"] = v
	return b
}

// AdsGetClientsBuilder builder.
//
// Returns a list of advertising agency's clients.
//
// https://vk.com/dev/ads.getClients
type AdsGetClientsBuilder struct {
	api.Params
}

// AdsGetClientsBuilder func.
func NewAdsGetClientsBuilder() *AdsGetClientsBuilder {
	return &AdsGetClientsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetClientsBuilder) AccountID(v int64) *AdsGetClientsBuilder {
	b.Params["account_id"] = v
	return b
}

// AdsGetDemographicsBuilder builder.
//
// Returns demographics for ads or campaigns.
//
// https://vk.com/dev/ads.getDemographics
type AdsGetDemographicsBuilder struct {
	api.Params
}

// AdsGetDemographicsBuilder func.
func NewAdsGetDemographicsBuilder() *AdsGetDemographicsBuilder {
	return &AdsGetDemographicsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetDemographicsBuilder) AccountID(v int64) *AdsGetDemographicsBuilder {
	b.Params["account_id"] = v
	return b
}

// Type of requested objects listed in 'ids' parameter: *ad — ads,, *campaign — campaigns.
func (b *AdsGetDemographicsBuilder) IDsType(v string) *AdsGetDemographicsBuilder {
	b.Params["ids_type"] = v
	return b
}

// IDs requested ads or campaigns, separated with a comma, depending on the value set in 'ids_type'. Maximum 2000 objects.
func (b *AdsGetDemographicsBuilder) IDs(v string) *AdsGetDemographicsBuilder {
	b.Params["ids"] = v
	return b
}

// Data grouping by dates: *day — statistics by days,, *month — statistics by months,, *overall — overall statistics. 'date_from' and 'date_to' parameters set temporary limits.
func (b *AdsGetDemographicsBuilder) Period(v string) *AdsGetDemographicsBuilder {
	b.Params["period"] = v
	return b
}

// Date to show statistics from. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — day it was created on,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — month it was created in,, *overall: 0.
func (b *AdsGetDemographicsBuilder) DateFrom(v string) *AdsGetDemographicsBuilder {
	b.Params["date_from"] = v
	return b
}

// Date to show statistics to. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — current day,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — current month,, *overall: 0.
func (b *AdsGetDemographicsBuilder) DateTo(v string) *AdsGetDemographicsBuilder {
	b.Params["date_to"] = v
	return b
}

// AdsGetFloodStatsBuilder builder.
//
// Returns information about current state of a counter — number of remaining runs of methods and time to the next counter nulling in seconds.
//
// https://vk.com/dev/ads.getFloodStats
type AdsGetFloodStatsBuilder struct {
	api.Params
}

// AdsGetFloodStatsBuilder func.
func NewAdsGetFloodStatsBuilder() *AdsGetFloodStatsBuilder {
	return &AdsGetFloodStatsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetFloodStatsBuilder) AccountID(v int64) *AdsGetFloodStatsBuilder {
	b.Params["account_id"] = v
	return b
}

// AdsGetLookalikeRequestsBuilder builder.
//
// https://vk.com/dev/ads.getLookalikeRequests
type AdsGetLookalikeRequestsBuilder struct {
	api.Params
}

// AdsGetLookalikeRequestsBuilder func.
func NewAdsGetLookalikeRequestsBuilder() *AdsGetLookalikeRequestsBuilder {
	return &AdsGetLookalikeRequestsBuilder{api.Params{}}
}

func (b *AdsGetLookalikeRequestsBuilder) AccountID(v int64) *AdsGetLookalikeRequestsBuilder {
	b.Params["account_id"] = v
	return b
}

func (b *AdsGetLookalikeRequestsBuilder) ClientID(v int64) *AdsGetLookalikeRequestsBuilder {
	b.Params["client_id"] = v
	return b
}

func (b *AdsGetLookalikeRequestsBuilder) RequestsIDs(v string) *AdsGetLookalikeRequestsBuilder {
	b.Params["requests_ids"] = v
	return b
}

func (b *AdsGetLookalikeRequestsBuilder) Offset(v int64) *AdsGetLookalikeRequestsBuilder {
	b.Params["offset"] = v
	return b
}

func (b *AdsGetLookalikeRequestsBuilder) Limit(v int64) *AdsGetLookalikeRequestsBuilder {
	b.Params["limit"] = v
	return b
}

func (b *AdsGetLookalikeRequestsBuilder) SortBy(v string) *AdsGetLookalikeRequestsBuilder {
	b.Params["sort_by"] = v
	return b
}

// AdsGetMusiciansBuilder builder.
//
// https://vk.com/dev/ads.getMusicians
type AdsGetMusiciansBuilder struct {
	api.Params
}

// AdsGetMusiciansBuilder func.
func NewAdsGetMusiciansBuilder() *AdsGetMusiciansBuilder {
	return &AdsGetMusiciansBuilder{api.Params{}}
}

func (b *AdsGetMusiciansBuilder) ArtistName(v string) *AdsGetMusiciansBuilder {
	b.Params["artist_name"] = v
	return b
}

// AdsGetOfficeUsersBuilder builder.
//
// Returns a list of managers and supervisors of advertising account.
//
// https://vk.com/dev/ads.getOfficeUsers
type AdsGetOfficeUsersBuilder struct {
	api.Params
}

// AdsGetOfficeUsersBuilder func.
func NewAdsGetOfficeUsersBuilder() *AdsGetOfficeUsersBuilder {
	return &AdsGetOfficeUsersBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetOfficeUsersBuilder) AccountID(v int64) *AdsGetOfficeUsersBuilder {
	b.Params["account_id"] = v
	return b
}

// AdsGetPostsReachBuilder builder.
//
// Returns detailed statistics of promoted posts reach from campaigns and ads.
//
// https://vk.com/dev/ads.getPostsReach
type AdsGetPostsReachBuilder struct {
	api.Params
}

// AdsGetPostsReachBuilder func.
func NewAdsGetPostsReachBuilder() *AdsGetPostsReachBuilder {
	return &AdsGetPostsReachBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetPostsReachBuilder) AccountID(v int64) *AdsGetPostsReachBuilder {
	b.Params["account_id"] = v
	return b
}

// Type of requested objects listed in 'ids' parameter: *ad — ads,, *campaign — campaigns.
func (b *AdsGetPostsReachBuilder) IDsType(v string) *AdsGetPostsReachBuilder {
	b.Params["ids_type"] = v
	return b
}

// IDs requested ads or campaigns, separated with a comma, depending on the value set in 'ids_type'. Maximum 100 objects.
func (b *AdsGetPostsReachBuilder) IDs(v string) *AdsGetPostsReachBuilder {
	b.Params["ids"] = v
	return b
}

// AdsGetRejectionReasonBuilder builder.
//
// Returns a reason of ad rejection for pre-moderation.
//
// https://vk.com/dev/ads.getRejectionReason
type AdsGetRejectionReasonBuilder struct {
	api.Params
}

// AdsGetRejectionReasonBuilder func.
func NewAdsGetRejectionReasonBuilder() *AdsGetRejectionReasonBuilder {
	return &AdsGetRejectionReasonBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetRejectionReasonBuilder) AccountID(v int64) *AdsGetRejectionReasonBuilder {
	b.Params["account_id"] = v
	return b
}

// Ad ID.
func (b *AdsGetRejectionReasonBuilder) AdID(v int64) *AdsGetRejectionReasonBuilder {
	b.Params["ad_id"] = v
	return b
}

// AdsGetStatisticsBuilder builder.
//
// Returns statistics of performance indicators for ads, campaigns, clients or the whole account.
//
// https://vk.com/dev/ads.getStatistics
type AdsGetStatisticsBuilder struct {
	api.Params
}

// AdsGetStatisticsBuilder func.
func NewAdsGetStatisticsBuilder() *AdsGetStatisticsBuilder {
	return &AdsGetStatisticsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetStatisticsBuilder) AccountID(v int64) *AdsGetStatisticsBuilder {
	b.Params["account_id"] = v
	return b
}

// Type of requested objects listed in 'ids' parameter: *ad — ads,, *campaign — campaigns,, *client — clients,, *office — account.
func (b *AdsGetStatisticsBuilder) IDsType(v string) *AdsGetStatisticsBuilder {
	b.Params["ids_type"] = v
	return b
}

// IDs requested ads, campaigns, clients or account, separated with a comma, depending on the value set in 'ids_type'. Maximum 2000 objects.
func (b *AdsGetStatisticsBuilder) IDs(v string) *AdsGetStatisticsBuilder {
	b.Params["ids"] = v
	return b
}

// Data grouping by dates: *day — statistics by days,, *month — statistics by months,, *overall — overall statistics. 'date_from' and 'date_to' parameters set temporary limits.
func (b *AdsGetStatisticsBuilder) Period(v string) *AdsGetStatisticsBuilder {
	b.Params["period"] = v
	return b
}

// Date to show statistics from. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — day it was created on,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — month it was created in,, *overall: 0.
func (b *AdsGetStatisticsBuilder) DateFrom(v string) *AdsGetStatisticsBuilder {
	b.Params["date_from"] = v
	return b
}

// Date to show statistics to. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — current day,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — current month,, *overall: 0.
func (b *AdsGetStatisticsBuilder) DateTo(v string) *AdsGetStatisticsBuilder {
	b.Params["date_to"] = v
	return b
}

// Additional fields to add to statistics
func (b *AdsGetStatisticsBuilder) StatsFields(v []string) *AdsGetStatisticsBuilder {
	b.Params["stats_fields"] = v
	return b
}

// AdsGetSuggestionsBuilder builder.
//
// Returns a set of auto-suggestions for various targeting parameters.
//
// https://vk.com/dev/ads.getSuggestions
type AdsGetSuggestionsBuilder struct {
	api.Params
}

// AdsGetSuggestionsBuilder func.
func NewAdsGetSuggestionsBuilder() *AdsGetSuggestionsBuilder {
	return &AdsGetSuggestionsBuilder{api.Params{}}
}

// Section, suggestions are retrieved in. Available values: *countries — request of a list of countries. If q is not set or blank, a short list of countries is shown. Otherwise, a full list of countries is shown. *regions — requested list of regions. 'country' parameter is required. *cities — requested list of cities. 'country' parameter is required. *districts — requested list of districts. 'cities' parameter is required. *stations — requested list of subway stations. 'cities' parameter is required. *streets — requested list of streets. 'cities' parameter is required. *schools — requested list of educational organizations. 'cities' parameter is required. *interests — requested list of interests. *positions — requested list of positions (professions). *group_types — requested list of group types. *religions — requested list of religious commitments. *browsers — requested list of browsers and mobile devices.
func (b *AdsGetSuggestionsBuilder) Section(v string) *AdsGetSuggestionsBuilder {
	b.Params["section"] = v
	return b
}

// Objects IDs separated by commas. If the parameter is passed, 'q, country, cities' should not be passed.
func (b *AdsGetSuggestionsBuilder) IDs(v string) *AdsGetSuggestionsBuilder {
	b.Params["ids"] = v
	return b
}

// Filter-line of the request (for countries, regions, cities, streets, schools, interests, positions).
func (b *AdsGetSuggestionsBuilder) Q(v string) *AdsGetSuggestionsBuilder {
	b.Params["q"] = v
	return b
}

// ID of the country objects are searched in.
func (b *AdsGetSuggestionsBuilder) Country(v int64) *AdsGetSuggestionsBuilder {
	b.Params["country"] = v
	return b
}

// IDs of cities where objects are searched in, separated with a comma.
func (b *AdsGetSuggestionsBuilder) Cities(v string) *AdsGetSuggestionsBuilder {
	b.Params["cities"] = v
	return b
}

// Language of the returned string values. Supported languages: *ru — Russian,, *ua — Ukrainian,, *en — English.
func (b *AdsGetSuggestionsBuilder) Lang(v string) *AdsGetSuggestionsBuilder {
	b.Params["lang"] = v
	return b
}

// AdsGetTargetGroupsBuilder builder.
//
// Returns a list of target groups.
//
// https://vk.com/dev/ads.getTargetGroups
type AdsGetTargetGroupsBuilder struct {
	api.Params
}

// AdsGetTargetGroupsBuilder func.
func NewAdsGetTargetGroupsBuilder() *AdsGetTargetGroupsBuilder {
	return &AdsGetTargetGroupsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetTargetGroupsBuilder) AccountID(v int64) *AdsGetTargetGroupsBuilder {
	b.Params["account_id"] = v
	return b
}

// 'Only for advertising agencies.', ID of the client with the advertising account where the group will be created.
func (b *AdsGetTargetGroupsBuilder) ClientID(v int64) *AdsGetTargetGroupsBuilder {
	b.Params["client_id"] = v
	return b
}

// '1' — to return pixel code.
func (b *AdsGetTargetGroupsBuilder) Extended(v bool) *AdsGetTargetGroupsBuilder {
	b.Params["extended"] = v
	return b
}

// AdsGetTargetingStatsBuilder builder.
//
// Returns the size of targeting audience, and also recommended values for CPC and CPM.
//
// https://vk.com/dev/ads.getTargetingStats
type AdsGetTargetingStatsBuilder struct {
	api.Params
}

// AdsGetTargetingStatsBuilder func.
func NewAdsGetTargetingStatsBuilder() *AdsGetTargetingStatsBuilder {
	return &AdsGetTargetingStatsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsGetTargetingStatsBuilder) AccountID(v int64) *AdsGetTargetingStatsBuilder {
	b.Params["account_id"] = v
	return b
}

func (b *AdsGetTargetingStatsBuilder) ClientID(v int64) *AdsGetTargetingStatsBuilder {
	b.Params["client_id"] = v
	return b
}

// Serialized JSON object that describes targeting parameters. Description of 'criteria' object see below.
func (b *AdsGetTargetingStatsBuilder) Criteria(v string) *AdsGetTargetingStatsBuilder {
	b.Params["criteria"] = v
	return b
}

// ID of an ad which targeting parameters shall be analyzed.
func (b *AdsGetTargetingStatsBuilder) AdID(v int64) *AdsGetTargetingStatsBuilder {
	b.Params["ad_id"] = v
	return b
}

// Ad format. Possible values: *'1' — image and text,, *'2' — big image,, *'3' — exclusive format,, *'4' — community, square image,, *'7' — special app format,, *'8' — special community format,, *'9' — post in community,, *'10' — app board.
func (b *AdsGetTargetingStatsBuilder) AdFormat(v int64) *AdsGetTargetingStatsBuilder {
	b.Params["ad_format"] = v
	return b
}

// Platforms to use for ad showing. Possible values: (for 'ad_format' = '1'), *'0' — VK and partner sites,, *'1' — VK only. (for 'ad_format' = '9'), *'all' — all platforms,, *'desktop' — desktop version,, *'mobile' — mobile version and apps.
func (b *AdsGetTargetingStatsBuilder) AdPlatform(v string) *AdsGetTargetingStatsBuilder {
	b.Params["ad_platform"] = v
	return b
}

func (b *AdsGetTargetingStatsBuilder) AdPlatformNoWall(v string) *AdsGetTargetingStatsBuilder {
	b.Params["ad_platform_no_wall"] = v
	return b
}

func (b *AdsGetTargetingStatsBuilder) AdPlatformNoAdNetwork(v string) *AdsGetTargetingStatsBuilder {
	b.Params["ad_platform_no_ad_network"] = v
	return b
}

// URL for the advertised object.
func (b *AdsGetTargetingStatsBuilder) LinkURL(v string) *AdsGetTargetingStatsBuilder {
	b.Params["link_url"] = v
	return b
}

// Domain of the advertised object.
func (b *AdsGetTargetingStatsBuilder) LinkDomain(v string) *AdsGetTargetingStatsBuilder {
	b.Params["link_domain"] = v
	return b
}

// Additionally return recommended cpc and cpm to reach 5,10..95 percents of audience.
func (b *AdsGetTargetingStatsBuilder) NeedPrecise(v bool) *AdsGetTargetingStatsBuilder {
	b.Params["need_precise"] = v
	return b
}

// AdsGetUploadURLBuilder builder.
//
// Returns URL to upload an ad photo to.
//
// https://vk.com/dev/ads.getUploadURL
type AdsGetUploadURLBuilder struct {
	api.Params
}

// AdsGetUploadURLBuilder func.
func NewAdsGetUploadURLBuilder() *AdsGetUploadURLBuilder {
	return &AdsGetUploadURLBuilder{api.Params{}}
}

// Ad format: *1 — image and text,, *2 — big image,, *3 — exclusive format,, *4 — community, square image,, *7 — special app format.
func (b *AdsGetUploadURLBuilder) AdFormat(v int64) *AdsGetUploadURLBuilder {
	b.Params["ad_format"] = v
	return b
}

func (b *AdsGetUploadURLBuilder) Icon(v int64) *AdsGetUploadURLBuilder {
	b.Params["icon"] = v
	return b
}

// AdsGetVideoUploadURLBuilder builder.
//
// Returns URL to upload an ad video to.
//
// https://vk.com/dev/ads.getVideoUploadURL
type AdsGetVideoUploadURLBuilder struct {
	api.Params
}

// AdsGetVideoUploadURLBuilder func.
func NewAdsGetVideoUploadURLBuilder() *AdsGetVideoUploadURLBuilder {
	return &AdsGetVideoUploadURLBuilder{api.Params{}}
}

// AdsImportTargetContactsBuilder builder.
//
// Imports a list of advertiser's contacts to count VK registered users against the target group.
//
// https://vk.com/dev/ads.importTargetContacts
type AdsImportTargetContactsBuilder struct {
	api.Params
}

// AdsImportTargetContactsBuilder func.
func NewAdsImportTargetContactsBuilder() *AdsImportTargetContactsBuilder {
	return &AdsImportTargetContactsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsImportTargetContactsBuilder) AccountID(v int64) *AdsImportTargetContactsBuilder {
	b.Params["account_id"] = v
	return b
}

// 'Only for advertising agencies.' , ID of the client with the advertising account where the group will be created.
func (b *AdsImportTargetContactsBuilder) ClientID(v int64) *AdsImportTargetContactsBuilder {
	b.Params["client_id"] = v
	return b
}

// Target group ID.
func (b *AdsImportTargetContactsBuilder) TargetGroupID(v int64) *AdsImportTargetContactsBuilder {
	b.Params["target_group_id"] = v
	return b
}

// List of phone numbers, emails or user IDs separated with a comma.
func (b *AdsImportTargetContactsBuilder) Contacts(v string) *AdsImportTargetContactsBuilder {
	b.Params["contacts"] = v
	return b
}

// AdsRemoveOfficeUsersBuilder builder.
//
// Removes managers and/or supervisors from advertising account.
//
// https://vk.com/dev/ads.removeOfficeUsers
type AdsRemoveOfficeUsersBuilder struct {
	api.Params
}

// AdsRemoveOfficeUsersBuilder func.
func NewAdsRemoveOfficeUsersBuilder() *AdsRemoveOfficeUsersBuilder {
	return &AdsRemoveOfficeUsersBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsRemoveOfficeUsersBuilder) AccountID(v int64) *AdsRemoveOfficeUsersBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array with IDs of deleted managers.
func (b *AdsRemoveOfficeUsersBuilder) IDs(v string) *AdsRemoveOfficeUsersBuilder {
	b.Params["ids"] = v
	return b
}

// AdsUpdateAdsBuilder builder.
//
// Edits ads.
//
// https://vk.com/dev/ads.updateAds
type AdsUpdateAdsBuilder struct {
	api.Params
}

// AdsUpdateAdsBuilder func.
func NewAdsUpdateAdsBuilder() *AdsUpdateAdsBuilder {
	return &AdsUpdateAdsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsUpdateAdsBuilder) AccountID(v int64) *AdsUpdateAdsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe changes in ads. Description of 'ad_edit_specification' objects see below.
func (b *AdsUpdateAdsBuilder) Data(v string) *AdsUpdateAdsBuilder {
	b.Params["data"] = v
	return b
}

// AdsUpdateCampaignsBuilder builder.
//
// Edits advertising campaigns.
//
// https://vk.com/dev/ads.updateCampaigns
type AdsUpdateCampaignsBuilder struct {
	api.Params
}

// AdsUpdateCampaignsBuilder func.
func NewAdsUpdateCampaignsBuilder() *AdsUpdateCampaignsBuilder {
	return &AdsUpdateCampaignsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsUpdateCampaignsBuilder) AccountID(v int64) *AdsUpdateCampaignsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe changes in campaigns. Description of 'campaign_mod' objects see below.
func (b *AdsUpdateCampaignsBuilder) Data(v string) *AdsUpdateCampaignsBuilder {
	b.Params["data"] = v
	return b
}

// AdsUpdateClientsBuilder builder.
//
// Edits clients of an advertising agency.
//
// https://vk.com/dev/ads.updateClients
type AdsUpdateClientsBuilder struct {
	api.Params
}

// AdsUpdateClientsBuilder func.
func NewAdsUpdateClientsBuilder() *AdsUpdateClientsBuilder {
	return &AdsUpdateClientsBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsUpdateClientsBuilder) AccountID(v int64) *AdsUpdateClientsBuilder {
	b.Params["account_id"] = v
	return b
}

// Serialized JSON array of objects that describe changes in clients. Description of 'client_mod' objects see below.
func (b *AdsUpdateClientsBuilder) Data(v string) *AdsUpdateClientsBuilder {
	b.Params["data"] = v
	return b
}

// AdsUpdateTargetGroupBuilder builder.
//
// Edits a retarget group.
//
// https://vk.com/dev/ads.updateTargetGroup
type AdsUpdateTargetGroupBuilder struct {
	api.Params
}

// AdsUpdateTargetGroupBuilder func.
func NewAdsUpdateTargetGroupBuilder() *AdsUpdateTargetGroupBuilder {
	return &AdsUpdateTargetGroupBuilder{api.Params{}}
}

// Advertising account ID.
func (b *AdsUpdateTargetGroupBuilder) AccountID(v int64) *AdsUpdateTargetGroupBuilder {
	b.Params["account_id"] = v
	return b
}

// 'Only for advertising agencies.' , ID of the client with the advertising account where the group will be created.
func (b *AdsUpdateTargetGroupBuilder) ClientID(v int64) *AdsUpdateTargetGroupBuilder {
	b.Params["client_id"] = v
	return b
}

// Group ID.
func (b *AdsUpdateTargetGroupBuilder) TargetGroupID(v int64) *AdsUpdateTargetGroupBuilder {
	b.Params["target_group_id"] = v
	return b
}

// New name of the target group — a string up to 64 characters long.
func (b *AdsUpdateTargetGroupBuilder) Name(v string) *AdsUpdateTargetGroupBuilder {
	b.Params["name"] = v
	return b
}

// Domain of the site where user accounting code will be placed.
func (b *AdsUpdateTargetGroupBuilder) Domain(v string) *AdsUpdateTargetGroupBuilder {
	b.Params["domain"] = v
	return b
}

// 'Only for the groups that get audience from sites with user accounting code.', Time in days when users added to a retarget group will be automatically excluded from it. '0' - automatic exclusion is off.
func (b *AdsUpdateTargetGroupBuilder) Lifetime(v int64) *AdsUpdateTargetGroupBuilder {
	b.Params["lifetime"] = v
	return b
}

func (b *AdsUpdateTargetGroupBuilder) TargetPixelID(v int64) *AdsUpdateTargetGroupBuilder {
	b.Params["target_pixel_id"] = v
	return b
}

func (b *AdsUpdateTargetGroupBuilder) TargetPixelRules(v string) *AdsUpdateTargetGroupBuilder {
	b.Params["target_pixel_rules"] = v
	return b
}

// AppWidgetsUpdateBuilder builder.
//
// Allows to update community app widget
//
// https://vk.com/dev/appWidgets.update
type AppWidgetsUpdateBuilder struct {
	api.Params
}

// AppWidgetsUpdateBuilder func.
func NewAppWidgetsUpdateBuilder() *AppWidgetsUpdateBuilder {
	return &AppWidgetsUpdateBuilder{api.Params{}}
}

func (b *AppWidgetsUpdateBuilder) Code(v string) *AppWidgetsUpdateBuilder {
	b.Params["code"] = v
	return b
}

func (b *AppWidgetsUpdateBuilder) Type(v string) *AppWidgetsUpdateBuilder {
	b.Params["type"] = v
	return b
}

// AppsDeleteAppRequestsBuilder builder.
//
// Deletes all request notifications from the current app.
//
// https://vk.com/dev/apps.deleteAppRequests
type AppsDeleteAppRequestsBuilder struct {
	api.Params
}

// AppsDeleteAppRequestsBuilder func.
func NewAppsDeleteAppRequestsBuilder() *AppsDeleteAppRequestsBuilder {
	return &AppsDeleteAppRequestsBuilder{api.Params{}}
}

// AppsGetBuilder builder.
//
// Returns applications data.
//
// https://vk.com/dev/apps.get
type AppsGetBuilder struct {
	api.Params
}

// AppsGetBuilder func.
func NewAppsGetBuilder() *AppsGetBuilder {
	return &AppsGetBuilder{api.Params{}}
}

// Application ID
func (b *AppsGetBuilder) AppID(v int64) *AppsGetBuilder {
	b.Params["app_id"] = v
	return b
}

// List of application ID
func (b *AppsGetBuilder) AppIDs(v []string) *AppsGetBuilder {
	b.Params["app_ids"] = v
	return b
}

// platform. Possible values: *'ios' — iOS,, *'android' — Android,, *'winphone' — Windows Phone,, *'web' — приложения на vk.com. By default: 'web'.
func (b *AppsGetBuilder) Platform(v string) *AppsGetBuilder {
	b.Params["platform"] = v
	return b
}

func (b *AppsGetBuilder) Extended(v bool) *AppsGetBuilder {
	b.Params["extended"] = v
	return b
}

func (b *AppsGetBuilder) ReturnFriends(v bool) *AppsGetBuilder {
	b.Params["return_friends"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'contacts', 'education', 'online', 'counters', 'relation', 'last_seen', 'activity', 'can_write_private_message', 'can_see_all_posts', 'can_post', 'universities', (only if return_friends - 1)
func (b *AppsGetBuilder) Fields(v []UsersFields) *AppsGetBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: 'nom' — nominative (default),, 'gen' — genitive,, 'dat' — dative,, 'acc' — accusative,, 'ins' — instrumental,, 'abl' — prepositional. (only if 'return_friends' = '1')
func (b *AppsGetBuilder) NameCase(v string) *AppsGetBuilder {
	b.Params["name_case"] = v
	return b
}

// AppsGetCatalogBuilder builder.
//
// Returns a list of applications (apps) available to users in the App Catalog.
//
// https://vk.com/dev/apps.getCatalog
type AppsGetCatalogBuilder struct {
	api.Params
}

// AppsGetCatalogBuilder func.
func NewAppsGetCatalogBuilder() *AppsGetCatalogBuilder {
	return &AppsGetCatalogBuilder{api.Params{}}
}

// Sort order: 'popular_today' — popular for one day (default), 'visitors' — by visitors number , 'create_date' — by creation date, 'growth_rate' — by growth rate, 'popular_week' — popular for one week
func (b *AppsGetCatalogBuilder) Sort(v string) *AppsGetCatalogBuilder {
	b.Params["sort"] = v
	return b
}

// Offset required to return a specific subset of apps.
func (b *AppsGetCatalogBuilder) Offset(v int64) *AppsGetCatalogBuilder {
	b.Params["offset"] = v
	return b
}

// Number of apps to return.
func (b *AppsGetCatalogBuilder) Count(v int64) *AppsGetCatalogBuilder {
	b.Params["count"] = v
	return b
}

func (b *AppsGetCatalogBuilder) Platform(v string) *AppsGetCatalogBuilder {
	b.Params["platform"] = v
	return b
}

// '1' — to return additional fields 'screenshots', 'MAU', 'catalog_position', and 'international'. If set, 'count' must be less than or equal to '100'. '0' — not to return additional fields (default).
func (b *AppsGetCatalogBuilder) Extended(v bool) *AppsGetCatalogBuilder {
	b.Params["extended"] = v
	return b
}

func (b *AppsGetCatalogBuilder) ReturnFriends(v bool) *AppsGetCatalogBuilder {
	b.Params["return_friends"] = v
	return b
}

func (b *AppsGetCatalogBuilder) Fields(v []UsersFields) *AppsGetCatalogBuilder {
	b.Params["fields"] = v
	return b
}

func (b *AppsGetCatalogBuilder) NameCase(v string) *AppsGetCatalogBuilder {
	b.Params["name_case"] = v
	return b
}

// Search query string.
func (b *AppsGetCatalogBuilder) Q(v string) *AppsGetCatalogBuilder {
	b.Params["q"] = v
	return b
}

func (b *AppsGetCatalogBuilder) GenreID(v int64) *AppsGetCatalogBuilder {
	b.Params["genre_id"] = v
	return b
}

// 'installed' — to return list of installed apps (only for mobile platform).
func (b *AppsGetCatalogBuilder) Filter(v string) *AppsGetCatalogBuilder {
	b.Params["filter"] = v
	return b
}

// AppsGetFriendsListBuilder builder.
//
// Creates friends list for requests and invites in current app.
//
// https://vk.com/dev/apps.getFriendsList
type AppsGetFriendsListBuilder struct {
	api.Params
}

// AppsGetFriendsListBuilder func.
func NewAppsGetFriendsListBuilder() *AppsGetFriendsListBuilder {
	return &AppsGetFriendsListBuilder{api.Params{}}
}

func (b *AppsGetFriendsListBuilder) Extended(v bool) *AppsGetFriendsListBuilder {
	b.Params["extended"] = v
	return b
}

// List size.
func (b *AppsGetFriendsListBuilder) Count(v int64) *AppsGetFriendsListBuilder {
	b.Params["count"] = v
	return b
}

func (b *AppsGetFriendsListBuilder) Offset(v int64) *AppsGetFriendsListBuilder {
	b.Params["offset"] = v
	return b
}

// List type. Possible values: * 'invite' — available for invites (don't play the game),, * 'request' — available for request (play the game). By default: 'invite'.
func (b *AppsGetFriendsListBuilder) Type(v string) *AppsGetFriendsListBuilder {
	b.Params["type"] = v
	return b
}

// Additional profile fields, see [vk.com/dev/fields|description].
func (b *AppsGetFriendsListBuilder) Fields(v []UsersFields) *AppsGetFriendsListBuilder {
	b.Params["fields"] = v
	return b
}

// AppsGetLeaderboardBuilder builder.
//
// Returns players rating in the game.
//
// https://vk.com/dev/apps.getLeaderboard
type AppsGetLeaderboardBuilder struct {
	api.Params
}

// AppsGetLeaderboardBuilder func.
func NewAppsGetLeaderboardBuilder() *AppsGetLeaderboardBuilder {
	return &AppsGetLeaderboardBuilder{api.Params{}}
}

// Leaderboard type. Possible values: *'level' — by level,, *'points' — by mission points,, *'score' — by score ().
func (b *AppsGetLeaderboardBuilder) Type(v string) *AppsGetLeaderboardBuilder {
	b.Params["type"] = v
	return b
}

// Rating type. Possible values: *'1' — global rating among all players,, *'0' — rating among user friends.
func (b *AppsGetLeaderboardBuilder) Global(v bool) *AppsGetLeaderboardBuilder {
	b.Params["global"] = v
	return b
}

// 1 — to return additional info about users
func (b *AppsGetLeaderboardBuilder) Extended(v bool) *AppsGetLeaderboardBuilder {
	b.Params["extended"] = v
	return b
}

// AppsGetScopesBuilder builder.
//
// Returns scopes for auth
//
// https://vk.com/dev/apps.getScopes
type AppsGetScopesBuilder struct {
	api.Params
}

// AppsGetScopesBuilder func.
func NewAppsGetScopesBuilder() *AppsGetScopesBuilder {
	return &AppsGetScopesBuilder{api.Params{}}
}

func (b *AppsGetScopesBuilder) Type(v string) *AppsGetScopesBuilder {
	b.Params["type"] = v
	return b
}

// AppsGetScoreBuilder builder.
//
// Returns user score in app
//
// https://vk.com/dev/apps.getScore
type AppsGetScoreBuilder struct {
	api.Params
}

// AppsGetScoreBuilder func.
func NewAppsGetScoreBuilder() *AppsGetScoreBuilder {
	return &AppsGetScoreBuilder{api.Params{}}
}

func (b *AppsGetScoreBuilder) UserID(v int64) *AppsGetScoreBuilder {
	b.Params["user_id"] = v
	return b
}

// AppsPromoHasActiveGiftBuilder builder.
//
// https://vk.com/dev/apps.promoHasActiveGift
type AppsPromoHasActiveGiftBuilder struct {
	api.Params
}

// AppsPromoHasActiveGiftBuilder func.
func NewAppsPromoHasActiveGiftBuilder() *AppsPromoHasActiveGiftBuilder {
	return &AppsPromoHasActiveGiftBuilder{api.Params{}}
}

// Id of game promo action
func (b *AppsPromoHasActiveGiftBuilder) PromoID(v int64) *AppsPromoHasActiveGiftBuilder {
	b.Params["promo_id"] = v
	return b
}

func (b *AppsPromoHasActiveGiftBuilder) UserID(v int64) *AppsPromoHasActiveGiftBuilder {
	b.Params["user_id"] = v
	return b
}

// AppsPromoUseGiftBuilder builder.
//
// https://vk.com/dev/apps.promoUseGift
type AppsPromoUseGiftBuilder struct {
	api.Params
}

// AppsPromoUseGiftBuilder func.
func NewAppsPromoUseGiftBuilder() *AppsPromoUseGiftBuilder {
	return &AppsPromoUseGiftBuilder{api.Params{}}
}

// Id of game promo action
func (b *AppsPromoUseGiftBuilder) PromoID(v int64) *AppsPromoUseGiftBuilder {
	b.Params["promo_id"] = v
	return b
}

func (b *AppsPromoUseGiftBuilder) UserID(v int64) *AppsPromoUseGiftBuilder {
	b.Params["user_id"] = v
	return b
}

// AppsSendRequestBuilder builder.
//
// Sends a request to another user in an app that uses VK authorization.
//
// https://vk.com/dev/apps.sendRequest
type AppsSendRequestBuilder struct {
	api.Params
}

// AppsSendRequestBuilder func.
func NewAppsSendRequestBuilder() *AppsSendRequestBuilder {
	return &AppsSendRequestBuilder{api.Params{}}
}

// id of the user to send a request
func (b *AppsSendRequestBuilder) UserID(v int64) *AppsSendRequestBuilder {
	b.Params["user_id"] = v
	return b
}

// request text
func (b *AppsSendRequestBuilder) Text(v string) *AppsSendRequestBuilder {
	b.Params["text"] = v
	return b
}

// request type. Values: 'invite' – if the request is sent to a user who does not have the app installed,, 'request' – if a user has already installed the app
func (b *AppsSendRequestBuilder) Type(v string) *AppsSendRequestBuilder {
	b.Params["type"] = v
	return b
}

func (b *AppsSendRequestBuilder) Name(v string) *AppsSendRequestBuilder {
	b.Params["name"] = v
	return b
}

// special string key to be sent with the request
func (b *AppsSendRequestBuilder) Key(v string) *AppsSendRequestBuilder {
	b.Params["key"] = v
	return b
}

func (b *AppsSendRequestBuilder) Separate(v bool) *AppsSendRequestBuilder {
	b.Params["separate"] = v
	return b
}

// AuthCheckPhoneBuilder builder.
//
// Checks a user's phone number for correctness.
//
// https://vk.com/dev/auth.checkPhone
type AuthCheckPhoneBuilder struct {
	api.Params
}

// AuthCheckPhoneBuilder func.
func NewAuthCheckPhoneBuilder() *AuthCheckPhoneBuilder {
	return &AuthCheckPhoneBuilder{api.Params{}}
}

// Phone number.
func (b *AuthCheckPhoneBuilder) Phone(v string) *AuthCheckPhoneBuilder {
	b.Params["phone"] = v
	return b
}

// User ID.
func (b *AuthCheckPhoneBuilder) ClientID(v int64) *AuthCheckPhoneBuilder {
	b.Params["client_id"] = v
	return b
}

func (b *AuthCheckPhoneBuilder) ClientSecret(v string) *AuthCheckPhoneBuilder {
	b.Params["client_secret"] = v
	return b
}

func (b *AuthCheckPhoneBuilder) AuthByPhone(v bool) *AuthCheckPhoneBuilder {
	b.Params["auth_by_phone"] = v
	return b
}

// AuthRestoreBuilder builder.
//
// Allows to restore account access using a code received via SMS. " This method is only available for apps with [vk.com/dev/auth_direct|Direct authorization] access. "
//
// https://vk.com/dev/auth.restore
type AuthRestoreBuilder struct {
	api.Params
}

// AuthRestoreBuilder func.
func NewAuthRestoreBuilder() *AuthRestoreBuilder {
	return &AuthRestoreBuilder{api.Params{}}
}

// User phone number.
func (b *AuthRestoreBuilder) Phone(v string) *AuthRestoreBuilder {
	b.Params["phone"] = v
	return b
}

// User last name.
func (b *AuthRestoreBuilder) LastName(v string) *AuthRestoreBuilder {
	b.Params["last_name"] = v
	return b
}

// BoardAddTopicBuilder builder.
//
// Creates a new topic on a community's discussion board.
//
// https://vk.com/dev/board.addTopic
type BoardAddTopicBuilder struct {
	api.Params
}

// BoardAddTopicBuilder func.
func NewBoardAddTopicBuilder() *BoardAddTopicBuilder {
	return &BoardAddTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardAddTopicBuilder) GroupID(v int64) *BoardAddTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic title.
func (b *BoardAddTopicBuilder) Title(v string) *BoardAddTopicBuilder {
	b.Params["title"] = v
	return b
}

// Text of the topic.
func (b *BoardAddTopicBuilder) Text(v string) *BoardAddTopicBuilder {
	b.Params["text"] = v
	return b
}

// For a community: '1' — to post the topic as by the community, '0' — to post the topic as by the user (default)
func (b *BoardAddTopicBuilder) FromGroup(v bool) *BoardAddTopicBuilder {
	b.Params["from_group"] = v
	return b
}

// List of media objects attached to the topic, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media object: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. Example: "photo100172_166443618,photo66748_265827614", , "NOTE: If you try to attach more than one reference, an error will be thrown.",
func (b *BoardAddTopicBuilder) Attachments(v []string) *BoardAddTopicBuilder {
	b.Params["attachments"] = v
	return b
}

// BoardCloseTopicBuilder builder.
//
// Closes a topic on a community's discussion board so that comments cannot be posted.
//
// https://vk.com/dev/board.closeTopic
type BoardCloseTopicBuilder struct {
	api.Params
}

// BoardCloseTopicBuilder func.
func NewBoardCloseTopicBuilder() *BoardCloseTopicBuilder {
	return &BoardCloseTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardCloseTopicBuilder) GroupID(v int64) *BoardCloseTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardCloseTopicBuilder) TopicID(v int64) *BoardCloseTopicBuilder {
	b.Params["topic_id"] = v
	return b
}

// BoardCreateCommentBuilder builder.
//
// Adds a comment on a topic on a community's discussion board.
//
// https://vk.com/dev/board.createComment
type BoardCreateCommentBuilder struct {
	api.Params
}

// BoardCreateCommentBuilder func.
func NewBoardCreateCommentBuilder() *BoardCreateCommentBuilder {
	return &BoardCreateCommentBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardCreateCommentBuilder) GroupID(v int64) *BoardCreateCommentBuilder {
	b.Params["group_id"] = v
	return b
}

// ID of the topic to be commented on.
func (b *BoardCreateCommentBuilder) TopicID(v int64) *BoardCreateCommentBuilder {
	b.Params["topic_id"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the comment.
func (b *BoardCreateCommentBuilder) Message(v string) *BoardCreateCommentBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'text' is not set.) List of media objects attached to the comment, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media object: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID.
func (b *BoardCreateCommentBuilder) Attachments(v []string) *BoardCreateCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// '1' — to post the comment as by the community, '0' — to post the comment as by the user (default)
func (b *BoardCreateCommentBuilder) FromGroup(v bool) *BoardCreateCommentBuilder {
	b.Params["from_group"] = v
	return b
}

// Sticker ID.
func (b *BoardCreateCommentBuilder) StickerID(v int64) *BoardCreateCommentBuilder {
	b.Params["sticker_id"] = v
	return b
}

// Unique identifier to avoid repeated comments.
func (b *BoardCreateCommentBuilder) Guid(v string) *BoardCreateCommentBuilder {
	b.Params["guid"] = v
	return b
}

// BoardDeleteCommentBuilder builder.
//
// Deletes a comment on a topic on a community's discussion board.
//
// https://vk.com/dev/board.deleteComment
type BoardDeleteCommentBuilder struct {
	api.Params
}

// BoardDeleteCommentBuilder func.
func NewBoardDeleteCommentBuilder() *BoardDeleteCommentBuilder {
	return &BoardDeleteCommentBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardDeleteCommentBuilder) GroupID(v int64) *BoardDeleteCommentBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardDeleteCommentBuilder) TopicID(v int64) *BoardDeleteCommentBuilder {
	b.Params["topic_id"] = v
	return b
}

// Comment ID.
func (b *BoardDeleteCommentBuilder) CommentID(v int64) *BoardDeleteCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// BoardDeleteTopicBuilder builder.
//
// Deletes a topic from a community's discussion board.
//
// https://vk.com/dev/board.deleteTopic
type BoardDeleteTopicBuilder struct {
	api.Params
}

// BoardDeleteTopicBuilder func.
func NewBoardDeleteTopicBuilder() *BoardDeleteTopicBuilder {
	return &BoardDeleteTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardDeleteTopicBuilder) GroupID(v int64) *BoardDeleteTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardDeleteTopicBuilder) TopicID(v int64) *BoardDeleteTopicBuilder {
	b.Params["topic_id"] = v
	return b
}

// BoardEditCommentBuilder builder.
//
// Edits a comment on a topic on a community's discussion board.
//
// https://vk.com/dev/board.editComment
type BoardEditCommentBuilder struct {
	api.Params
}

// BoardEditCommentBuilder func.
func NewBoardEditCommentBuilder() *BoardEditCommentBuilder {
	return &BoardEditCommentBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardEditCommentBuilder) GroupID(v int64) *BoardEditCommentBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardEditCommentBuilder) TopicID(v int64) *BoardEditCommentBuilder {
	b.Params["topic_id"] = v
	return b
}

// ID of the comment on the topic.
func (b *BoardEditCommentBuilder) CommentID(v int64) *BoardEditCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// (Required if 'attachments' is not set). New comment text.
func (b *BoardEditCommentBuilder) Message(v string) *BoardEditCommentBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of media objects attached to the comment, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media object: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. Example: "photo100172_166443618,photo66748_265827614"
func (b *BoardEditCommentBuilder) Attachments(v []string) *BoardEditCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// BoardEditTopicBuilder builder.
//
// Edits the title of a topic on a community's discussion board.
//
// https://vk.com/dev/board.editTopic
type BoardEditTopicBuilder struct {
	api.Params
}

// BoardEditTopicBuilder func.
func NewBoardEditTopicBuilder() *BoardEditTopicBuilder {
	return &BoardEditTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardEditTopicBuilder) GroupID(v int64) *BoardEditTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardEditTopicBuilder) TopicID(v int64) *BoardEditTopicBuilder {
	b.Params["topic_id"] = v
	return b
}

// New title of the topic.
func (b *BoardEditTopicBuilder) Title(v string) *BoardEditTopicBuilder {
	b.Params["title"] = v
	return b
}

// BoardFixTopicBuilder builder.
//
// Pins a topic (fixes its place) to the top of a community's discussion board.
//
// https://vk.com/dev/board.fixTopic
type BoardFixTopicBuilder struct {
	api.Params
}

// BoardFixTopicBuilder func.
func NewBoardFixTopicBuilder() *BoardFixTopicBuilder {
	return &BoardFixTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardFixTopicBuilder) GroupID(v int64) *BoardFixTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardFixTopicBuilder) TopicID(v int64) *BoardFixTopicBuilder {
	b.Params["topic_id"] = v
	return b
}

// BoardGetCommentsBuilder builder.
//
// Returns a list of comments on a topic on a community's discussion board.
//
// https://vk.com/dev/board.getComments
type BoardGetCommentsBuilder struct {
	api.Params
}

// BoardGetCommentsBuilder func.
func NewBoardGetCommentsBuilder() *BoardGetCommentsBuilder {
	return &BoardGetCommentsBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardGetCommentsBuilder) GroupID(v int64) *BoardGetCommentsBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardGetCommentsBuilder) TopicID(v int64) *BoardGetCommentsBuilder {
	b.Params["topic_id"] = v
	return b
}

// '1' — to return the 'likes' field, '0' — not to return the 'likes' field (default)
func (b *BoardGetCommentsBuilder) NeedLikes(v bool) *BoardGetCommentsBuilder {
	b.Params["need_likes"] = v
	return b
}

func (b *BoardGetCommentsBuilder) StartCommentID(v int64) *BoardGetCommentsBuilder {
	b.Params["start_comment_id"] = v
	return b
}

// Offset needed to return a specific subset of comments.
func (b *BoardGetCommentsBuilder) Offset(v int64) *BoardGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of comments to return.
func (b *BoardGetCommentsBuilder) Count(v int64) *BoardGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return information about users who posted comments, '0' — to return no additional fields (default)
func (b *BoardGetCommentsBuilder) Extended(v bool) *BoardGetCommentsBuilder {
	b.Params["extended"] = v
	return b
}

// Sort order: 'asc' — by creation date in chronological order, 'desc' — by creation date in reverse chronological order,
func (b *BoardGetCommentsBuilder) Sort(v string) *BoardGetCommentsBuilder {
	b.Params["sort"] = v
	return b
}

// BoardGetTopicsBuilder builder.
//
// Returns a list of topics on a community's discussion board.
//
// https://vk.com/dev/board.getTopics
type BoardGetTopicsBuilder struct {
	api.Params
}

// BoardGetTopicsBuilder func.
func NewBoardGetTopicsBuilder() *BoardGetTopicsBuilder {
	return &BoardGetTopicsBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardGetTopicsBuilder) GroupID(v int64) *BoardGetTopicsBuilder {
	b.Params["group_id"] = v
	return b
}

// IDs of topics to be returned (100 maximum). By default, all topics are returned. If this parameter is set, the 'order', 'offset', and 'count' parameters are ignored.
func (b *BoardGetTopicsBuilder) TopicIDs(v []int64) *BoardGetTopicsBuilder {
	b.Params["topic_ids"] = v
	return b
}

// Sort order: '1' — by date updated in reverse chronological order. '2' — by date created in reverse chronological order. '-1' — by date updated in chronological order. '-2' — by date created in chronological order. If no sort order is specified, topics are returned in the order specified by the group administrator. Pinned topics are returned first, regardless of the sorting.
func (b *BoardGetTopicsBuilder) Order(v int64) *BoardGetTopicsBuilder {
	b.Params["order"] = v
	return b
}

// Offset needed to return a specific subset of topics.
func (b *BoardGetTopicsBuilder) Offset(v int64) *BoardGetTopicsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of topics to return.
func (b *BoardGetTopicsBuilder) Count(v int64) *BoardGetTopicsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return information about users who created topics or who posted there last, '0' — to return no additional fields (default)
func (b *BoardGetTopicsBuilder) Extended(v bool) *BoardGetTopicsBuilder {
	b.Params["extended"] = v
	return b
}

// '1' — to return the first comment in each topic,, '2' — to return the last comment in each topic,, '0' — to return no comments. By default: '0'.
func (b *BoardGetTopicsBuilder) Preview(v int64) *BoardGetTopicsBuilder {
	b.Params["preview"] = v
	return b
}

// Number of characters after which to truncate the previewed comment. To preview the full comment, specify '0'.
func (b *BoardGetTopicsBuilder) PreviewLength(v int64) *BoardGetTopicsBuilder {
	b.Params["preview_length"] = v
	return b
}

// BoardOpenTopicBuilder builder.
//
// Re-opens a previously closed topic on a community's discussion board.
//
// https://vk.com/dev/board.openTopic
type BoardOpenTopicBuilder struct {
	api.Params
}

// BoardOpenTopicBuilder func.
func NewBoardOpenTopicBuilder() *BoardOpenTopicBuilder {
	return &BoardOpenTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardOpenTopicBuilder) GroupID(v int64) *BoardOpenTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardOpenTopicBuilder) TopicID(v int64) *BoardOpenTopicBuilder {
	b.Params["topic_id"] = v
	return b
}

// BoardRestoreCommentBuilder builder.
//
// Restores a comment deleted from a topic on a community's discussion board.
//
// https://vk.com/dev/board.restoreComment
type BoardRestoreCommentBuilder struct {
	api.Params
}

// BoardRestoreCommentBuilder func.
func NewBoardRestoreCommentBuilder() *BoardRestoreCommentBuilder {
	return &BoardRestoreCommentBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardRestoreCommentBuilder) GroupID(v int64) *BoardRestoreCommentBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardRestoreCommentBuilder) TopicID(v int64) *BoardRestoreCommentBuilder {
	b.Params["topic_id"] = v
	return b
}

// Comment ID.
func (b *BoardRestoreCommentBuilder) CommentID(v int64) *BoardRestoreCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// BoardUnfixTopicBuilder builder.
//
// Unpins a pinned topic from the top of a community's discussion board.
//
// https://vk.com/dev/board.unfixTopic
type BoardUnfixTopicBuilder struct {
	api.Params
}

// BoardUnfixTopicBuilder func.
func NewBoardUnfixTopicBuilder() *BoardUnfixTopicBuilder {
	return &BoardUnfixTopicBuilder{api.Params{}}
}

// ID of the community that owns the discussion board.
func (b *BoardUnfixTopicBuilder) GroupID(v int64) *BoardUnfixTopicBuilder {
	b.Params["group_id"] = v
	return b
}

// Topic ID.
func (b *BoardUnfixTopicBuilder) TopicID(v int64) *BoardUnfixTopicBuilder {
	b.Params["topic_id"] = v
	return b
}

// DatabaseGetChairsBuilder builder.
//
// Returns list of chairs on a specified faculty.
//
// https://vk.com/dev/database.getChairs
type DatabaseGetChairsBuilder struct {
	api.Params
}

// DatabaseGetChairsBuilder func.
func NewDatabaseGetChairsBuilder() *DatabaseGetChairsBuilder {
	return &DatabaseGetChairsBuilder{api.Params{}}
}

// id of the faculty to get chairs from
func (b *DatabaseGetChairsBuilder) FacultyID(v int64) *DatabaseGetChairsBuilder {
	b.Params["faculty_id"] = v
	return b
}

// offset required to get a certain subset of chairs
func (b *DatabaseGetChairsBuilder) Offset(v int64) *DatabaseGetChairsBuilder {
	b.Params["offset"] = v
	return b
}

// amount of chairs to get
func (b *DatabaseGetChairsBuilder) Count(v int64) *DatabaseGetChairsBuilder {
	b.Params["count"] = v
	return b
}

// DatabaseGetCitiesBuilder builder.
//
// Returns a list of cities.
//
// https://vk.com/dev/database.getCities
type DatabaseGetCitiesBuilder struct {
	api.Params
}

// DatabaseGetCitiesBuilder func.
func NewDatabaseGetCitiesBuilder() *DatabaseGetCitiesBuilder {
	return &DatabaseGetCitiesBuilder{api.Params{}}
}

// Country ID.
func (b *DatabaseGetCitiesBuilder) CountryID(v int64) *DatabaseGetCitiesBuilder {
	b.Params["country_id"] = v
	return b
}

// Region ID.
func (b *DatabaseGetCitiesBuilder) RegionID(v int64) *DatabaseGetCitiesBuilder {
	b.Params["region_id"] = v
	return b
}

// Search query.
func (b *DatabaseGetCitiesBuilder) Q(v string) *DatabaseGetCitiesBuilder {
	b.Params["q"] = v
	return b
}

// '1' — to return all cities in the country, '0' — to return major cities in the country (default),
func (b *DatabaseGetCitiesBuilder) NeedAll(v bool) *DatabaseGetCitiesBuilder {
	b.Params["need_all"] = v
	return b
}

// Offset needed to return a specific subset of cities.
func (b *DatabaseGetCitiesBuilder) Offset(v int64) *DatabaseGetCitiesBuilder {
	b.Params["offset"] = v
	return b
}

// Number of cities to return.
func (b *DatabaseGetCitiesBuilder) Count(v int64) *DatabaseGetCitiesBuilder {
	b.Params["count"] = v
	return b
}

// DatabaseGetCitiesByIDBuilder builder.
//
// Returns information about cities by their IDs.
//
// https://vk.com/dev/database.getCitiesById
type DatabaseGetCitiesByIDBuilder struct {
	api.Params
}

// DatabaseGetCitiesByIDBuilder func.
func NewDatabaseGetCitiesByIDBuilder() *DatabaseGetCitiesByIDBuilder {
	return &DatabaseGetCitiesByIDBuilder{api.Params{}}
}

// City IDs.
func (b *DatabaseGetCitiesByIDBuilder) CityIDs(v []int64) *DatabaseGetCitiesByIDBuilder {
	b.Params["city_ids"] = v
	return b
}

// DatabaseGetCountriesBuilder builder.
//
// Returns a list of countries.
//
// https://vk.com/dev/database.getCountries
type DatabaseGetCountriesBuilder struct {
	api.Params
}

// DatabaseGetCountriesBuilder func.
func NewDatabaseGetCountriesBuilder() *DatabaseGetCountriesBuilder {
	return &DatabaseGetCountriesBuilder{api.Params{}}
}

// '1' — to return a full list of all countries, '0' — to return a list of countries near the current user's country (default).
func (b *DatabaseGetCountriesBuilder) NeedAll(v bool) *DatabaseGetCountriesBuilder {
	b.Params["need_all"] = v
	return b
}

// Country codes in [vk.com/dev/country_codes|ISO 3166-1 alpha-2] standard.
func (b *DatabaseGetCountriesBuilder) Code(v string) *DatabaseGetCountriesBuilder {
	b.Params["code"] = v
	return b
}

// Offset needed to return a specific subset of countries.
func (b *DatabaseGetCountriesBuilder) Offset(v int64) *DatabaseGetCountriesBuilder {
	b.Params["offset"] = v
	return b
}

// Number of countries to return.
func (b *DatabaseGetCountriesBuilder) Count(v int64) *DatabaseGetCountriesBuilder {
	b.Params["count"] = v
	return b
}

// DatabaseGetCountriesByIDBuilder builder.
//
// Returns information about countries by their IDs.
//
// https://vk.com/dev/database.getCountriesById
type DatabaseGetCountriesByIDBuilder struct {
	api.Params
}

// DatabaseGetCountriesByIDBuilder func.
func NewDatabaseGetCountriesByIDBuilder() *DatabaseGetCountriesByIDBuilder {
	return &DatabaseGetCountriesByIDBuilder{api.Params{}}
}

// Country IDs.
func (b *DatabaseGetCountriesByIDBuilder) CountryIDs(v []int64) *DatabaseGetCountriesByIDBuilder {
	b.Params["country_ids"] = v
	return b
}

// DatabaseGetFacultiesBuilder builder.
//
// Returns a list of faculties (i.e., university departments).
//
// https://vk.com/dev/database.getFaculties
type DatabaseGetFacultiesBuilder struct {
	api.Params
}

// DatabaseGetFacultiesBuilder func.
func NewDatabaseGetFacultiesBuilder() *DatabaseGetFacultiesBuilder {
	return &DatabaseGetFacultiesBuilder{api.Params{}}
}

// University ID.
func (b *DatabaseGetFacultiesBuilder) UniversityID(v int64) *DatabaseGetFacultiesBuilder {
	b.Params["university_id"] = v
	return b
}

// Offset needed to return a specific subset of faculties.
func (b *DatabaseGetFacultiesBuilder) Offset(v int64) *DatabaseGetFacultiesBuilder {
	b.Params["offset"] = v
	return b
}

// Number of faculties to return.
func (b *DatabaseGetFacultiesBuilder) Count(v int64) *DatabaseGetFacultiesBuilder {
	b.Params["count"] = v
	return b
}

// DatabaseGetMetroStationsBuilder builder.
//
// Get metro stations by city
//
// https://vk.com/dev/database.getMetroStations
type DatabaseGetMetroStationsBuilder struct {
	api.Params
}

// DatabaseGetMetroStationsBuilder func.
func NewDatabaseGetMetroStationsBuilder() *DatabaseGetMetroStationsBuilder {
	return &DatabaseGetMetroStationsBuilder{api.Params{}}
}

func (b *DatabaseGetMetroStationsBuilder) CityID(v int64) *DatabaseGetMetroStationsBuilder {
	b.Params["city_id"] = v
	return b
}

func (b *DatabaseGetMetroStationsBuilder) Offset(v int64) *DatabaseGetMetroStationsBuilder {
	b.Params["offset"] = v
	return b
}

func (b *DatabaseGetMetroStationsBuilder) Count(v int64) *DatabaseGetMetroStationsBuilder {
	b.Params["count"] = v
	return b
}

func (b *DatabaseGetMetroStationsBuilder) Extended(v bool) *DatabaseGetMetroStationsBuilder {
	b.Params["extended"] = v
	return b
}

// DatabaseGetMetroStationsByIDBuilder builder.
//
// Get metro station by his id
//
// https://vk.com/dev/database.getMetroStationsById
type DatabaseGetMetroStationsByIDBuilder struct {
	api.Params
}

// DatabaseGetMetroStationsByIDBuilder func.
func NewDatabaseGetMetroStationsByIDBuilder() *DatabaseGetMetroStationsByIDBuilder {
	return &DatabaseGetMetroStationsByIDBuilder{api.Params{}}
}

func (b *DatabaseGetMetroStationsByIDBuilder) StationIDs(v []int64) *DatabaseGetMetroStationsByIDBuilder {
	b.Params["station_ids"] = v
	return b
}

// DatabaseGetRegionsBuilder builder.
//
// Returns a list of regions.
//
// https://vk.com/dev/database.getRegions
type DatabaseGetRegionsBuilder struct {
	api.Params
}

// DatabaseGetRegionsBuilder func.
func NewDatabaseGetRegionsBuilder() *DatabaseGetRegionsBuilder {
	return &DatabaseGetRegionsBuilder{api.Params{}}
}

// Country ID, received in [vk.com/dev/database.getCountries|database.getCountries] method.
func (b *DatabaseGetRegionsBuilder) CountryID(v int64) *DatabaseGetRegionsBuilder {
	b.Params["country_id"] = v
	return b
}

// Search query.
func (b *DatabaseGetRegionsBuilder) Q(v string) *DatabaseGetRegionsBuilder {
	b.Params["q"] = v
	return b
}

// Offset needed to return specific subset of regions.
func (b *DatabaseGetRegionsBuilder) Offset(v int64) *DatabaseGetRegionsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of regions to return.
func (b *DatabaseGetRegionsBuilder) Count(v int64) *DatabaseGetRegionsBuilder {
	b.Params["count"] = v
	return b
}

// DatabaseGetSchoolClassesBuilder builder.
//
// Returns a list of school classes specified for the country.
//
// https://vk.com/dev/database.getSchoolClasses
type DatabaseGetSchoolClassesBuilder struct {
	api.Params
}

// DatabaseGetSchoolClassesBuilder func.
func NewDatabaseGetSchoolClassesBuilder() *DatabaseGetSchoolClassesBuilder {
	return &DatabaseGetSchoolClassesBuilder{api.Params{}}
}

// Country ID.
func (b *DatabaseGetSchoolClassesBuilder) CountryID(v int64) *DatabaseGetSchoolClassesBuilder {
	b.Params["country_id"] = v
	return b
}

// DatabaseGetSchoolsBuilder builder.
//
// Returns a list of schools.
//
// https://vk.com/dev/database.getSchools
type DatabaseGetSchoolsBuilder struct {
	api.Params
}

// DatabaseGetSchoolsBuilder func.
func NewDatabaseGetSchoolsBuilder() *DatabaseGetSchoolsBuilder {
	return &DatabaseGetSchoolsBuilder{api.Params{}}
}

// Search query.
func (b *DatabaseGetSchoolsBuilder) Q(v string) *DatabaseGetSchoolsBuilder {
	b.Params["q"] = v
	return b
}

// City ID.
func (b *DatabaseGetSchoolsBuilder) CityID(v int64) *DatabaseGetSchoolsBuilder {
	b.Params["city_id"] = v
	return b
}

// Offset needed to return a specific subset of schools.
func (b *DatabaseGetSchoolsBuilder) Offset(v int64) *DatabaseGetSchoolsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of schools to return.
func (b *DatabaseGetSchoolsBuilder) Count(v int64) *DatabaseGetSchoolsBuilder {
	b.Params["count"] = v
	return b
}

// DatabaseGetUniversitiesBuilder builder.
//
// Returns a list of higher education institutions.
//
// https://vk.com/dev/database.getUniversities
type DatabaseGetUniversitiesBuilder struct {
	api.Params
}

// DatabaseGetUniversitiesBuilder func.
func NewDatabaseGetUniversitiesBuilder() *DatabaseGetUniversitiesBuilder {
	return &DatabaseGetUniversitiesBuilder{api.Params{}}
}

// Search query.
func (b *DatabaseGetUniversitiesBuilder) Q(v string) *DatabaseGetUniversitiesBuilder {
	b.Params["q"] = v
	return b
}

// Country ID.
func (b *DatabaseGetUniversitiesBuilder) CountryID(v int64) *DatabaseGetUniversitiesBuilder {
	b.Params["country_id"] = v
	return b
}

// City ID.
func (b *DatabaseGetUniversitiesBuilder) CityID(v int64) *DatabaseGetUniversitiesBuilder {
	b.Params["city_id"] = v
	return b
}

// Offset needed to return a specific subset of universities.
func (b *DatabaseGetUniversitiesBuilder) Offset(v int64) *DatabaseGetUniversitiesBuilder {
	b.Params["offset"] = v
	return b
}

// Number of universities to return.
func (b *DatabaseGetUniversitiesBuilder) Count(v int64) *DatabaseGetUniversitiesBuilder {
	b.Params["count"] = v
	return b
}

// DocsAddBuilder builder.
//
// Copies a document to a user's or community's document list.
//
// https://vk.com/dev/docs.add
type DocsAddBuilder struct {
	api.Params
}

// DocsAddBuilder func.
func NewDocsAddBuilder() *DocsAddBuilder {
	return &DocsAddBuilder{api.Params{}}
}

// ID of the user or community that owns the document. Use a negative value to designate a community ID.
func (b *DocsAddBuilder) OwnerID(v int64) *DocsAddBuilder {
	b.Params["owner_id"] = v
	return b
}

// Document ID.
func (b *DocsAddBuilder) DocID(v int64) *DocsAddBuilder {
	b.Params["doc_id"] = v
	return b
}

// Access key. This parameter is required if 'access_key' was returned with the document's data.
func (b *DocsAddBuilder) AccessKey(v string) *DocsAddBuilder {
	b.Params["access_key"] = v
	return b
}

// DocsDeleteBuilder builder.
//
// Deletes a user or community document.
//
// https://vk.com/dev/docs.delete
type DocsDeleteBuilder struct {
	api.Params
}

// DocsDeleteBuilder func.
func NewDocsDeleteBuilder() *DocsDeleteBuilder {
	return &DocsDeleteBuilder{api.Params{}}
}

// ID of the user or community that owns the document. Use a negative value to designate a community ID.
func (b *DocsDeleteBuilder) OwnerID(v int64) *DocsDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Document ID.
func (b *DocsDeleteBuilder) DocID(v int64) *DocsDeleteBuilder {
	b.Params["doc_id"] = v
	return b
}

// DocsEditBuilder builder.
//
// Edits a document.
//
// https://vk.com/dev/docs.edit
type DocsEditBuilder struct {
	api.Params
}

// DocsEditBuilder func.
func NewDocsEditBuilder() *DocsEditBuilder {
	return &DocsEditBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *DocsEditBuilder) OwnerID(v int64) *DocsEditBuilder {
	b.Params["owner_id"] = v
	return b
}

// Document ID.
func (b *DocsEditBuilder) DocID(v int64) *DocsEditBuilder {
	b.Params["doc_id"] = v
	return b
}

// Document title.
func (b *DocsEditBuilder) Title(v string) *DocsEditBuilder {
	b.Params["title"] = v
	return b
}

// Document tags.
func (b *DocsEditBuilder) Tags(v []string) *DocsEditBuilder {
	b.Params["tags"] = v
	return b
}

// DocsGetBuilder builder.
//
// Returns detailed information about user or community documents.
//
// https://vk.com/dev/docs.get
type DocsGetBuilder struct {
	api.Params
}

// DocsGetBuilder func.
func NewDocsGetBuilder() *DocsGetBuilder {
	return &DocsGetBuilder{api.Params{}}
}

// Number of documents to return. By default, all documents.
func (b *DocsGetBuilder) Count(v int64) *DocsGetBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of documents.
func (b *DocsGetBuilder) Offset(v int64) *DocsGetBuilder {
	b.Params["offset"] = v
	return b
}

func (b *DocsGetBuilder) Type(v int64) *DocsGetBuilder {
	b.Params["type"] = v
	return b
}

// ID of the user or community that owns the documents. Use a negative value to designate a community ID.
func (b *DocsGetBuilder) OwnerID(v int64) *DocsGetBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *DocsGetBuilder) ReturnTags(v bool) *DocsGetBuilder {
	b.Params["return_tags"] = v
	return b
}

// DocsGetByIDBuilder builder.
//
// Returns information about documents by their IDs.
//
// https://vk.com/dev/docs.getById
type DocsGetByIDBuilder struct {
	api.Params
}

// DocsGetByIDBuilder func.
func NewDocsGetByIDBuilder() *DocsGetByIDBuilder {
	return &DocsGetByIDBuilder{api.Params{}}
}

// Document IDs. Example: , "66748_91488,66748_91455",
func (b *DocsGetByIDBuilder) Docs(v []string) *DocsGetByIDBuilder {
	b.Params["docs"] = v
	return b
}

func (b *DocsGetByIDBuilder) ReturnTags(v bool) *DocsGetByIDBuilder {
	b.Params["return_tags"] = v
	return b
}

// DocsGetMessagesUploadServerBuilder builder.
//
// Returns the server address for document upload.
//
// https://vk.com/dev/docs.getMessagesUploadServer
type DocsGetMessagesUploadServerBuilder struct {
	api.Params
}

// DocsGetMessagesUploadServerBuilder func.
func NewDocsGetMessagesUploadServerBuilder() *DocsGetMessagesUploadServerBuilder {
	return &DocsGetMessagesUploadServerBuilder{api.Params{}}
}

// Document type.
func (b *DocsGetMessagesUploadServerBuilder) Type(v string) *DocsGetMessagesUploadServerBuilder {
	b.Params["type"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. "
func (b *DocsGetMessagesUploadServerBuilder) PeerID(v int64) *DocsGetMessagesUploadServerBuilder {
	b.Params["peer_id"] = v
	return b
}

// DocsGetTypesBuilder builder.
//
// Returns documents types available for current user.
//
// https://vk.com/dev/docs.getTypes
type DocsGetTypesBuilder struct {
	api.Params
}

// DocsGetTypesBuilder func.
func NewDocsGetTypesBuilder() *DocsGetTypesBuilder {
	return &DocsGetTypesBuilder{api.Params{}}
}

// ID of the user or community that owns the documents. Use a negative value to designate a community ID.
func (b *DocsGetTypesBuilder) OwnerID(v int64) *DocsGetTypesBuilder {
	b.Params["owner_id"] = v
	return b
}

// DocsGetUploadServerBuilder builder.
//
// Returns the server address for document upload.
//
// https://vk.com/dev/docs.getUploadServer
type DocsGetUploadServerBuilder struct {
	api.Params
}

// DocsGetUploadServerBuilder func.
func NewDocsGetUploadServerBuilder() *DocsGetUploadServerBuilder {
	return &DocsGetUploadServerBuilder{api.Params{}}
}

// Community ID (if the document will be uploaded to the community).
func (b *DocsGetUploadServerBuilder) GroupID(v int64) *DocsGetUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

// DocsGetWallUploadServerBuilder builder.
//
// Returns the server address for document upload onto a user's or community's wall.
//
// https://vk.com/dev/docs.getWallUploadServer
type DocsGetWallUploadServerBuilder struct {
	api.Params
}

// DocsGetWallUploadServerBuilder func.
func NewDocsGetWallUploadServerBuilder() *DocsGetWallUploadServerBuilder {
	return &DocsGetWallUploadServerBuilder{api.Params{}}
}

// Community ID (if the document will be uploaded to the community).
func (b *DocsGetWallUploadServerBuilder) GroupID(v int64) *DocsGetWallUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

// DocsSaveBuilder builder.
//
// Saves a document after [vk.com/dev/upload_files_2|uploading it to a server].
//
// https://vk.com/dev/docs.save
type DocsSaveBuilder struct {
	api.Params
}

// DocsSaveBuilder func.
func NewDocsSaveBuilder() *DocsSaveBuilder {
	return &DocsSaveBuilder{api.Params{}}
}

// This parameter is returned when the file is [vk.com/dev/upload_files_2|uploaded to the server].
func (b *DocsSaveBuilder) File(v string) *DocsSaveBuilder {
	b.Params["file"] = v
	return b
}

// Document title.
func (b *DocsSaveBuilder) Title(v string) *DocsSaveBuilder {
	b.Params["title"] = v
	return b
}

// Document tags.
func (b *DocsSaveBuilder) Tags(v string) *DocsSaveBuilder {
	b.Params["tags"] = v
	return b
}

func (b *DocsSaveBuilder) ReturnTags(v bool) *DocsSaveBuilder {
	b.Params["return_tags"] = v
	return b
}

// DocsSearchBuilder builder.
//
// Returns a list of documents matching the search criteria.
//
// https://vk.com/dev/docs.search
type DocsSearchBuilder struct {
	api.Params
}

// DocsSearchBuilder func.
func NewDocsSearchBuilder() *DocsSearchBuilder {
	return &DocsSearchBuilder{api.Params{}}
}

// Search query string.
func (b *DocsSearchBuilder) Q(v string) *DocsSearchBuilder {
	b.Params["q"] = v
	return b
}

func (b *DocsSearchBuilder) SearchOwn(v bool) *DocsSearchBuilder {
	b.Params["search_own"] = v
	return b
}

// Number of results to return.
func (b *DocsSearchBuilder) Count(v int64) *DocsSearchBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *DocsSearchBuilder) Offset(v int64) *DocsSearchBuilder {
	b.Params["offset"] = v
	return b
}

func (b *DocsSearchBuilder) ReturnTags(v bool) *DocsSearchBuilder {
	b.Params["return_tags"] = v
	return b
}

// DownloadedGamesGetPaidStatusBuilder builder.
//
// https://vk.com/dev/downloadedGames.getPaidStatus
type DownloadedGamesGetPaidStatusBuilder struct {
	api.Params
}

// DownloadedGamesGetPaidStatusBuilder func.
func NewDownloadedGamesGetPaidStatusBuilder() *DownloadedGamesGetPaidStatusBuilder {
	return &DownloadedGamesGetPaidStatusBuilder{api.Params{}}
}

func (b *DownloadedGamesGetPaidStatusBuilder) UserID(v int64) *DownloadedGamesGetPaidStatusBuilder {
	b.Params["user_id"] = v
	return b
}

// FaveAddArticleBuilder builder.
//
// https://vk.com/dev/fave.addArticle
type FaveAddArticleBuilder struct {
	api.Params
}

// FaveAddArticleBuilder func.
func NewFaveAddArticleBuilder() *FaveAddArticleBuilder {
	return &FaveAddArticleBuilder{api.Params{}}
}

func (b *FaveAddArticleBuilder) URL(v string) *FaveAddArticleBuilder {
	b.Params["url"] = v
	return b
}

// FaveAddLinkBuilder builder.
//
// Adds a link to user faves.
//
// https://vk.com/dev/fave.addLink
type FaveAddLinkBuilder struct {
	api.Params
}

// FaveAddLinkBuilder func.
func NewFaveAddLinkBuilder() *FaveAddLinkBuilder {
	return &FaveAddLinkBuilder{api.Params{}}
}

// Link URL.
func (b *FaveAddLinkBuilder) Link(v string) *FaveAddLinkBuilder {
	b.Params["link"] = v
	return b
}

// FaveAddPageBuilder builder.
//
// https://vk.com/dev/fave.addPage
type FaveAddPageBuilder struct {
	api.Params
}

// FaveAddPageBuilder func.
func NewFaveAddPageBuilder() *FaveAddPageBuilder {
	return &FaveAddPageBuilder{api.Params{}}
}

func (b *FaveAddPageBuilder) UserID(v int64) *FaveAddPageBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *FaveAddPageBuilder) GroupID(v int64) *FaveAddPageBuilder {
	b.Params["group_id"] = v
	return b
}

// FaveAddPostBuilder builder.
//
// https://vk.com/dev/fave.addPost
type FaveAddPostBuilder struct {
	api.Params
}

// FaveAddPostBuilder func.
func NewFaveAddPostBuilder() *FaveAddPostBuilder {
	return &FaveAddPostBuilder{api.Params{}}
}

func (b *FaveAddPostBuilder) OwnerID(v int64) *FaveAddPostBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *FaveAddPostBuilder) ID(v int64) *FaveAddPostBuilder {
	b.Params["id"] = v
	return b
}

func (b *FaveAddPostBuilder) AccessKey(v string) *FaveAddPostBuilder {
	b.Params["access_key"] = v
	return b
}

// FaveAddProductBuilder builder.
//
// https://vk.com/dev/fave.addProduct
type FaveAddProductBuilder struct {
	api.Params
}

// FaveAddProductBuilder func.
func NewFaveAddProductBuilder() *FaveAddProductBuilder {
	return &FaveAddProductBuilder{api.Params{}}
}

func (b *FaveAddProductBuilder) OwnerID(v int64) *FaveAddProductBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *FaveAddProductBuilder) ID(v int64) *FaveAddProductBuilder {
	b.Params["id"] = v
	return b
}

func (b *FaveAddProductBuilder) AccessKey(v string) *FaveAddProductBuilder {
	b.Params["access_key"] = v
	return b
}

// FaveAddTagBuilder builder.
//
// https://vk.com/dev/fave.addTag
type FaveAddTagBuilder struct {
	api.Params
}

// FaveAddTagBuilder func.
func NewFaveAddTagBuilder() *FaveAddTagBuilder {
	return &FaveAddTagBuilder{api.Params{}}
}

func (b *FaveAddTagBuilder) Name(v string) *FaveAddTagBuilder {
	b.Params["name"] = v
	return b
}

func (b *FaveAddTagBuilder) Position(v string) *FaveAddTagBuilder {
	b.Params["position"] = v
	return b
}

// FaveAddVideoBuilder builder.
//
// https://vk.com/dev/fave.addVideo
type FaveAddVideoBuilder struct {
	api.Params
}

// FaveAddVideoBuilder func.
func NewFaveAddVideoBuilder() *FaveAddVideoBuilder {
	return &FaveAddVideoBuilder{api.Params{}}
}

func (b *FaveAddVideoBuilder) OwnerID(v int64) *FaveAddVideoBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *FaveAddVideoBuilder) ID(v int64) *FaveAddVideoBuilder {
	b.Params["id"] = v
	return b
}

func (b *FaveAddVideoBuilder) AccessKey(v string) *FaveAddVideoBuilder {
	b.Params["access_key"] = v
	return b
}

// FaveEditTagBuilder builder.
//
// https://vk.com/dev/fave.editTag
type FaveEditTagBuilder struct {
	api.Params
}

// FaveEditTagBuilder func.
func NewFaveEditTagBuilder() *FaveEditTagBuilder {
	return &FaveEditTagBuilder{api.Params{}}
}

func (b *FaveEditTagBuilder) ID(v int64) *FaveEditTagBuilder {
	b.Params["id"] = v
	return b
}

func (b *FaveEditTagBuilder) Name(v string) *FaveEditTagBuilder {
	b.Params["name"] = v
	return b
}

// FaveGetBuilder builder.
//
// https://vk.com/dev/fave.get
type FaveGetBuilder struct {
	api.Params
}

// FaveGetBuilder func.
func NewFaveGetBuilder() *FaveGetBuilder {
	return &FaveGetBuilder{api.Params{}}
}

// '1' — to return additional 'wall', 'profiles', and 'groups' fields. By default: '0'.
func (b *FaveGetBuilder) Extended(v bool) *FaveGetBuilder {
	b.Params["extended"] = v
	return b
}

func (b *FaveGetBuilder) ItemType(v string) *FaveGetBuilder {
	b.Params["item_type"] = v
	return b
}

// Tag ID.
func (b *FaveGetBuilder) TagID(v int64) *FaveGetBuilder {
	b.Params["tag_id"] = v
	return b
}

// Offset needed to return a specific subset of users.
func (b *FaveGetBuilder) Offset(v int64) *FaveGetBuilder {
	b.Params["offset"] = v
	return b
}

// Number of users to return.
func (b *FaveGetBuilder) Count(v int64) *FaveGetBuilder {
	b.Params["count"] = v
	return b
}

func (b *FaveGetBuilder) Fields(v string) *FaveGetBuilder {
	b.Params["fields"] = v
	return b
}

func (b *FaveGetBuilder) IsFromSnackbar(v bool) *FaveGetBuilder {
	b.Params["is_from_snackbar"] = v
	return b
}

// FaveGetPagesBuilder builder.
//
// https://vk.com/dev/fave.getPages
type FaveGetPagesBuilder struct {
	api.Params
}

// FaveGetPagesBuilder func.
func NewFaveGetPagesBuilder() *FaveGetPagesBuilder {
	return &FaveGetPagesBuilder{api.Params{}}
}

func (b *FaveGetPagesBuilder) Offset(v int64) *FaveGetPagesBuilder {
	b.Params["offset"] = v
	return b
}

func (b *FaveGetPagesBuilder) Count(v int64) *FaveGetPagesBuilder {
	b.Params["count"] = v
	return b
}

func (b *FaveGetPagesBuilder) Type(v string) *FaveGetPagesBuilder {
	b.Params["type"] = v
	return b
}

func (b *FaveGetPagesBuilder) Fields(v []BaseUserGroupFields) *FaveGetPagesBuilder {
	b.Params["fields"] = v
	return b
}

func (b *FaveGetPagesBuilder) TagID(v int64) *FaveGetPagesBuilder {
	b.Params["tag_id"] = v
	return b
}

// FaveGetTagsBuilder builder.
//
// https://vk.com/dev/fave.getTags
type FaveGetTagsBuilder struct {
	api.Params
}

// FaveGetTagsBuilder func.
func NewFaveGetTagsBuilder() *FaveGetTagsBuilder {
	return &FaveGetTagsBuilder{api.Params{}}
}

// FaveMarkSeenBuilder builder.
//
// https://vk.com/dev/fave.markSeen
type FaveMarkSeenBuilder struct {
	api.Params
}

// FaveMarkSeenBuilder func.
func NewFaveMarkSeenBuilder() *FaveMarkSeenBuilder {
	return &FaveMarkSeenBuilder{api.Params{}}
}

// FaveRemoveArticleBuilder builder.
//
// https://vk.com/dev/fave.removeArticle
type FaveRemoveArticleBuilder struct {
	api.Params
}

// FaveRemoveArticleBuilder func.
func NewFaveRemoveArticleBuilder() *FaveRemoveArticleBuilder {
	return &FaveRemoveArticleBuilder{api.Params{}}
}

func (b *FaveRemoveArticleBuilder) OwnerID(v int64) *FaveRemoveArticleBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *FaveRemoveArticleBuilder) ArticleID(v int64) *FaveRemoveArticleBuilder {
	b.Params["article_id"] = v
	return b
}

// FaveRemoveLinkBuilder builder.
//
// Removes link from the user's faves.
//
// https://vk.com/dev/fave.removeLink
type FaveRemoveLinkBuilder struct {
	api.Params
}

// FaveRemoveLinkBuilder func.
func NewFaveRemoveLinkBuilder() *FaveRemoveLinkBuilder {
	return &FaveRemoveLinkBuilder{api.Params{}}
}

// Link ID (can be obtained by [vk.com/dev/faves.getLinks|faves.getLinks] method).
func (b *FaveRemoveLinkBuilder) LinkID(v string) *FaveRemoveLinkBuilder {
	b.Params["link_id"] = v
	return b
}

// Link URL
func (b *FaveRemoveLinkBuilder) Link(v string) *FaveRemoveLinkBuilder {
	b.Params["link"] = v
	return b
}

// FaveRemovePageBuilder builder.
//
// https://vk.com/dev/fave.removePage
type FaveRemovePageBuilder struct {
	api.Params
}

// FaveRemovePageBuilder func.
func NewFaveRemovePageBuilder() *FaveRemovePageBuilder {
	return &FaveRemovePageBuilder{api.Params{}}
}

func (b *FaveRemovePageBuilder) UserID(v int64) *FaveRemovePageBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *FaveRemovePageBuilder) GroupID(v int64) *FaveRemovePageBuilder {
	b.Params["group_id"] = v
	return b
}

// FaveRemovePostBuilder builder.
//
// https://vk.com/dev/fave.removePost
type FaveRemovePostBuilder struct {
	api.Params
}

// FaveRemovePostBuilder func.
func NewFaveRemovePostBuilder() *FaveRemovePostBuilder {
	return &FaveRemovePostBuilder{api.Params{}}
}

func (b *FaveRemovePostBuilder) OwnerID(v int64) *FaveRemovePostBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *FaveRemovePostBuilder) ID(v int64) *FaveRemovePostBuilder {
	b.Params["id"] = v
	return b
}

// FaveRemoveProductBuilder builder.
//
// https://vk.com/dev/fave.removeProduct
type FaveRemoveProductBuilder struct {
	api.Params
}

// FaveRemoveProductBuilder func.
func NewFaveRemoveProductBuilder() *FaveRemoveProductBuilder {
	return &FaveRemoveProductBuilder{api.Params{}}
}

func (b *FaveRemoveProductBuilder) OwnerID(v int64) *FaveRemoveProductBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *FaveRemoveProductBuilder) ID(v int64) *FaveRemoveProductBuilder {
	b.Params["id"] = v
	return b
}

// FaveRemoveTagBuilder builder.
//
// https://vk.com/dev/fave.removeTag
type FaveRemoveTagBuilder struct {
	api.Params
}

// FaveRemoveTagBuilder func.
func NewFaveRemoveTagBuilder() *FaveRemoveTagBuilder {
	return &FaveRemoveTagBuilder{api.Params{}}
}

func (b *FaveRemoveTagBuilder) ID(v int64) *FaveRemoveTagBuilder {
	b.Params["id"] = v
	return b
}

// FaveReorderTagsBuilder builder.
//
// https://vk.com/dev/fave.reorderTags
type FaveReorderTagsBuilder struct {
	api.Params
}

// FaveReorderTagsBuilder func.
func NewFaveReorderTagsBuilder() *FaveReorderTagsBuilder {
	return &FaveReorderTagsBuilder{api.Params{}}
}

func (b *FaveReorderTagsBuilder) IDs(v []int64) *FaveReorderTagsBuilder {
	b.Params["ids"] = v
	return b
}

// FaveSetPageTagsBuilder builder.
//
// https://vk.com/dev/fave.setPageTags
type FaveSetPageTagsBuilder struct {
	api.Params
}

// FaveSetPageTagsBuilder func.
func NewFaveSetPageTagsBuilder() *FaveSetPageTagsBuilder {
	return &FaveSetPageTagsBuilder{api.Params{}}
}

func (b *FaveSetPageTagsBuilder) UserID(v int64) *FaveSetPageTagsBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *FaveSetPageTagsBuilder) GroupID(v int64) *FaveSetPageTagsBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *FaveSetPageTagsBuilder) TagIDs(v []int64) *FaveSetPageTagsBuilder {
	b.Params["tag_ids"] = v
	return b
}

// FaveSetTagsBuilder builder.
//
// https://vk.com/dev/fave.setTags
type FaveSetTagsBuilder struct {
	api.Params
}

// FaveSetTagsBuilder func.
func NewFaveSetTagsBuilder() *FaveSetTagsBuilder {
	return &FaveSetTagsBuilder{api.Params{}}
}

func (b *FaveSetTagsBuilder) ItemType(v string) *FaveSetTagsBuilder {
	b.Params["item_type"] = v
	return b
}

func (b *FaveSetTagsBuilder) ItemOwnerID(v int64) *FaveSetTagsBuilder {
	b.Params["item_owner_id"] = v
	return b
}

func (b *FaveSetTagsBuilder) ItemID(v int64) *FaveSetTagsBuilder {
	b.Params["item_id"] = v
	return b
}

func (b *FaveSetTagsBuilder) TagIDs(v []int64) *FaveSetTagsBuilder {
	b.Params["tag_ids"] = v
	return b
}

func (b *FaveSetTagsBuilder) LinkID(v string) *FaveSetTagsBuilder {
	b.Params["link_id"] = v
	return b
}

func (b *FaveSetTagsBuilder) LinkURL(v string) *FaveSetTagsBuilder {
	b.Params["link_url"] = v
	return b
}

// FaveTrackPageInteractionBuilder builder.
//
// https://vk.com/dev/fave.trackPageInteraction
type FaveTrackPageInteractionBuilder struct {
	api.Params
}

// FaveTrackPageInteractionBuilder func.
func NewFaveTrackPageInteractionBuilder() *FaveTrackPageInteractionBuilder {
	return &FaveTrackPageInteractionBuilder{api.Params{}}
}

func (b *FaveTrackPageInteractionBuilder) UserID(v int64) *FaveTrackPageInteractionBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *FaveTrackPageInteractionBuilder) GroupID(v int64) *FaveTrackPageInteractionBuilder {
	b.Params["group_id"] = v
	return b
}

// FriendsAddBuilder builder.
//
// Approves or creates a friend request.
//
// https://vk.com/dev/friends.add
type FriendsAddBuilder struct {
	api.Params
}

// FriendsAddBuilder func.
func NewFriendsAddBuilder() *FriendsAddBuilder {
	return &FriendsAddBuilder{api.Params{}}
}

// ID of the user whose friend request will be approved or to whom a friend request will be sent.
func (b *FriendsAddBuilder) UserID(v int64) *FriendsAddBuilder {
	b.Params["user_id"] = v
	return b
}

// Text of the message (up to 500 characters) for the friend request, if any.
func (b *FriendsAddBuilder) Text(v string) *FriendsAddBuilder {
	b.Params["text"] = v
	return b
}

// '1' to pass an incoming request to followers list.
func (b *FriendsAddBuilder) Follow(v bool) *FriendsAddBuilder {
	b.Params["follow"] = v
	return b
}

// FriendsAddListBuilder builder.
//
// Creates a new friend list for the current user.
//
// https://vk.com/dev/friends.addList
type FriendsAddListBuilder struct {
	api.Params
}

// FriendsAddListBuilder func.
func NewFriendsAddListBuilder() *FriendsAddListBuilder {
	return &FriendsAddListBuilder{api.Params{}}
}

// Name of the friend list.
func (b *FriendsAddListBuilder) Name(v string) *FriendsAddListBuilder {
	b.Params["name"] = v
	return b
}

// IDs of users to be added to the friend list.
func (b *FriendsAddListBuilder) UserIDs(v []int64) *FriendsAddListBuilder {
	b.Params["user_ids"] = v
	return b
}

// FriendsAreFriendsBuilder builder.
//
// Checks the current user's friendship status with other specified users.
//
// https://vk.com/dev/friends.areFriends
type FriendsAreFriendsBuilder struct {
	api.Params
}

// FriendsAreFriendsBuilder func.
func NewFriendsAreFriendsBuilder() *FriendsAreFriendsBuilder {
	return &FriendsAreFriendsBuilder{api.Params{}}
}

// IDs of the users whose friendship status to check.
func (b *FriendsAreFriendsBuilder) UserIDs(v []int64) *FriendsAreFriendsBuilder {
	b.Params["user_ids"] = v
	return b
}

// '1' — to return 'sign' field. 'sign' is md5("{id}_{user_id}_{friends_status}_{application_secret}"), where id is current user ID. This field allows to check that data has not been modified by the client. By default: '0'.
func (b *FriendsAreFriendsBuilder) NeedSign(v bool) *FriendsAreFriendsBuilder {
	b.Params["need_sign"] = v
	return b
}

// Return friend request read_state field
func (b *FriendsAreFriendsBuilder) Extended(v bool) *FriendsAreFriendsBuilder {
	b.Params["extended"] = v
	return b
}

// FriendsDeleteBuilder builder.
//
// Declines a friend request or deletes a user from the current user's friend list.
//
// https://vk.com/dev/friends.delete
type FriendsDeleteBuilder struct {
	api.Params
}

// FriendsDeleteBuilder func.
func NewFriendsDeleteBuilder() *FriendsDeleteBuilder {
	return &FriendsDeleteBuilder{api.Params{}}
}

// ID of the user whose friend request is to be declined or who is to be deleted from the current user's friend list.
func (b *FriendsDeleteBuilder) UserID(v int64) *FriendsDeleteBuilder {
	b.Params["user_id"] = v
	return b
}

// FriendsDeleteAllRequestsBuilder builder.
//
// Marks all incoming friend requests as viewed.
//
// https://vk.com/dev/friends.deleteAllRequests
type FriendsDeleteAllRequestsBuilder struct {
	api.Params
}

// FriendsDeleteAllRequestsBuilder func.
func NewFriendsDeleteAllRequestsBuilder() *FriendsDeleteAllRequestsBuilder {
	return &FriendsDeleteAllRequestsBuilder{api.Params{}}
}

// FriendsDeleteListBuilder builder.
//
// Deletes a friend list of the current user.
//
// https://vk.com/dev/friends.deleteList
type FriendsDeleteListBuilder struct {
	api.Params
}

// FriendsDeleteListBuilder func.
func NewFriendsDeleteListBuilder() *FriendsDeleteListBuilder {
	return &FriendsDeleteListBuilder{api.Params{}}
}

// ID of the friend list to delete.
func (b *FriendsDeleteListBuilder) ListID(v int64) *FriendsDeleteListBuilder {
	b.Params["list_id"] = v
	return b
}

// FriendsEditBuilder builder.
//
// Edits the friend lists of the selected user.
//
// https://vk.com/dev/friends.edit
type FriendsEditBuilder struct {
	api.Params
}

// FriendsEditBuilder func.
func NewFriendsEditBuilder() *FriendsEditBuilder {
	return &FriendsEditBuilder{api.Params{}}
}

// ID of the user whose friend list is to be edited.
func (b *FriendsEditBuilder) UserID(v int64) *FriendsEditBuilder {
	b.Params["user_id"] = v
	return b
}

// IDs of the friend lists to which to add the user.
func (b *FriendsEditBuilder) ListIDs(v []int64) *FriendsEditBuilder {
	b.Params["list_ids"] = v
	return b
}

// FriendsEditListBuilder builder.
//
// Edits a friend list of the current user.
//
// https://vk.com/dev/friends.editList
type FriendsEditListBuilder struct {
	api.Params
}

// FriendsEditListBuilder func.
func NewFriendsEditListBuilder() *FriendsEditListBuilder {
	return &FriendsEditListBuilder{api.Params{}}
}

// Name of the friend list.
func (b *FriendsEditListBuilder) Name(v string) *FriendsEditListBuilder {
	b.Params["name"] = v
	return b
}

// Friend list ID.
func (b *FriendsEditListBuilder) ListID(v int64) *FriendsEditListBuilder {
	b.Params["list_id"] = v
	return b
}

// IDs of users in the friend list.
func (b *FriendsEditListBuilder) UserIDs(v []int64) *FriendsEditListBuilder {
	b.Params["user_ids"] = v
	return b
}

// (Applies if 'user_ids' parameter is not set.), User IDs to add to the friend list.
func (b *FriendsEditListBuilder) AddUserIDs(v []int64) *FriendsEditListBuilder {
	b.Params["add_user_ids"] = v
	return b
}

// (Applies if 'user_ids' parameter is not set.), User IDs to delete from the friend list.
func (b *FriendsEditListBuilder) DeleteUserIDs(v []int64) *FriendsEditListBuilder {
	b.Params["delete_user_ids"] = v
	return b
}

// FriendsGetBuilder builder.
//
// Returns a list of user IDs or detailed information about a user's friends.
//
// https://vk.com/dev/friends.get
type FriendsGetBuilder struct {
	api.Params
}

// FriendsGetBuilder func.
func NewFriendsGetBuilder() *FriendsGetBuilder {
	return &FriendsGetBuilder{api.Params{}}
}

// User ID. By default, the current user ID.
func (b *FriendsGetBuilder) UserID(v int64) *FriendsGetBuilder {
	b.Params["user_id"] = v
	return b
}

// Sort order: , 'name' — by name (enabled only if the 'fields' parameter is used), 'hints' — by rating, similar to how friends are sorted in My friends section, , This parameter is available only for [vk.com/dev/standalone|desktop applications].
func (b *FriendsGetBuilder) Order(v string) *FriendsGetBuilder {
	b.Params["order"] = v
	return b
}

// ID of the friend list returned by the [vk.com/dev/friends.getLists|friends.getLists] method to be used as the source. This parameter is taken into account only when the uid parameter is set to the current user ID. This parameter is available only for [vk.com/dev/standalone|desktop applications].
func (b *FriendsGetBuilder) ListID(v int64) *FriendsGetBuilder {
	b.Params["list_id"] = v
	return b
}

// Number of friends to return.
func (b *FriendsGetBuilder) Count(v int64) *FriendsGetBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of friends.
func (b *FriendsGetBuilder) Offset(v int64) *FriendsGetBuilder {
	b.Params["offset"] = v
	return b
}

// Profile fields to return. Sample values: 'uid', 'first_name', 'last_name', 'nickname', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'domain', 'has_mobile', 'rate', 'contacts', 'education'.
func (b *FriendsGetBuilder) Fields(v []UsersFields) *FriendsGetBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: , 'nom' — nominative (default) , 'gen' — genitive , 'dat' — dative , 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *FriendsGetBuilder) NameCase(v string) *FriendsGetBuilder {
	b.Params["name_case"] = v
	return b
}

func (b *FriendsGetBuilder) Ref(v string) *FriendsGetBuilder {
	b.Params["ref"] = v
	return b
}

// FriendsGetAppUsersBuilder builder.
//
// Returns a list of IDs of the current user's friends who installed the application.
//
// https://vk.com/dev/friends.getAppUsers
type FriendsGetAppUsersBuilder struct {
	api.Params
}

// FriendsGetAppUsersBuilder func.
func NewFriendsGetAppUsersBuilder() *FriendsGetAppUsersBuilder {
	return &FriendsGetAppUsersBuilder{api.Params{}}
}

// FriendsGetByPhonesBuilder builder.
//
// Returns a list of the current user's friends whose phone numbers, validated or specified in a profile, are in a given list.
//
// https://vk.com/dev/friends.getByPhones
type FriendsGetByPhonesBuilder struct {
	api.Params
}

// FriendsGetByPhonesBuilder func.
func NewFriendsGetByPhonesBuilder() *FriendsGetByPhonesBuilder {
	return &FriendsGetByPhonesBuilder{api.Params{}}
}

// List of phone numbers in MSISDN format (maximum 1000). Example: "+79219876543,+79111234567"
func (b *FriendsGetByPhonesBuilder) Phones(v []string) *FriendsGetByPhonesBuilder {
	b.Params["phones"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online, counters'.
func (b *FriendsGetByPhonesBuilder) Fields(v []UsersFields) *FriendsGetByPhonesBuilder {
	b.Params["fields"] = v
	return b
}

// FriendsGetListsBuilder builder.
//
// Returns a list of the user's friend lists.
//
// https://vk.com/dev/friends.getLists
type FriendsGetListsBuilder struct {
	api.Params
}

// FriendsGetListsBuilder func.
func NewFriendsGetListsBuilder() *FriendsGetListsBuilder {
	return &FriendsGetListsBuilder{api.Params{}}
}

// User ID.
func (b *FriendsGetListsBuilder) UserID(v int64) *FriendsGetListsBuilder {
	b.Params["user_id"] = v
	return b
}

// '1' — to return system friend lists. By default: '0'.
func (b *FriendsGetListsBuilder) ReturnSystem(v bool) *FriendsGetListsBuilder {
	b.Params["return_system"] = v
	return b
}

// FriendsGetMutualBuilder builder.
//
// Returns a list of user IDs of the mutual friends of two users.
//
// https://vk.com/dev/friends.getMutual
type FriendsGetMutualBuilder struct {
	api.Params
}

// FriendsGetMutualBuilder func.
func NewFriendsGetMutualBuilder() *FriendsGetMutualBuilder {
	return &FriendsGetMutualBuilder{api.Params{}}
}

// ID of the user whose friends will be checked against the friends of the user specified in 'target_uid'.
func (b *FriendsGetMutualBuilder) SourceUid(v int64) *FriendsGetMutualBuilder {
	b.Params["source_uid"] = v
	return b
}

// ID of the user whose friends will be checked against the friends of the user specified in 'source_uid'.
func (b *FriendsGetMutualBuilder) TargetUid(v int64) *FriendsGetMutualBuilder {
	b.Params["target_uid"] = v
	return b
}

// IDs of the users whose friends will be checked against the friends of the user specified in 'source_uid'.
func (b *FriendsGetMutualBuilder) TargetUids(v []int64) *FriendsGetMutualBuilder {
	b.Params["target_uids"] = v
	return b
}

// Sort order: 'random' — random order
func (b *FriendsGetMutualBuilder) Order(v string) *FriendsGetMutualBuilder {
	b.Params["order"] = v
	return b
}

// Number of mutual friends to return.
func (b *FriendsGetMutualBuilder) Count(v int64) *FriendsGetMutualBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of mutual friends.
func (b *FriendsGetMutualBuilder) Offset(v int64) *FriendsGetMutualBuilder {
	b.Params["offset"] = v
	return b
}

// FriendsGetOnlineBuilder builder.
//
// Returns a list of user IDs of a user's friends who are online.
//
// https://vk.com/dev/friends.getOnline
type FriendsGetOnlineBuilder struct {
	api.Params
}

// FriendsGetOnlineBuilder func.
func NewFriendsGetOnlineBuilder() *FriendsGetOnlineBuilder {
	return &FriendsGetOnlineBuilder{api.Params{}}
}

// User ID.
func (b *FriendsGetOnlineBuilder) UserID(v int64) *FriendsGetOnlineBuilder {
	b.Params["user_id"] = v
	return b
}

// Friend list ID. If this parameter is not set, information about all online friends is returned.
func (b *FriendsGetOnlineBuilder) ListID(v int64) *FriendsGetOnlineBuilder {
	b.Params["list_id"] = v
	return b
}

// '1' — to return an additional 'online_mobile' field, '0' — (default),
func (b *FriendsGetOnlineBuilder) OnlineMobile(v bool) *FriendsGetOnlineBuilder {
	b.Params["online_mobile"] = v
	return b
}

// Sort order: 'random' — random order
func (b *FriendsGetOnlineBuilder) Order(v string) *FriendsGetOnlineBuilder {
	b.Params["order"] = v
	return b
}

// Number of friends to return.
func (b *FriendsGetOnlineBuilder) Count(v int64) *FriendsGetOnlineBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of friends.
func (b *FriendsGetOnlineBuilder) Offset(v int64) *FriendsGetOnlineBuilder {
	b.Params["offset"] = v
	return b
}

// FriendsGetRecentBuilder builder.
//
// Returns a list of user IDs of the current user's recently added friends.
//
// https://vk.com/dev/friends.getRecent
type FriendsGetRecentBuilder struct {
	api.Params
}

// FriendsGetRecentBuilder func.
func NewFriendsGetRecentBuilder() *FriendsGetRecentBuilder {
	return &FriendsGetRecentBuilder{api.Params{}}
}

// Number of recently added friends to return.
func (b *FriendsGetRecentBuilder) Count(v int64) *FriendsGetRecentBuilder {
	b.Params["count"] = v
	return b
}

// FriendsGetRequestsBuilder builder.
//
// Returns information about the current user's incoming and outgoing friend requests.
//
// https://vk.com/dev/friends.getRequests
type FriendsGetRequestsBuilder struct {
	api.Params
}

// FriendsGetRequestsBuilder func.
func NewFriendsGetRequestsBuilder() *FriendsGetRequestsBuilder {
	return &FriendsGetRequestsBuilder{api.Params{}}
}

// Offset needed to return a specific subset of friend requests.
func (b *FriendsGetRequestsBuilder) Offset(v int64) *FriendsGetRequestsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of friend requests to return (default 100, maximum 1000).
func (b *FriendsGetRequestsBuilder) Count(v int64) *FriendsGetRequestsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return response messages from users who have sent a friend request or, if 'suggested' is set to '1', to return a list of suggested friends
func (b *FriendsGetRequestsBuilder) Extended(v bool) *FriendsGetRequestsBuilder {
	b.Params["extended"] = v
	return b
}

// '1' — to return a list of mutual friends (up to 20), if any
func (b *FriendsGetRequestsBuilder) NeedMutual(v bool) *FriendsGetRequestsBuilder {
	b.Params["need_mutual"] = v
	return b
}

// '1' — to return outgoing requests, '0' — to return incoming requests (default)
func (b *FriendsGetRequestsBuilder) Out(v bool) *FriendsGetRequestsBuilder {
	b.Params["out"] = v
	return b
}

// Sort order: '1' — by number of mutual friends, '0' — by date
func (b *FriendsGetRequestsBuilder) Sort(v int64) *FriendsGetRequestsBuilder {
	b.Params["sort"] = v
	return b
}

func (b *FriendsGetRequestsBuilder) NeedViewed(v bool) *FriendsGetRequestsBuilder {
	b.Params["need_viewed"] = v
	return b
}

// '1' — to return a list of suggested friends, '0' — to return friend requests (default)
func (b *FriendsGetRequestsBuilder) Suggested(v bool) *FriendsGetRequestsBuilder {
	b.Params["suggested"] = v
	return b
}

func (b *FriendsGetRequestsBuilder) Ref(v string) *FriendsGetRequestsBuilder {
	b.Params["ref"] = v
	return b
}

func (b *FriendsGetRequestsBuilder) Fields(v []UsersFields) *FriendsGetRequestsBuilder {
	b.Params["fields"] = v
	return b
}

// FriendsGetSuggestionsBuilder builder.
//
// Returns a list of profiles of users whom the current user may know.
//
// https://vk.com/dev/friends.getSuggestions
type FriendsGetSuggestionsBuilder struct {
	api.Params
}

// FriendsGetSuggestionsBuilder func.
func NewFriendsGetSuggestionsBuilder() *FriendsGetSuggestionsBuilder {
	return &FriendsGetSuggestionsBuilder{api.Params{}}
}

// Types of potential friends to return: 'mutual' — users with many mutual friends , 'contacts' — users found with the [vk.com/dev/account.importContacts|account.importContacts] method , 'mutual_contacts' — users who imported the same contacts as the current user with the [vk.com/dev/account.importContacts|account.importContacts] method
func (b *FriendsGetSuggestionsBuilder) Filter(v []string) *FriendsGetSuggestionsBuilder {
	b.Params["filter"] = v
	return b
}

// Number of suggestions to return.
func (b *FriendsGetSuggestionsBuilder) Count(v int64) *FriendsGetSuggestionsBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of suggestions.
func (b *FriendsGetSuggestionsBuilder) Offset(v int64) *FriendsGetSuggestionsBuilder {
	b.Params["offset"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online', 'counters'.
func (b *FriendsGetSuggestionsBuilder) Fields(v []UsersFields) *FriendsGetSuggestionsBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: , 'nom' — nominative (default) , 'gen' — genitive , 'dat' — dative , 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *FriendsGetSuggestionsBuilder) NameCase(v string) *FriendsGetSuggestionsBuilder {
	b.Params["name_case"] = v
	return b
}

// FriendsSearchBuilder builder.
//
// Returns a list of friends matching the search criteria.
//
// https://vk.com/dev/friends.search
type FriendsSearchBuilder struct {
	api.Params
}

// FriendsSearchBuilder func.
func NewFriendsSearchBuilder() *FriendsSearchBuilder {
	return &FriendsSearchBuilder{api.Params{}}
}

// User ID.
func (b *FriendsSearchBuilder) UserID(v int64) *FriendsSearchBuilder {
	b.Params["user_id"] = v
	return b
}

// Search query string (e.g., 'Vasya Babich').
func (b *FriendsSearchBuilder) Q(v string) *FriendsSearchBuilder {
	b.Params["q"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online',
func (b *FriendsSearchBuilder) Fields(v []UsersFields) *FriendsSearchBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *FriendsSearchBuilder) NameCase(v string) *FriendsSearchBuilder {
	b.Params["name_case"] = v
	return b
}

// Offset needed to return a specific subset of friends.
func (b *FriendsSearchBuilder) Offset(v int64) *FriendsSearchBuilder {
	b.Params["offset"] = v
	return b
}

// Number of friends to return.
func (b *FriendsSearchBuilder) Count(v int64) *FriendsSearchBuilder {
	b.Params["count"] = v
	return b
}

// GiftsGetBuilder builder.
//
// Returns a list of user gifts.
//
// https://vk.com/dev/gifts.get
type GiftsGetBuilder struct {
	api.Params
}

// GiftsGetBuilder func.
func NewGiftsGetBuilder() *GiftsGetBuilder {
	return &GiftsGetBuilder{api.Params{}}
}

// User ID.
func (b *GiftsGetBuilder) UserID(v int64) *GiftsGetBuilder {
	b.Params["user_id"] = v
	return b
}

// Number of gifts to return.
func (b *GiftsGetBuilder) Count(v int64) *GiftsGetBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *GiftsGetBuilder) Offset(v int64) *GiftsGetBuilder {
	b.Params["offset"] = v
	return b
}

// GroupsAddAddressBuilder builder.
//
// https://vk.com/dev/groups.addAddress
type GroupsAddAddressBuilder struct {
	api.Params
}

// GroupsAddAddressBuilder func.
func NewGroupsAddAddressBuilder() *GroupsAddAddressBuilder {
	return &GroupsAddAddressBuilder{api.Params{}}
}

func (b *GroupsAddAddressBuilder) GroupID(v int64) *GroupsAddAddressBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsAddAddressBuilder) Title(v string) *GroupsAddAddressBuilder {
	b.Params["title"] = v
	return b
}

func (b *GroupsAddAddressBuilder) Address(v string) *GroupsAddAddressBuilder {
	b.Params["address"] = v
	return b
}

func (b *GroupsAddAddressBuilder) AdditionalAddress(v string) *GroupsAddAddressBuilder {
	b.Params["additional_address"] = v
	return b
}

func (b *GroupsAddAddressBuilder) CountryID(v int64) *GroupsAddAddressBuilder {
	b.Params["country_id"] = v
	return b
}

func (b *GroupsAddAddressBuilder) CityID(v int64) *GroupsAddAddressBuilder {
	b.Params["city_id"] = v
	return b
}

func (b *GroupsAddAddressBuilder) MetroID(v int64) *GroupsAddAddressBuilder {
	b.Params["metro_id"] = v
	return b
}

func (b *GroupsAddAddressBuilder) Latitude(v float64) *GroupsAddAddressBuilder {
	b.Params["latitude"] = v
	return b
}

func (b *GroupsAddAddressBuilder) Longitude(v float64) *GroupsAddAddressBuilder {
	b.Params["longitude"] = v
	return b
}

func (b *GroupsAddAddressBuilder) Phone(v string) *GroupsAddAddressBuilder {
	b.Params["phone"] = v
	return b
}

func (b *GroupsAddAddressBuilder) WorkInfoStatus(v GroupsAddressWorkInfoStatus) *GroupsAddAddressBuilder {
	b.Params["work_info_status"] = v
	return b
}

func (b *GroupsAddAddressBuilder) Timetable(v string) *GroupsAddAddressBuilder {
	b.Params["timetable"] = v
	return b
}

func (b *GroupsAddAddressBuilder) IsMainAddress(v bool) *GroupsAddAddressBuilder {
	b.Params["is_main_address"] = v
	return b
}

// GroupsAddCallbackServerBuilder builder.
//
// https://vk.com/dev/groups.addCallbackServer
type GroupsAddCallbackServerBuilder struct {
	api.Params
}

// GroupsAddCallbackServerBuilder func.
func NewGroupsAddCallbackServerBuilder() *GroupsAddCallbackServerBuilder {
	return &GroupsAddCallbackServerBuilder{api.Params{}}
}

func (b *GroupsAddCallbackServerBuilder) GroupID(v int64) *GroupsAddCallbackServerBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsAddCallbackServerBuilder) URL(v string) *GroupsAddCallbackServerBuilder {
	b.Params["url"] = v
	return b
}

func (b *GroupsAddCallbackServerBuilder) Title(v string) *GroupsAddCallbackServerBuilder {
	b.Params["title"] = v
	return b
}

func (b *GroupsAddCallbackServerBuilder) SecretKey(v string) *GroupsAddCallbackServerBuilder {
	b.Params["secret_key"] = v
	return b
}

// GroupsAddLinkBuilder builder.
//
// Allows to add a link to the community.
//
// https://vk.com/dev/groups.addLink
type GroupsAddLinkBuilder struct {
	api.Params
}

// GroupsAddLinkBuilder func.
func NewGroupsAddLinkBuilder() *GroupsAddLinkBuilder {
	return &GroupsAddLinkBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsAddLinkBuilder) GroupID(v int64) *GroupsAddLinkBuilder {
	b.Params["group_id"] = v
	return b
}

// Link URL.
func (b *GroupsAddLinkBuilder) Link(v string) *GroupsAddLinkBuilder {
	b.Params["link"] = v
	return b
}

// Description text for the link.
func (b *GroupsAddLinkBuilder) Text(v string) *GroupsAddLinkBuilder {
	b.Params["text"] = v
	return b
}

// GroupsApproveRequestBuilder builder.
//
// Allows to approve join request to the community.
//
// https://vk.com/dev/groups.approveRequest
type GroupsApproveRequestBuilder struct {
	api.Params
}

// GroupsApproveRequestBuilder func.
func NewGroupsApproveRequestBuilder() *GroupsApproveRequestBuilder {
	return &GroupsApproveRequestBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsApproveRequestBuilder) GroupID(v int64) *GroupsApproveRequestBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID.
func (b *GroupsApproveRequestBuilder) UserID(v int64) *GroupsApproveRequestBuilder {
	b.Params["user_id"] = v
	return b
}

// GroupsBanBuilder builder.
//
// https://vk.com/dev/groups.ban
type GroupsBanBuilder struct {
	api.Params
}

// GroupsBanBuilder func.
func NewGroupsBanBuilder() *GroupsBanBuilder {
	return &GroupsBanBuilder{api.Params{}}
}

func (b *GroupsBanBuilder) GroupID(v int64) *GroupsBanBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsBanBuilder) OwnerID(v int64) *GroupsBanBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *GroupsBanBuilder) EndDate(v int64) *GroupsBanBuilder {
	b.Params["end_date"] = v
	return b
}

func (b *GroupsBanBuilder) Reason(v int64) *GroupsBanBuilder {
	b.Params["reason"] = v
	return b
}

func (b *GroupsBanBuilder) Comment(v string) *GroupsBanBuilder {
	b.Params["comment"] = v
	return b
}

func (b *GroupsBanBuilder) CommentVisible(v bool) *GroupsBanBuilder {
	b.Params["comment_visible"] = v
	return b
}

// GroupsCreateBuilder builder.
//
// Creates a new community.
//
// https://vk.com/dev/groups.create
type GroupsCreateBuilder struct {
	api.Params
}

// GroupsCreateBuilder func.
func NewGroupsCreateBuilder() *GroupsCreateBuilder {
	return &GroupsCreateBuilder{api.Params{}}
}

// Community title.
func (b *GroupsCreateBuilder) Title(v string) *GroupsCreateBuilder {
	b.Params["title"] = v
	return b
}

// Community description (ignored for 'type' = 'public').
func (b *GroupsCreateBuilder) Description(v string) *GroupsCreateBuilder {
	b.Params["description"] = v
	return b
}

// Community type. Possible values: *'group' – group,, *'event' – event,, *'public' – public page
func (b *GroupsCreateBuilder) Type(v string) *GroupsCreateBuilder {
	b.Params["type"] = v
	return b
}

// Category ID (for 'type' = 'public' only).
func (b *GroupsCreateBuilder) PublicCategory(v int64) *GroupsCreateBuilder {
	b.Params["public_category"] = v
	return b
}

// Public page subtype. Possible values: *'1' – place or small business,, *'2' – company, organization or website,, *'3' – famous person or group of people,, *'4' – product or work of art.
func (b *GroupsCreateBuilder) Subtype(v int64) *GroupsCreateBuilder {
	b.Params["subtype"] = v
	return b
}

// GroupsDeleteCallbackServerBuilder builder.
//
// https://vk.com/dev/groups.deleteCallbackServer
type GroupsDeleteCallbackServerBuilder struct {
	api.Params
}

// GroupsDeleteCallbackServerBuilder func.
func NewGroupsDeleteCallbackServerBuilder() *GroupsDeleteCallbackServerBuilder {
	return &GroupsDeleteCallbackServerBuilder{api.Params{}}
}

func (b *GroupsDeleteCallbackServerBuilder) GroupID(v int64) *GroupsDeleteCallbackServerBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsDeleteCallbackServerBuilder) ServerID(v int64) *GroupsDeleteCallbackServerBuilder {
	b.Params["server_id"] = v
	return b
}

// GroupsDeleteLinkBuilder builder.
//
// Allows to delete a link from the community.
//
// https://vk.com/dev/groups.deleteLink
type GroupsDeleteLinkBuilder struct {
	api.Params
}

// GroupsDeleteLinkBuilder func.
func NewGroupsDeleteLinkBuilder() *GroupsDeleteLinkBuilder {
	return &GroupsDeleteLinkBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsDeleteLinkBuilder) GroupID(v int64) *GroupsDeleteLinkBuilder {
	b.Params["group_id"] = v
	return b
}

// Link ID.
func (b *GroupsDeleteLinkBuilder) LinkID(v int64) *GroupsDeleteLinkBuilder {
	b.Params["link_id"] = v
	return b
}

// GroupsDisableOnlineBuilder builder.
//
// https://vk.com/dev/groups.disableOnline
type GroupsDisableOnlineBuilder struct {
	api.Params
}

// GroupsDisableOnlineBuilder func.
func NewGroupsDisableOnlineBuilder() *GroupsDisableOnlineBuilder {
	return &GroupsDisableOnlineBuilder{api.Params{}}
}

func (b *GroupsDisableOnlineBuilder) GroupID(v int64) *GroupsDisableOnlineBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsEditBuilder builder.
//
// Edits a community.
//
// https://vk.com/dev/groups.edit
type GroupsEditBuilder struct {
	api.Params
}

// GroupsEditBuilder func.
func NewGroupsEditBuilder() *GroupsEditBuilder {
	return &GroupsEditBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsEditBuilder) GroupID(v int64) *GroupsEditBuilder {
	b.Params["group_id"] = v
	return b
}

// Community title.
func (b *GroupsEditBuilder) Title(v string) *GroupsEditBuilder {
	b.Params["title"] = v
	return b
}

// Community description.
func (b *GroupsEditBuilder) Description(v string) *GroupsEditBuilder {
	b.Params["description"] = v
	return b
}

// Community screen name.
func (b *GroupsEditBuilder) ScreenName(v string) *GroupsEditBuilder {
	b.Params["screen_name"] = v
	return b
}

// Community type. Possible values: *'0' – open,, *'1' – closed,, *'2' – private.
func (b *GroupsEditBuilder) Access(v GroupsGroupAccess) *GroupsEditBuilder {
	b.Params["access"] = v
	return b
}

// Website that will be displayed in the community information field.
func (b *GroupsEditBuilder) Website(v string) *GroupsEditBuilder {
	b.Params["website"] = v
	return b
}

// Community subject. Possible values: , *'1' – auto/moto,, *'2' – activity holidays,, *'3' – business,, *'4' – pets,, *'5' – health,, *'6' – dating and communication, , *'7' – games,, *'8' – IT (computers and software),, *'9' – cinema,, *'10' – beauty and fashion,, *'11' – cooking,, *'12' – art and culture,, *'13' – literature,, *'14' – mobile services and internet,, *'15' – music,, *'16' – science and technology,, *'17' – real estate,, *'18' – news and media,, *'19' – security,, *'20' – education,, *'21' – home and renovations,, *'22' – politics,, *'23' – food,, *'24' – industry,, *'25' – travel,, *'26' – work,, *'27' – entertainment,, *'28' – religion,, *'29' – family,, *'30' – sports,, *'31' – insurance,, *'32' – television,, *'33' – goods and services,, *'34' – hobbies,, *'35' – finance,, *'36' – photo,, *'37' – esoterics,, *'38' – electronics and appliances,, *'39' – erotic,, *'40' – humor,, *'41' – society, humanities,, *'42' – design and graphics.
func (b *GroupsEditBuilder) Subject(v GroupsGroupSubject) *GroupsEditBuilder {
	b.Params["subject"] = v
	return b
}

// Organizer email (for events).
func (b *GroupsEditBuilder) Email(v string) *GroupsEditBuilder {
	b.Params["email"] = v
	return b
}

// Organizer phone number (for events).
func (b *GroupsEditBuilder) Phone(v string) *GroupsEditBuilder {
	b.Params["phone"] = v
	return b
}

// RSS feed address for import (available only to communities with special permission. Contact vk.com/support to get it.
func (b *GroupsEditBuilder) Rss(v string) *GroupsEditBuilder {
	b.Params["rss"] = v
	return b
}

// Event start date in Unixtime format.
func (b *GroupsEditBuilder) EventStartDate(v int64) *GroupsEditBuilder {
	b.Params["event_start_date"] = v
	return b
}

// Event finish date in Unixtime format.
func (b *GroupsEditBuilder) EventFinishDate(v int64) *GroupsEditBuilder {
	b.Params["event_finish_date"] = v
	return b
}

// Organizer community ID (for events only).
func (b *GroupsEditBuilder) EventGroupID(v int64) *GroupsEditBuilder {
	b.Params["event_group_id"] = v
	return b
}

// Public page category ID.
func (b *GroupsEditBuilder) PublicCategory(v int64) *GroupsEditBuilder {
	b.Params["public_category"] = v
	return b
}

// Public page subcategory ID.
func (b *GroupsEditBuilder) PublicSubcategory(v int64) *GroupsEditBuilder {
	b.Params["public_subcategory"] = v
	return b
}

// Founding date of a company or organization owning the community in "dd.mm.YYYY" format.
func (b *GroupsEditBuilder) PublicDate(v string) *GroupsEditBuilder {
	b.Params["public_date"] = v
	return b
}

// Wall settings. Possible values: *'0' – disabled,, *'1' – open,, *'2' – limited (groups and events only),, *'3' – closed (groups and events only).
func (b *GroupsEditBuilder) Wall(v GroupsGroupWall) *GroupsEditBuilder {
	b.Params["wall"] = v
	return b
}

// Board topics settings. Possbile values: , *'0' – disabled,, *'1' – open,, *'2' – limited (for groups and events only).
func (b *GroupsEditBuilder) Topics(v GroupsGroupTopics) *GroupsEditBuilder {
	b.Params["topics"] = v
	return b
}

// Photos settings. Possible values: *'0' – disabled,, *'1' – open,, *'2' – limited (for groups and events only).
func (b *GroupsEditBuilder) Photos(v GroupsGroupPhotos) *GroupsEditBuilder {
	b.Params["photos"] = v
	return b
}

// Video settings. Possible values: *'0' – disabled,, *'1' – open,, *'2' – limited (for groups and events only).
func (b *GroupsEditBuilder) Video(v GroupsGroupVideo) *GroupsEditBuilder {
	b.Params["video"] = v
	return b
}

// Audio settings. Possible values: *'0' – disabled,, *'1' – open,, *'2' – limited (for groups and events only).
func (b *GroupsEditBuilder) Audio(v GroupsGroupAudio) *GroupsEditBuilder {
	b.Params["audio"] = v
	return b
}

// Links settings (for public pages only). Possible values: *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) Links(v bool) *GroupsEditBuilder {
	b.Params["links"] = v
	return b
}

// Events settings (for public pages only). Possible values: *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) Events(v bool) *GroupsEditBuilder {
	b.Params["events"] = v
	return b
}

// Places settings (for public pages only). Possible values: *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) Places(v bool) *GroupsEditBuilder {
	b.Params["places"] = v
	return b
}

// Contacts settings (for public pages only). Possible values: *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) Contacts(v bool) *GroupsEditBuilder {
	b.Params["contacts"] = v
	return b
}

// Documents settings. Possible values: *'0' – disabled,, *'1' – open,, *'2' – limited (for groups and events only).
func (b *GroupsEditBuilder) Docs(v GroupsGroupDocs) *GroupsEditBuilder {
	b.Params["docs"] = v
	return b
}

// Wiki pages settings. Possible values: *'0' – disabled,, *'1' – open,, *'2' – limited (for groups and events only).
func (b *GroupsEditBuilder) Wiki(v GroupsGroupWiki) *GroupsEditBuilder {
	b.Params["wiki"] = v
	return b
}

// Community messages. Possible values: *'0' — disabled,, *'1' — enabled.
func (b *GroupsEditBuilder) Messages(v bool) *GroupsEditBuilder {
	b.Params["messages"] = v
	return b
}

func (b *GroupsEditBuilder) Articles(v bool) *GroupsEditBuilder {
	b.Params["articles"] = v
	return b
}

func (b *GroupsEditBuilder) Addresses(v bool) *GroupsEditBuilder {
	b.Params["addresses"] = v
	return b
}

// Community age limits. Possible values: *'1' — no limits,, *'2' — 16+,, *'3' — 18+.
func (b *GroupsEditBuilder) AgeLimits(v GroupsGroupAgeLimits) *GroupsEditBuilder {
	b.Params["age_limits"] = v
	return b
}

// Market settings. Possible values: *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) Market(v bool) *GroupsEditBuilder {
	b.Params["market"] = v
	return b
}

// market comments settings. Possible values: *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) MarketComments(v bool) *GroupsEditBuilder {
	b.Params["market_comments"] = v
	return b
}

// Market delivery countries.
func (b *GroupsEditBuilder) MarketCountry(v []int64) *GroupsEditBuilder {
	b.Params["market_country"] = v
	return b
}

// Market delivery cities (if only one country is specified).
func (b *GroupsEditBuilder) MarketCity(v []int64) *GroupsEditBuilder {
	b.Params["market_city"] = v
	return b
}

// Market currency settings. Possbile values: , *'643' – Russian rubles,, *'980' – Ukrainian hryvnia,, *'398' – Kazakh tenge,, *'978' – Euro,, *'840' – US dollars
func (b *GroupsEditBuilder) MarketCurrency(v GroupsGroupMarketCurrency) *GroupsEditBuilder {
	b.Params["market_currency"] = v
	return b
}

// Seller contact for market. Set '0' for community messages.
func (b *GroupsEditBuilder) MarketContact(v int64) *GroupsEditBuilder {
	b.Params["market_contact"] = v
	return b
}

// ID of a wiki page with market description.
func (b *GroupsEditBuilder) MarketWiki(v int64) *GroupsEditBuilder {
	b.Params["market_wiki"] = v
	return b
}

// Obscene expressions filter in comments. Possible values: , *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) ObsceneFilter(v bool) *GroupsEditBuilder {
	b.Params["obscene_filter"] = v
	return b
}

// Stopwords filter in comments. Possible values: , *'0' – disabled,, *'1' – enabled.
func (b *GroupsEditBuilder) ObsceneStopwords(v bool) *GroupsEditBuilder {
	b.Params["obscene_stopwords"] = v
	return b
}

// Keywords for stopwords filter.
func (b *GroupsEditBuilder) ObsceneWords(v []string) *GroupsEditBuilder {
	b.Params["obscene_words"] = v
	return b
}

func (b *GroupsEditBuilder) MainSection(v int64) *GroupsEditBuilder {
	b.Params["main_section"] = v
	return b
}

func (b *GroupsEditBuilder) SecondarySection(v int64) *GroupsEditBuilder {
	b.Params["secondary_section"] = v
	return b
}

// Country of the community.
func (b *GroupsEditBuilder) Country(v int64) *GroupsEditBuilder {
	b.Params["country"] = v
	return b
}

// City of the community.
func (b *GroupsEditBuilder) City(v int64) *GroupsEditBuilder {
	b.Params["city"] = v
	return b
}

// GroupsEditAddressBuilder builder.
//
// https://vk.com/dev/groups.editAddress
type GroupsEditAddressBuilder struct {
	api.Params
}

// GroupsEditAddressBuilder func.
func NewGroupsEditAddressBuilder() *GroupsEditAddressBuilder {
	return &GroupsEditAddressBuilder{api.Params{}}
}

func (b *GroupsEditAddressBuilder) GroupID(v int64) *GroupsEditAddressBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsEditAddressBuilder) AddressID(v int64) *GroupsEditAddressBuilder {
	b.Params["address_id"] = v
	return b
}

func (b *GroupsEditAddressBuilder) Title(v string) *GroupsEditAddressBuilder {
	b.Params["title"] = v
	return b
}

func (b *GroupsEditAddressBuilder) Address(v string) *GroupsEditAddressBuilder {
	b.Params["address"] = v
	return b
}

func (b *GroupsEditAddressBuilder) AdditionalAddress(v string) *GroupsEditAddressBuilder {
	b.Params["additional_address"] = v
	return b
}

func (b *GroupsEditAddressBuilder) CountryID(v int64) *GroupsEditAddressBuilder {
	b.Params["country_id"] = v
	return b
}

func (b *GroupsEditAddressBuilder) CityID(v int64) *GroupsEditAddressBuilder {
	b.Params["city_id"] = v
	return b
}

func (b *GroupsEditAddressBuilder) MetroID(v int64) *GroupsEditAddressBuilder {
	b.Params["metro_id"] = v
	return b
}

func (b *GroupsEditAddressBuilder) Latitude(v float64) *GroupsEditAddressBuilder {
	b.Params["latitude"] = v
	return b
}

func (b *GroupsEditAddressBuilder) Longitude(v float64) *GroupsEditAddressBuilder {
	b.Params["longitude"] = v
	return b
}

func (b *GroupsEditAddressBuilder) Phone(v string) *GroupsEditAddressBuilder {
	b.Params["phone"] = v
	return b
}

func (b *GroupsEditAddressBuilder) WorkInfoStatus(v GroupsAddressWorkInfoStatus) *GroupsEditAddressBuilder {
	b.Params["work_info_status"] = v
	return b
}

func (b *GroupsEditAddressBuilder) Timetable(v string) *GroupsEditAddressBuilder {
	b.Params["timetable"] = v
	return b
}

func (b *GroupsEditAddressBuilder) IsMainAddress(v bool) *GroupsEditAddressBuilder {
	b.Params["is_main_address"] = v
	return b
}

// GroupsEditCallbackServerBuilder builder.
//
// https://vk.com/dev/groups.editCallbackServer
type GroupsEditCallbackServerBuilder struct {
	api.Params
}

// GroupsEditCallbackServerBuilder func.
func NewGroupsEditCallbackServerBuilder() *GroupsEditCallbackServerBuilder {
	return &GroupsEditCallbackServerBuilder{api.Params{}}
}

func (b *GroupsEditCallbackServerBuilder) GroupID(v int64) *GroupsEditCallbackServerBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsEditCallbackServerBuilder) ServerID(v int64) *GroupsEditCallbackServerBuilder {
	b.Params["server_id"] = v
	return b
}

func (b *GroupsEditCallbackServerBuilder) URL(v string) *GroupsEditCallbackServerBuilder {
	b.Params["url"] = v
	return b
}

func (b *GroupsEditCallbackServerBuilder) Title(v string) *GroupsEditCallbackServerBuilder {
	b.Params["title"] = v
	return b
}

func (b *GroupsEditCallbackServerBuilder) SecretKey(v string) *GroupsEditCallbackServerBuilder {
	b.Params["secret_key"] = v
	return b
}

// GroupsEditLinkBuilder builder.
//
// Allows to edit a link in the community.
//
// https://vk.com/dev/groups.editLink
type GroupsEditLinkBuilder struct {
	api.Params
}

// GroupsEditLinkBuilder func.
func NewGroupsEditLinkBuilder() *GroupsEditLinkBuilder {
	return &GroupsEditLinkBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsEditLinkBuilder) GroupID(v int64) *GroupsEditLinkBuilder {
	b.Params["group_id"] = v
	return b
}

// Link ID.
func (b *GroupsEditLinkBuilder) LinkID(v int64) *GroupsEditLinkBuilder {
	b.Params["link_id"] = v
	return b
}

// New description text for the link.
func (b *GroupsEditLinkBuilder) Text(v string) *GroupsEditLinkBuilder {
	b.Params["text"] = v
	return b
}

// GroupsEditManagerBuilder builder.
//
// Allows to add, remove or edit the community manager.
//
// https://vk.com/dev/groups.editManager
type GroupsEditManagerBuilder struct {
	api.Params
}

// GroupsEditManagerBuilder func.
func NewGroupsEditManagerBuilder() *GroupsEditManagerBuilder {
	return &GroupsEditManagerBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsEditManagerBuilder) GroupID(v int64) *GroupsEditManagerBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID.
func (b *GroupsEditManagerBuilder) UserID(v int64) *GroupsEditManagerBuilder {
	b.Params["user_id"] = v
	return b
}

// Manager role. Possible values: *'moderator',, *'editor',, *'administrator',, *'advertiser'.
func (b *GroupsEditManagerBuilder) Role(v GroupsGroupRole) *GroupsEditManagerBuilder {
	b.Params["role"] = v
	return b
}

// '1' — to show the manager in Contacts block of the community.
func (b *GroupsEditManagerBuilder) IsContact(v bool) *GroupsEditManagerBuilder {
	b.Params["is_contact"] = v
	return b
}

// Position to show in Contacts block.
func (b *GroupsEditManagerBuilder) ContactPosition(v string) *GroupsEditManagerBuilder {
	b.Params["contact_position"] = v
	return b
}

// Contact phone.
func (b *GroupsEditManagerBuilder) ContactPhone(v string) *GroupsEditManagerBuilder {
	b.Params["contact_phone"] = v
	return b
}

// Contact e-mail.
func (b *GroupsEditManagerBuilder) ContactEmail(v string) *GroupsEditManagerBuilder {
	b.Params["contact_email"] = v
	return b
}

// GroupsEnableOnlineBuilder builder.
//
// https://vk.com/dev/groups.enableOnline
type GroupsEnableOnlineBuilder struct {
	api.Params
}

// GroupsEnableOnlineBuilder func.
func NewGroupsEnableOnlineBuilder() *GroupsEnableOnlineBuilder {
	return &GroupsEnableOnlineBuilder{api.Params{}}
}

func (b *GroupsEnableOnlineBuilder) GroupID(v int64) *GroupsEnableOnlineBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsGetBuilder builder.
//
// Returns a list of the communities to which a user belongs.
//
// https://vk.com/dev/groups.get
type GroupsGetBuilder struct {
	api.Params
}

// GroupsGetBuilder func.
func NewGroupsGetBuilder() *GroupsGetBuilder {
	return &GroupsGetBuilder{api.Params{}}
}

// User ID.
func (b *GroupsGetBuilder) UserID(v int64) *GroupsGetBuilder {
	b.Params["user_id"] = v
	return b
}

// '1' — to return complete information about a user's communities, '0' — to return a list of community IDs without any additional fields (default),
func (b *GroupsGetBuilder) Extended(v bool) *GroupsGetBuilder {
	b.Params["extended"] = v
	return b
}

// Types of communities to return: 'admin' — to return communities administered by the user , 'editor' — to return communities where the user is an administrator or editor, 'moder' — to return communities where the user is an administrator, editor, or moderator, 'groups' — to return only groups, 'publics' — to return only public pages, 'events' — to return only events
func (b *GroupsGetBuilder) Filter(v []GroupsFilter) *GroupsGetBuilder {
	b.Params["filter"] = v
	return b
}

// Profile fields to return.
func (b *GroupsGetBuilder) Fields(v []GroupsFields) *GroupsGetBuilder {
	b.Params["fields"] = v
	return b
}

// Offset needed to return a specific subset of communities.
func (b *GroupsGetBuilder) Offset(v int64) *GroupsGetBuilder {
	b.Params["offset"] = v
	return b
}

// Number of communities to return.
func (b *GroupsGetBuilder) Count(v int64) *GroupsGetBuilder {
	b.Params["count"] = v
	return b
}

// GroupsGetAddressesBuilder builder.
//
// Returns a list of community addresses.
//
// https://vk.com/dev/groups.getAddresses
type GroupsGetAddressesBuilder struct {
	api.Params
}

// GroupsGetAddressesBuilder func.
func NewGroupsGetAddressesBuilder() *GroupsGetAddressesBuilder {
	return &GroupsGetAddressesBuilder{api.Params{}}
}

// ID or screen name of the community.
func (b *GroupsGetAddressesBuilder) GroupID(v int64) *GroupsGetAddressesBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsGetAddressesBuilder) AddressIDs(v []int64) *GroupsGetAddressesBuilder {
	b.Params["address_ids"] = v
	return b
}

// Latitude of  the user geo position.
func (b *GroupsGetAddressesBuilder) Latitude(v float64) *GroupsGetAddressesBuilder {
	b.Params["latitude"] = v
	return b
}

// Longitude of the user geo position.
func (b *GroupsGetAddressesBuilder) Longitude(v float64) *GroupsGetAddressesBuilder {
	b.Params["longitude"] = v
	return b
}

// Offset needed to return a specific subset of community addresses.
func (b *GroupsGetAddressesBuilder) Offset(v int64) *GroupsGetAddressesBuilder {
	b.Params["offset"] = v
	return b
}

// Number of community addresses to return.
func (b *GroupsGetAddressesBuilder) Count(v int64) *GroupsGetAddressesBuilder {
	b.Params["count"] = v
	return b
}

// Address fields
func (b *GroupsGetAddressesBuilder) Fields(v []AddressesFields) *GroupsGetAddressesBuilder {
	b.Params["fields"] = v
	return b
}

// GroupsGetBannedBuilder builder.
//
// Returns a list of users on a community blacklist.
//
// https://vk.com/dev/groups.getBanned
type GroupsGetBannedBuilder struct {
	api.Params
}

// GroupsGetBannedBuilder func.
func NewGroupsGetBannedBuilder() *GroupsGetBannedBuilder {
	return &GroupsGetBannedBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsGetBannedBuilder) GroupID(v int64) *GroupsGetBannedBuilder {
	b.Params["group_id"] = v
	return b
}

// Offset needed to return a specific subset of users.
func (b *GroupsGetBannedBuilder) Offset(v int64) *GroupsGetBannedBuilder {
	b.Params["offset"] = v
	return b
}

// Number of users to return.
func (b *GroupsGetBannedBuilder) Count(v int64) *GroupsGetBannedBuilder {
	b.Params["count"] = v
	return b
}

func (b *GroupsGetBannedBuilder) Fields(v []BaseUserGroupFields) *GroupsGetBannedBuilder {
	b.Params["fields"] = v
	return b
}

func (b *GroupsGetBannedBuilder) OwnerID(v int64) *GroupsGetBannedBuilder {
	b.Params["owner_id"] = v
	return b
}

// GroupsGetByIDBuilder builder.
//
// Returns information about communities by their IDs.
//
// https://vk.com/dev/groups.getById
type GroupsGetByIDBuilder struct {
	api.Params
}

// GroupsGetByIDBuilder func.
func NewGroupsGetByIDBuilder() *GroupsGetByIDBuilder {
	return &GroupsGetByIDBuilder{api.Params{}}
}

// IDs or screen names of communities.
func (b *GroupsGetByIDBuilder) GroupIDs(v []string) *GroupsGetByIDBuilder {
	b.Params["group_ids"] = v
	return b
}

// ID or screen name of the community.
func (b *GroupsGetByIDBuilder) GroupID(v string) *GroupsGetByIDBuilder {
	b.Params["group_id"] = v
	return b
}

// Group fields to return.
func (b *GroupsGetByIDBuilder) Fields(v []GroupsFields) *GroupsGetByIDBuilder {
	b.Params["fields"] = v
	return b
}

// GroupsGetCallbackConfirmationCodeBuilder builder.
//
// Returns Callback API confirmation code for the community.
//
// https://vk.com/dev/groups.getCallbackConfirmationCode
type GroupsGetCallbackConfirmationCodeBuilder struct {
	api.Params
}

// GroupsGetCallbackConfirmationCodeBuilder func.
func NewGroupsGetCallbackConfirmationCodeBuilder() *GroupsGetCallbackConfirmationCodeBuilder {
	return &GroupsGetCallbackConfirmationCodeBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsGetCallbackConfirmationCodeBuilder) GroupID(v int64) *GroupsGetCallbackConfirmationCodeBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsGetCallbackServersBuilder builder.
//
// https://vk.com/dev/groups.getCallbackServers
type GroupsGetCallbackServersBuilder struct {
	api.Params
}

// GroupsGetCallbackServersBuilder func.
func NewGroupsGetCallbackServersBuilder() *GroupsGetCallbackServersBuilder {
	return &GroupsGetCallbackServersBuilder{api.Params{}}
}

func (b *GroupsGetCallbackServersBuilder) GroupID(v int64) *GroupsGetCallbackServersBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsGetCallbackServersBuilder) ServerIDs(v []int64) *GroupsGetCallbackServersBuilder {
	b.Params["server_ids"] = v
	return b
}

// GroupsGetCallbackSettingsBuilder builder.
//
// Returns [vk.com/dev/callback_api|Callback API] notifications settings.
//
// https://vk.com/dev/groups.getCallbackSettings
type GroupsGetCallbackSettingsBuilder struct {
	api.Params
}

// GroupsGetCallbackSettingsBuilder func.
func NewGroupsGetCallbackSettingsBuilder() *GroupsGetCallbackSettingsBuilder {
	return &GroupsGetCallbackSettingsBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsGetCallbackSettingsBuilder) GroupID(v int64) *GroupsGetCallbackSettingsBuilder {
	b.Params["group_id"] = v
	return b
}

// Server ID.
func (b *GroupsGetCallbackSettingsBuilder) ServerID(v int64) *GroupsGetCallbackSettingsBuilder {
	b.Params["server_id"] = v
	return b
}

// GroupsGetCatalogBuilder builder.
//
// Returns communities list for a catalog category.
//
// https://vk.com/dev/groups.getCatalog
type GroupsGetCatalogBuilder struct {
	api.Params
}

// GroupsGetCatalogBuilder func.
func NewGroupsGetCatalogBuilder() *GroupsGetCatalogBuilder {
	return &GroupsGetCatalogBuilder{api.Params{}}
}

// Category id received from [vk.com/dev/groups.getCatalogInfo|groups.getCatalogInfo].
func (b *GroupsGetCatalogBuilder) CategoryID(v int64) *GroupsGetCatalogBuilder {
	b.Params["category_id"] = v
	return b
}

// Subcategory id received from [vk.com/dev/groups.getCatalogInfo|groups.getCatalogInfo].
func (b *GroupsGetCatalogBuilder) SubcategoryID(v int64) *GroupsGetCatalogBuilder {
	b.Params["subcategory_id"] = v
	return b
}

// GroupsGetCatalogInfoBuilder builder.
//
// Returns categories list for communities catalog
//
// https://vk.com/dev/groups.getCatalogInfo
type GroupsGetCatalogInfoBuilder struct {
	api.Params
}

// GroupsGetCatalogInfoBuilder func.
func NewGroupsGetCatalogInfoBuilder() *GroupsGetCatalogInfoBuilder {
	return &GroupsGetCatalogInfoBuilder{api.Params{}}
}

// 1 – to return communities count and three communities for preview. By default: 0.
func (b *GroupsGetCatalogInfoBuilder) Extended(v bool) *GroupsGetCatalogInfoBuilder {
	b.Params["extended"] = v
	return b
}

// 1 – to return subcategories info. By default: 0.
func (b *GroupsGetCatalogInfoBuilder) Subcategories(v bool) *GroupsGetCatalogInfoBuilder {
	b.Params["subcategories"] = v
	return b
}

// GroupsGetInvitedUsersBuilder builder.
//
// Returns invited users list of a community
//
// https://vk.com/dev/groups.getInvitedUsers
type GroupsGetInvitedUsersBuilder struct {
	api.Params
}

// GroupsGetInvitedUsersBuilder func.
func NewGroupsGetInvitedUsersBuilder() *GroupsGetInvitedUsersBuilder {
	return &GroupsGetInvitedUsersBuilder{api.Params{}}
}

// Group ID to return invited users for.
func (b *GroupsGetInvitedUsersBuilder) GroupID(v int64) *GroupsGetInvitedUsersBuilder {
	b.Params["group_id"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *GroupsGetInvitedUsersBuilder) Offset(v int64) *GroupsGetInvitedUsersBuilder {
	b.Params["offset"] = v
	return b
}

// Number of results to return.
func (b *GroupsGetInvitedUsersBuilder) Count(v int64) *GroupsGetInvitedUsersBuilder {
	b.Params["count"] = v
	return b
}

// List of additional fields to be returned. Available values: 'sex, bdate, city, country, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile, contacts, connections, site, education, universities, schools, can_post, can_see_all_posts, can_see_audio, can_write_private_message, status, last_seen, common_count, relation, relatives, counters'.
func (b *GroupsGetInvitedUsersBuilder) Fields(v []UsersFields) *GroupsGetInvitedUsersBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname. Possible values: *'nom' — nominative (default),, *'gen' — genitive,, *'dat' — dative,, *'acc' — accusative, , *'ins' — instrumental,, *'abl' — prepositional.
func (b *GroupsGetInvitedUsersBuilder) NameCase(v string) *GroupsGetInvitedUsersBuilder {
	b.Params["name_case"] = v
	return b
}

// GroupsGetInvitesBuilder builder.
//
// Returns a list of invitations to join communities and events.
//
// https://vk.com/dev/groups.getInvites
type GroupsGetInvitesBuilder struct {
	api.Params
}

// GroupsGetInvitesBuilder func.
func NewGroupsGetInvitesBuilder() *GroupsGetInvitesBuilder {
	return &GroupsGetInvitesBuilder{api.Params{}}
}

// Offset needed to return a specific subset of invitations.
func (b *GroupsGetInvitesBuilder) Offset(v int64) *GroupsGetInvitesBuilder {
	b.Params["offset"] = v
	return b
}

// Number of invitations to return.
func (b *GroupsGetInvitesBuilder) Count(v int64) *GroupsGetInvitesBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return additional [vk.com/dev/fields_groups|fields] for communities..
func (b *GroupsGetInvitesBuilder) Extended(v bool) *GroupsGetInvitesBuilder {
	b.Params["extended"] = v
	return b
}

// GroupsGetLongPollServerBuilder builder.
//
// Returns the data needed to query a Long Poll server for events
//
// https://vk.com/dev/groups.getLongPollServer
type GroupsGetLongPollServerBuilder struct {
	api.Params
}

// GroupsGetLongPollServerBuilder func.
func NewGroupsGetLongPollServerBuilder() *GroupsGetLongPollServerBuilder {
	return &GroupsGetLongPollServerBuilder{api.Params{}}
}

// Community ID
func (b *GroupsGetLongPollServerBuilder) GroupID(v int64) *GroupsGetLongPollServerBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsGetLongPollSettingsBuilder builder.
//
// Returns Long Poll notification settings
//
// https://vk.com/dev/groups.getLongPollSettings
type GroupsGetLongPollSettingsBuilder struct {
	api.Params
}

// GroupsGetLongPollSettingsBuilder func.
func NewGroupsGetLongPollSettingsBuilder() *GroupsGetLongPollSettingsBuilder {
	return &GroupsGetLongPollSettingsBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsGetLongPollSettingsBuilder) GroupID(v int64) *GroupsGetLongPollSettingsBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsGetMembersBuilder builder.
//
// Returns a list of community members.
//
// https://vk.com/dev/groups.getMembers
type GroupsGetMembersBuilder struct {
	api.Params
}

// GroupsGetMembersBuilder func.
func NewGroupsGetMembersBuilder() *GroupsGetMembersBuilder {
	return &GroupsGetMembersBuilder{api.Params{}}
}

// ID or screen name of the community.
func (b *GroupsGetMembersBuilder) GroupID(v string) *GroupsGetMembersBuilder {
	b.Params["group_id"] = v
	return b
}

// Sort order. Available values: 'id_asc', 'id_desc', 'time_asc', 'time_desc'. 'time_asc' and 'time_desc' are availavle only if the method is called by the group's 'moderator'.
func (b *GroupsGetMembersBuilder) Sort(v string) *GroupsGetMembersBuilder {
	b.Params["sort"] = v
	return b
}

// Offset needed to return a specific subset of community members.
func (b *GroupsGetMembersBuilder) Offset(v int64) *GroupsGetMembersBuilder {
	b.Params["offset"] = v
	return b
}

// Number of community members to return.
func (b *GroupsGetMembersBuilder) Count(v int64) *GroupsGetMembersBuilder {
	b.Params["count"] = v
	return b
}

// List of additional fields to be returned. Available values: 'sex, bdate, city, country, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile, contacts, connections, site, education, universities, schools, can_post, can_see_all_posts, can_see_audio, can_write_private_message, status, last_seen, common_count, relation, relatives, counters'.
func (b *GroupsGetMembersBuilder) Fields(v []UsersFields) *GroupsGetMembersBuilder {
	b.Params["fields"] = v
	return b
}

// *'friends' – only friends in this community will be returned,, *'unsure' – only those who pressed 'I may attend' will be returned (if it's an event).
func (b *GroupsGetMembersBuilder) Filter(v string) *GroupsGetMembersBuilder {
	b.Params["filter"] = v
	return b
}

// GroupsGetRequestsBuilder builder.
//
// Returns a list of requests to the community.
//
// https://vk.com/dev/groups.getRequests
type GroupsGetRequestsBuilder struct {
	api.Params
}

// GroupsGetRequestsBuilder func.
func NewGroupsGetRequestsBuilder() *GroupsGetRequestsBuilder {
	return &GroupsGetRequestsBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsGetRequestsBuilder) GroupID(v int64) *GroupsGetRequestsBuilder {
	b.Params["group_id"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *GroupsGetRequestsBuilder) Offset(v int64) *GroupsGetRequestsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of results to return.
func (b *GroupsGetRequestsBuilder) Count(v int64) *GroupsGetRequestsBuilder {
	b.Params["count"] = v
	return b
}

// Profile fields to return.
func (b *GroupsGetRequestsBuilder) Fields(v []UsersFields) *GroupsGetRequestsBuilder {
	b.Params["fields"] = v
	return b
}

// GroupsGetSettingsBuilder builder.
//
// Returns community settings.
//
// https://vk.com/dev/groups.getSettings
type GroupsGetSettingsBuilder struct {
	api.Params
}

// GroupsGetSettingsBuilder func.
func NewGroupsGetSettingsBuilder() *GroupsGetSettingsBuilder {
	return &GroupsGetSettingsBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsGetSettingsBuilder) GroupID(v int64) *GroupsGetSettingsBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsGetTokenPermissionsBuilder builder.
//
// https://vk.com/dev/groups.getTokenPermissions
type GroupsGetTokenPermissionsBuilder struct {
	api.Params
}

// GroupsGetTokenPermissionsBuilder func.
func NewGroupsGetTokenPermissionsBuilder() *GroupsGetTokenPermissionsBuilder {
	return &GroupsGetTokenPermissionsBuilder{api.Params{}}
}

// GroupsInviteBuilder builder.
//
// Allows to invite friends to the community.
//
// https://vk.com/dev/groups.invite
type GroupsInviteBuilder struct {
	api.Params
}

// GroupsInviteBuilder func.
func NewGroupsInviteBuilder() *GroupsInviteBuilder {
	return &GroupsInviteBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsInviteBuilder) GroupID(v int64) *GroupsInviteBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID.
func (b *GroupsInviteBuilder) UserID(v int64) *GroupsInviteBuilder {
	b.Params["user_id"] = v
	return b
}

// GroupsIsMemberBuilder builder.
//
// Returns information specifying whether a user is a member of a community.
//
// https://vk.com/dev/groups.isMember
type GroupsIsMemberBuilder struct {
	api.Params
}

// GroupsIsMemberBuilder func.
func NewGroupsIsMemberBuilder() *GroupsIsMemberBuilder {
	return &GroupsIsMemberBuilder{api.Params{}}
}

// ID or screen name of the community.
func (b *GroupsIsMemberBuilder) GroupID(v string) *GroupsIsMemberBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID.
func (b *GroupsIsMemberBuilder) UserID(v int64) *GroupsIsMemberBuilder {
	b.Params["user_id"] = v
	return b
}

// User IDs.
func (b *GroupsIsMemberBuilder) UserIDs(v []int64) *GroupsIsMemberBuilder {
	b.Params["user_ids"] = v
	return b
}

// '1' — to return an extended response with additional fields. By default: '0'.
func (b *GroupsIsMemberBuilder) Extended(v bool) *GroupsIsMemberBuilder {
	b.Params["extended"] = v
	return b
}

// GroupsJoinBuilder builder.
//
// With this method you can join the group or public page, and also confirm your participation in an event.
//
// https://vk.com/dev/groups.join
type GroupsJoinBuilder struct {
	api.Params
}

// GroupsJoinBuilder func.
func NewGroupsJoinBuilder() *GroupsJoinBuilder {
	return &GroupsJoinBuilder{api.Params{}}
}

// ID or screen name of the community.
func (b *GroupsJoinBuilder) GroupID(v int64) *GroupsJoinBuilder {
	b.Params["group_id"] = v
	return b
}

// Optional parameter which is taken into account when 'gid' belongs to the event: '1' — Perhaps I will attend, '0' — I will be there for sure (default), ,
func (b *GroupsJoinBuilder) NotSure(v string) *GroupsJoinBuilder {
	b.Params["not_sure"] = v
	return b
}

// GroupsLeaveBuilder builder.
//
// With this method you can leave a group, public page, or event.
//
// https://vk.com/dev/groups.leave
type GroupsLeaveBuilder struct {
	api.Params
}

// GroupsLeaveBuilder func.
func NewGroupsLeaveBuilder() *GroupsLeaveBuilder {
	return &GroupsLeaveBuilder{api.Params{}}
}

// ID or screen name of the community.
func (b *GroupsLeaveBuilder) GroupID(v int64) *GroupsLeaveBuilder {
	b.Params["group_id"] = v
	return b
}

// GroupsRemoveUserBuilder builder.
//
// Removes a user from the community.
//
// https://vk.com/dev/groups.removeUser
type GroupsRemoveUserBuilder struct {
	api.Params
}

// GroupsRemoveUserBuilder func.
func NewGroupsRemoveUserBuilder() *GroupsRemoveUserBuilder {
	return &GroupsRemoveUserBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsRemoveUserBuilder) GroupID(v int64) *GroupsRemoveUserBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID.
func (b *GroupsRemoveUserBuilder) UserID(v int64) *GroupsRemoveUserBuilder {
	b.Params["user_id"] = v
	return b
}

// GroupsReorderLinkBuilder builder.
//
// Allows to reorder links in the community.
//
// https://vk.com/dev/groups.reorderLink
type GroupsReorderLinkBuilder struct {
	api.Params
}

// GroupsReorderLinkBuilder func.
func NewGroupsReorderLinkBuilder() *GroupsReorderLinkBuilder {
	return &GroupsReorderLinkBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsReorderLinkBuilder) GroupID(v int64) *GroupsReorderLinkBuilder {
	b.Params["group_id"] = v
	return b
}

// Link ID.
func (b *GroupsReorderLinkBuilder) LinkID(v int64) *GroupsReorderLinkBuilder {
	b.Params["link_id"] = v
	return b
}

// ID of the link after which to place the link with 'link_id'.
func (b *GroupsReorderLinkBuilder) After(v int64) *GroupsReorderLinkBuilder {
	b.Params["after"] = v
	return b
}

// GroupsSearchBuilder builder.
//
// Returns a list of communities matching the search criteria.
//
// https://vk.com/dev/groups.search
type GroupsSearchBuilder struct {
	api.Params
}

// GroupsSearchBuilder func.
func NewGroupsSearchBuilder() *GroupsSearchBuilder {
	return &GroupsSearchBuilder{api.Params{}}
}

// Search query string.
func (b *GroupsSearchBuilder) Q(v string) *GroupsSearchBuilder {
	b.Params["q"] = v
	return b
}

// Community type. Possible values: 'group, page, event.'
func (b *GroupsSearchBuilder) Type(v string) *GroupsSearchBuilder {
	b.Params["type"] = v
	return b
}

// Country ID.
func (b *GroupsSearchBuilder) CountryID(v int64) *GroupsSearchBuilder {
	b.Params["country_id"] = v
	return b
}

// City ID. If this parameter is transmitted, country_id is ignored.
func (b *GroupsSearchBuilder) CityID(v int64) *GroupsSearchBuilder {
	b.Params["city_id"] = v
	return b
}

// '1' — to return only upcoming events. Works with the 'type' = 'event' only.
func (b *GroupsSearchBuilder) Future(v bool) *GroupsSearchBuilder {
	b.Params["future"] = v
	return b
}

// '1' — to return communities with enabled market only.
func (b *GroupsSearchBuilder) Market(v bool) *GroupsSearchBuilder {
	b.Params["market"] = v
	return b
}

// Sort order. Possible values: *'0' — default sorting (similar the full version of the site),, *'1' — by growth speed,, *'2'— by the "day attendance/members number" ratio,, *'3' — by the "Likes number/members number" ratio,, *'4' — by the "comments number/members number" ratio,, *'5' — by the "boards entries number/members number" ratio.
func (b *GroupsSearchBuilder) Sort(v int64) *GroupsSearchBuilder {
	b.Params["sort"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *GroupsSearchBuilder) Offset(v int64) *GroupsSearchBuilder {
	b.Params["offset"] = v
	return b
}

// Number of communities to return. "Note that you can not receive more than first thousand of results, regardless of 'count' and 'offset' values."
func (b *GroupsSearchBuilder) Count(v int64) *GroupsSearchBuilder {
	b.Params["count"] = v
	return b
}

// GroupsSetCallbackSettingsBuilder builder.
//
// Allow to set notifications settings for group.
//
// https://vk.com/dev/groups.setCallbackSettings
type GroupsSetCallbackSettingsBuilder struct {
	api.Params
}

// GroupsSetCallbackSettingsBuilder func.
func NewGroupsSetCallbackSettingsBuilder() *GroupsSetCallbackSettingsBuilder {
	return &GroupsSetCallbackSettingsBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsSetCallbackSettingsBuilder) GroupID(v int64) *GroupsSetCallbackSettingsBuilder {
	b.Params["group_id"] = v
	return b
}

// Server ID.
func (b *GroupsSetCallbackSettingsBuilder) ServerID(v int64) *GroupsSetCallbackSettingsBuilder {
	b.Params["server_id"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) ApiVersion(v string) *GroupsSetCallbackSettingsBuilder {
	b.Params["api_version"] = v
	return b
}

// A new incoming message has been received ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MessageNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_new"] = v
	return b
}

// A new outcoming message has been received ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MessageReply(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_reply"] = v
	return b
}

// Allowed messages notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MessageAllow(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_allow"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) MessageEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_edit"] = v
	return b
}

// Denied messages notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MessageDeny(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_deny"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) MessageTypingState(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_typing_state"] = v
	return b
}

// New photos notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) PhotoNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["photo_new"] = v
	return b
}

// New audios notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) AudioNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["audio_new"] = v
	return b
}

// New videos notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) VideoNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["video_new"] = v
	return b
}

// New wall replies notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) WallReplyNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["wall_reply_new"] = v
	return b
}

// Wall replies edited notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) WallReplyEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["wall_reply_edit"] = v
	return b
}

// A wall comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) WallReplyDelete(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["wall_reply_delete"] = v
	return b
}

// A wall comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) WallReplyRestore(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["wall_reply_restore"] = v
	return b
}

// New wall posts notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) WallPostNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["wall_post_new"] = v
	return b
}

// New wall posts notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) WallRepost(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["wall_repost"] = v
	return b
}

// New board posts notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) BoardPostNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["board_post_new"] = v
	return b
}

// Board posts edited notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) BoardPostEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["board_post_edit"] = v
	return b
}

// Board posts restored notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) BoardPostRestore(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["board_post_restore"] = v
	return b
}

// Board posts deleted notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) BoardPostDelete(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["board_post_delete"] = v
	return b
}

// New comment to photo notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) PhotoCommentNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["photo_comment_new"] = v
	return b
}

// A photo comment has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) PhotoCommentEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["photo_comment_edit"] = v
	return b
}

// A photo comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) PhotoCommentDelete(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["photo_comment_delete"] = v
	return b
}

// A photo comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) PhotoCommentRestore(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["photo_comment_restore"] = v
	return b
}

// New comment to video notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) VideoCommentNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["video_comment_new"] = v
	return b
}

// A video comment has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) VideoCommentEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["video_comment_edit"] = v
	return b
}

// A video comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) VideoCommentDelete(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["video_comment_delete"] = v
	return b
}

// A video comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) VideoCommentRestore(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["video_comment_restore"] = v
	return b
}

// New comment to market item notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MarketCommentNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["market_comment_new"] = v
	return b
}

// A market comment has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MarketCommentEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["market_comment_edit"] = v
	return b
}

// A market comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MarketCommentDelete(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["market_comment_delete"] = v
	return b
}

// A market comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) MarketCommentRestore(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["market_comment_restore"] = v
	return b
}

// A vote in a public poll has been added ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) PollVoteNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["poll_vote_new"] = v
	return b
}

// Joined community notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) GroupJoin(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["group_join"] = v
	return b
}

// Left community notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetCallbackSettingsBuilder) GroupLeave(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["group_leave"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) GroupChangeSettings(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["group_change_settings"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) GroupChangePhoto(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["group_change_photo"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) GroupOfficersEdit(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["group_officers_edit"] = v
	return b
}

// User added to community blacklist
func (b *GroupsSetCallbackSettingsBuilder) UserBlock(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["user_block"] = v
	return b
}

// User removed from community blacklist
func (b *GroupsSetCallbackSettingsBuilder) UserUnblock(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["user_unblock"] = v
	return b
}

// New form in lead forms
func (b *GroupsSetCallbackSettingsBuilder) LeadFormsNew(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["lead_forms_new"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) LikeAdd(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["like_add"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) LikeRemove(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["like_remove"] = v
	return b
}

func (b *GroupsSetCallbackSettingsBuilder) MessageEvent(v bool) *GroupsSetCallbackSettingsBuilder {
	b.Params["message_event"] = v
	return b
}

// GroupsSetLongPollSettingsBuilder builder.
//
// Sets Long Poll notification settings
//
// https://vk.com/dev/groups.setLongPollSettings
type GroupsSetLongPollSettingsBuilder struct {
	api.Params
}

// GroupsSetLongPollSettingsBuilder func.
func NewGroupsSetLongPollSettingsBuilder() *GroupsSetLongPollSettingsBuilder {
	return &GroupsSetLongPollSettingsBuilder{api.Params{}}
}

// Community ID.
func (b *GroupsSetLongPollSettingsBuilder) GroupID(v int64) *GroupsSetLongPollSettingsBuilder {
	b.Params["group_id"] = v
	return b
}

// Sets whether Long Poll is enabled ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) Enabled(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["enabled"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) ApiVersion(v string) *GroupsSetLongPollSettingsBuilder {
	b.Params["api_version"] = v
	return b
}

// A new incoming message has been received ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MessageNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_new"] = v
	return b
}

// A new outcoming message has been received ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MessageReply(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_reply"] = v
	return b
}

// Allowed messages notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MessageAllow(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_allow"] = v
	return b
}

// Denied messages notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MessageDeny(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_deny"] = v
	return b
}

// A message has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MessageEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_edit"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) MessageTypingState(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_typing_state"] = v
	return b
}

// New photos notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) PhotoNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["photo_new"] = v
	return b
}

// New audios notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) AudioNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["audio_new"] = v
	return b
}

// New videos notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) VideoNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["video_new"] = v
	return b
}

// New wall replies notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) WallReplyNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["wall_reply_new"] = v
	return b
}

// Wall replies edited notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) WallReplyEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["wall_reply_edit"] = v
	return b
}

// A wall comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) WallReplyDelete(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["wall_reply_delete"] = v
	return b
}

// A wall comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) WallReplyRestore(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["wall_reply_restore"] = v
	return b
}

// New wall posts notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) WallPostNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["wall_post_new"] = v
	return b
}

// New wall posts notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) WallRepost(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["wall_repost"] = v
	return b
}

// New board posts notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) BoardPostNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["board_post_new"] = v
	return b
}

// Board posts edited notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) BoardPostEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["board_post_edit"] = v
	return b
}

// Board posts restored notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) BoardPostRestore(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["board_post_restore"] = v
	return b
}

// Board posts deleted notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) BoardPostDelete(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["board_post_delete"] = v
	return b
}

// New comment to photo notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) PhotoCommentNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["photo_comment_new"] = v
	return b
}

// A photo comment has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) PhotoCommentEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["photo_comment_edit"] = v
	return b
}

// A photo comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) PhotoCommentDelete(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["photo_comment_delete"] = v
	return b
}

// A photo comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) PhotoCommentRestore(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["photo_comment_restore"] = v
	return b
}

// New comment to video notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) VideoCommentNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["video_comment_new"] = v
	return b
}

// A video comment has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) VideoCommentEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["video_comment_edit"] = v
	return b
}

// A video comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) VideoCommentDelete(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["video_comment_delete"] = v
	return b
}

// A video comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) VideoCommentRestore(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["video_comment_restore"] = v
	return b
}

// New comment to market item notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MarketCommentNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["market_comment_new"] = v
	return b
}

// A market comment has been edited ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MarketCommentEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["market_comment_edit"] = v
	return b
}

// A market comment has been deleted ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MarketCommentDelete(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["market_comment_delete"] = v
	return b
}

// A market comment has been restored ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) MarketCommentRestore(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["market_comment_restore"] = v
	return b
}

// A vote in a public poll has been added ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) PollVoteNew(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["poll_vote_new"] = v
	return b
}

// Joined community notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) GroupJoin(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["group_join"] = v
	return b
}

// Left community notifications ('0' — disabled, '1' — enabled).
func (b *GroupsSetLongPollSettingsBuilder) GroupLeave(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["group_leave"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) GroupChangeSettings(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["group_change_settings"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) GroupChangePhoto(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["group_change_photo"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) GroupOfficersEdit(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["group_officers_edit"] = v
	return b
}

// User added to community blacklist
func (b *GroupsSetLongPollSettingsBuilder) UserBlock(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["user_block"] = v
	return b
}

// User removed from community blacklist
func (b *GroupsSetLongPollSettingsBuilder) UserUnblock(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["user_unblock"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) LikeAdd(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["like_add"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) LikeRemove(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["like_remove"] = v
	return b
}

func (b *GroupsSetLongPollSettingsBuilder) MessageEvent(v bool) *GroupsSetLongPollSettingsBuilder {
	b.Params["message_event"] = v
	return b
}

// GroupsUnbanBuilder builder.
//
// https://vk.com/dev/groups.unban
type GroupsUnbanBuilder struct {
	api.Params
}

// GroupsUnbanBuilder func.
func NewGroupsUnbanBuilder() *GroupsUnbanBuilder {
	return &GroupsUnbanBuilder{api.Params{}}
}

func (b *GroupsUnbanBuilder) GroupID(v int64) *GroupsUnbanBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *GroupsUnbanBuilder) OwnerID(v int64) *GroupsUnbanBuilder {
	b.Params["owner_id"] = v
	return b
}

// LeadsCheckUserBuilder builder.
//
// Checks if the user can start the lead.
//
// https://vk.com/dev/leads.checkUser
type LeadsCheckUserBuilder struct {
	api.Params
}

// LeadsCheckUserBuilder func.
func NewLeadsCheckUserBuilder() *LeadsCheckUserBuilder {
	return &LeadsCheckUserBuilder{api.Params{}}
}

// Lead ID.
func (b *LeadsCheckUserBuilder) LeadID(v int64) *LeadsCheckUserBuilder {
	b.Params["lead_id"] = v
	return b
}

// Value to be return in 'result' field when test mode is used.
func (b *LeadsCheckUserBuilder) TestResult(v int64) *LeadsCheckUserBuilder {
	b.Params["test_result"] = v
	return b
}

func (b *LeadsCheckUserBuilder) TestMode(v bool) *LeadsCheckUserBuilder {
	b.Params["test_mode"] = v
	return b
}

func (b *LeadsCheckUserBuilder) AutoStart(v bool) *LeadsCheckUserBuilder {
	b.Params["auto_start"] = v
	return b
}

// User age.
func (b *LeadsCheckUserBuilder) Age(v int64) *LeadsCheckUserBuilder {
	b.Params["age"] = v
	return b
}

// User country code.
func (b *LeadsCheckUserBuilder) Country(v string) *LeadsCheckUserBuilder {
	b.Params["country"] = v
	return b
}

// LeadsCompleteBuilder builder.
//
// Completes the lead started by user.
//
// https://vk.com/dev/leads.complete
type LeadsCompleteBuilder struct {
	api.Params
}

// LeadsCompleteBuilder func.
func NewLeadsCompleteBuilder() *LeadsCompleteBuilder {
	return &LeadsCompleteBuilder{api.Params{}}
}

// Session obtained as GET parameter when session started.
func (b *LeadsCompleteBuilder) VKSid(v string) *LeadsCompleteBuilder {
	b.Params["vk_sid"] = v
	return b
}

// Secret key from the lead testing interface.
func (b *LeadsCompleteBuilder) Secret(v string) *LeadsCompleteBuilder {
	b.Params["secret"] = v
	return b
}

// Comment text.
func (b *LeadsCompleteBuilder) Comment(v string) *LeadsCompleteBuilder {
	b.Params["comment"] = v
	return b
}

// LeadsGetStatsBuilder builder.
//
// Returns lead stats data.
//
// https://vk.com/dev/leads.getStats
type LeadsGetStatsBuilder struct {
	api.Params
}

// LeadsGetStatsBuilder func.
func NewLeadsGetStatsBuilder() *LeadsGetStatsBuilder {
	return &LeadsGetStatsBuilder{api.Params{}}
}

// Lead ID.
func (b *LeadsGetStatsBuilder) LeadID(v int64) *LeadsGetStatsBuilder {
	b.Params["lead_id"] = v
	return b
}

// Secret key obtained from the lead testing interface.
func (b *LeadsGetStatsBuilder) Secret(v string) *LeadsGetStatsBuilder {
	b.Params["secret"] = v
	return b
}

// Day to start stats from (YYYY_MM_DD, e.g.2011-09-17).
func (b *LeadsGetStatsBuilder) DateStart(v string) *LeadsGetStatsBuilder {
	b.Params["date_start"] = v
	return b
}

// Day to finish stats (YYYY_MM_DD, e.g.2011-09-17).
func (b *LeadsGetStatsBuilder) DateEnd(v string) *LeadsGetStatsBuilder {
	b.Params["date_end"] = v
	return b
}

// LeadsGetUsersBuilder builder.
//
// Returns a list of last user actions for the offer.
//
// https://vk.com/dev/leads.getUsers
type LeadsGetUsersBuilder struct {
	api.Params
}

// LeadsGetUsersBuilder func.
func NewLeadsGetUsersBuilder() *LeadsGetUsersBuilder {
	return &LeadsGetUsersBuilder{api.Params{}}
}

// Offer ID.
func (b *LeadsGetUsersBuilder) OfferID(v int64) *LeadsGetUsersBuilder {
	b.Params["offer_id"] = v
	return b
}

// Secret key obtained in the lead testing interface.
func (b *LeadsGetUsersBuilder) Secret(v string) *LeadsGetUsersBuilder {
	b.Params["secret"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *LeadsGetUsersBuilder) Offset(v int64) *LeadsGetUsersBuilder {
	b.Params["offset"] = v
	return b
}

// Number of results to return.
func (b *LeadsGetUsersBuilder) Count(v int64) *LeadsGetUsersBuilder {
	b.Params["count"] = v
	return b
}

// Action type. Possible values: *'0' — start,, *'1' — finish,, *'2' — blocking users,, *'3' — start in a test mode,, *'4' — finish in a test mode.
func (b *LeadsGetUsersBuilder) Status(v int64) *LeadsGetUsersBuilder {
	b.Params["status"] = v
	return b
}

// Sort order. Possible values: *'1' — chronological,, *'0' — reverse chronological.
func (b *LeadsGetUsersBuilder) Reverse(v bool) *LeadsGetUsersBuilder {
	b.Params["reverse"] = v
	return b
}

// LeadsMetricHitBuilder builder.
//
// Counts the metric event.
//
// https://vk.com/dev/leads.metricHit
type LeadsMetricHitBuilder struct {
	api.Params
}

// LeadsMetricHitBuilder func.
func NewLeadsMetricHitBuilder() *LeadsMetricHitBuilder {
	return &LeadsMetricHitBuilder{api.Params{}}
}

// Metric data obtained in the lead interface.
func (b *LeadsMetricHitBuilder) Data(v string) *LeadsMetricHitBuilder {
	b.Params["data"] = v
	return b
}

// LeadsStartBuilder builder.
//
// Creates new session for the user passing the offer.
//
// https://vk.com/dev/leads.start
type LeadsStartBuilder struct {
	api.Params
}

// LeadsStartBuilder func.
func NewLeadsStartBuilder() *LeadsStartBuilder {
	return &LeadsStartBuilder{api.Params{}}
}

// Lead ID.
func (b *LeadsStartBuilder) LeadID(v int64) *LeadsStartBuilder {
	b.Params["lead_id"] = v
	return b
}

// Secret key from the lead testing interface.
func (b *LeadsStartBuilder) Secret(v string) *LeadsStartBuilder {
	b.Params["secret"] = v
	return b
}

func (b *LeadsStartBuilder) Uid(v int64) *LeadsStartBuilder {
	b.Params["uid"] = v
	return b
}

func (b *LeadsStartBuilder) Aid(v int64) *LeadsStartBuilder {
	b.Params["aid"] = v
	return b
}

func (b *LeadsStartBuilder) TestMode(v bool) *LeadsStartBuilder {
	b.Params["test_mode"] = v
	return b
}

func (b *LeadsStartBuilder) Force(v bool) *LeadsStartBuilder {
	b.Params["force"] = v
	return b
}

// LikesAddBuilder builder.
//
// Adds the specified object to the 'Likes' list of the current user.
//
// https://vk.com/dev/likes.add
type LikesAddBuilder struct {
	api.Params
}

// LikesAddBuilder func.
func NewLikesAddBuilder() *LikesAddBuilder {
	return &LikesAddBuilder{api.Params{}}
}

// Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion, 'sitepage' — page of the site where the [vk.com/dev/Like|Like widget] is installed
func (b *LikesAddBuilder) Type(v LikesType) *LikesAddBuilder {
	b.Params["type"] = v
	return b
}

// ID of the user or community that owns the object.
func (b *LikesAddBuilder) OwnerID(v int64) *LikesAddBuilder {
	b.Params["owner_id"] = v
	return b
}

// Object ID.
func (b *LikesAddBuilder) ItemID(v int64) *LikesAddBuilder {
	b.Params["item_id"] = v
	return b
}

// Access key required for an object owned by a private entity.
func (b *LikesAddBuilder) AccessKey(v string) *LikesAddBuilder {
	b.Params["access_key"] = v
	return b
}

// LikesDeleteBuilder builder.
//
// Deletes the specified object from the 'Likes' list of the current user.
//
// https://vk.com/dev/likes.delete
type LikesDeleteBuilder struct {
	api.Params
}

// LikesDeleteBuilder func.
func NewLikesDeleteBuilder() *LikesDeleteBuilder {
	return &LikesDeleteBuilder{api.Params{}}
}

// Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion, 'sitepage' — page of the site where the [vk.com/dev/Like|Like widget] is installed
func (b *LikesDeleteBuilder) Type(v LikesType) *LikesDeleteBuilder {
	b.Params["type"] = v
	return b
}

// ID of the user or community that owns the object.
func (b *LikesDeleteBuilder) OwnerID(v int64) *LikesDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Object ID.
func (b *LikesDeleteBuilder) ItemID(v int64) *LikesDeleteBuilder {
	b.Params["item_id"] = v
	return b
}

// Access key required for an object owned by a private entity.
func (b *LikesDeleteBuilder) AccessKey(v string) *LikesDeleteBuilder {
	b.Params["access_key"] = v
	return b
}

// LikesGetListBuilder builder.
//
// Returns a list of IDs of users who added the specified object to their 'Likes' list.
//
// https://vk.com/dev/likes.getList
type LikesGetListBuilder struct {
	api.Params
}

// LikesGetListBuilder func.
func NewLikesGetListBuilder() *LikesGetListBuilder {
	return &LikesGetListBuilder{api.Params{}}
}

// , Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion, 'sitepage' — page of the site where the [vk.com/dev/Like|Like widget] is installed
func (b *LikesGetListBuilder) Type(v LikesType) *LikesGetListBuilder {
	b.Params["type"] = v
	return b
}

// ID of the user, community, or application that owns the object. If the 'type' parameter is set as 'sitepage', the application ID is passed as 'owner_id'. Use negative value for a community id. If the 'type' parameter is not set, the 'owner_id' is assumed to be either the current user or the same application ID as if the 'type' parameter was set to 'sitepage'.
func (b *LikesGetListBuilder) OwnerID(v int64) *LikesGetListBuilder {
	b.Params["owner_id"] = v
	return b
}

// Object ID. If 'type' is set as 'sitepage', 'item_id' can include the 'page_id' parameter value used during initialization of the [vk.com/dev/Like|Like widget].
func (b *LikesGetListBuilder) ItemID(v int64) *LikesGetListBuilder {
	b.Params["item_id"] = v
	return b
}

// URL of the page where the [vk.com/dev/Like|Like widget] is installed. Used instead of the 'item_id' parameter.
func (b *LikesGetListBuilder) PageURL(v string) *LikesGetListBuilder {
	b.Params["page_url"] = v
	return b
}

// Filters to apply: 'likes' — returns information about all users who liked the object (default), 'copies' — returns information only about users who told their friends about the object
func (b *LikesGetListBuilder) Filter(v string) *LikesGetListBuilder {
	b.Params["filter"] = v
	return b
}

// Specifies which users are returned: '1' — to return only the current user's friends, '0' — to return all users (default)
func (b *LikesGetListBuilder) FriendsOnly(v int64) *LikesGetListBuilder {
	b.Params["friends_only"] = v
	return b
}

// Specifies whether extended information will be returned. '1' — to return extended information about users and communities from the 'Likes' list, '0' — to return no additional information (default)
func (b *LikesGetListBuilder) Extended(v bool) *LikesGetListBuilder {
	b.Params["extended"] = v
	return b
}

// Offset needed to select a specific subset of users.
func (b *LikesGetListBuilder) Offset(v int64) *LikesGetListBuilder {
	b.Params["offset"] = v
	return b
}

// Number of user IDs to return (maximum '1000'). Default is '100' if 'friends_only' is set to '0', otherwise, the default is '10' if 'friends_only' is set to '1'.
func (b *LikesGetListBuilder) Count(v int64) *LikesGetListBuilder {
	b.Params["count"] = v
	return b
}

func (b *LikesGetListBuilder) SkipOwn(v bool) *LikesGetListBuilder {
	b.Params["skip_own"] = v
	return b
}

// LikesIsLikedBuilder builder.
//
// Checks for the object in the 'Likes' list of the specified user.
//
// https://vk.com/dev/likes.isLiked
type LikesIsLikedBuilder struct {
	api.Params
}

// LikesIsLikedBuilder func.
func NewLikesIsLikedBuilder() *LikesIsLikedBuilder {
	return &LikesIsLikedBuilder{api.Params{}}
}

// User ID.
func (b *LikesIsLikedBuilder) UserID(v int64) *LikesIsLikedBuilder {
	b.Params["user_id"] = v
	return b
}

// Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion
func (b *LikesIsLikedBuilder) Type(v LikesType) *LikesIsLikedBuilder {
	b.Params["type"] = v
	return b
}

// ID of the user or community that owns the object.
func (b *LikesIsLikedBuilder) OwnerID(v int64) *LikesIsLikedBuilder {
	b.Params["owner_id"] = v
	return b
}

// Object ID.
func (b *LikesIsLikedBuilder) ItemID(v int64) *LikesIsLikedBuilder {
	b.Params["item_id"] = v
	return b
}

// MarketAddBuilder builder.
//
// Ads a new item to the market.
//
// https://vk.com/dev/market.add
type MarketAddBuilder struct {
	api.Params
}

// MarketAddBuilder func.
func NewMarketAddBuilder() *MarketAddBuilder {
	return &MarketAddBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketAddBuilder) OwnerID(v int64) *MarketAddBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item name.
func (b *MarketAddBuilder) Name(v string) *MarketAddBuilder {
	b.Params["name"] = v
	return b
}

// Item description.
func (b *MarketAddBuilder) Description(v string) *MarketAddBuilder {
	b.Params["description"] = v
	return b
}

// Item category ID.
func (b *MarketAddBuilder) CategoryID(v int64) *MarketAddBuilder {
	b.Params["category_id"] = v
	return b
}

// Item price.
func (b *MarketAddBuilder) Price(v float64) *MarketAddBuilder {
	b.Params["price"] = v
	return b
}

func (b *MarketAddBuilder) OldPrice(v float64) *MarketAddBuilder {
	b.Params["old_price"] = v
	return b
}

// Item status ('1' — deleted, '0' — not deleted).
func (b *MarketAddBuilder) Deleted(v bool) *MarketAddBuilder {
	b.Params["deleted"] = v
	return b
}

// Cover photo ID.
func (b *MarketAddBuilder) MainPhotoID(v int64) *MarketAddBuilder {
	b.Params["main_photo_id"] = v
	return b
}

// IDs of additional photos.
func (b *MarketAddBuilder) PhotoIDs(v []int64) *MarketAddBuilder {
	b.Params["photo_ids"] = v
	return b
}

// Url for button in market item.
func (b *MarketAddBuilder) URL(v string) *MarketAddBuilder {
	b.Params["url"] = v
	return b
}

func (b *MarketAddBuilder) DimensionWidth(v int64) *MarketAddBuilder {
	b.Params["dimension_width"] = v
	return b
}

func (b *MarketAddBuilder) DimensionHeight(v int64) *MarketAddBuilder {
	b.Params["dimension_height"] = v
	return b
}

func (b *MarketAddBuilder) DimensionLength(v int64) *MarketAddBuilder {
	b.Params["dimension_length"] = v
	return b
}

func (b *MarketAddBuilder) Weight(v int64) *MarketAddBuilder {
	b.Params["weight"] = v
	return b
}

// MarketAddAlbumBuilder builder.
//
// Creates new collection of items
//
// https://vk.com/dev/market.addAlbum
type MarketAddAlbumBuilder struct {
	api.Params
}

// MarketAddAlbumBuilder func.
func NewMarketAddAlbumBuilder() *MarketAddAlbumBuilder {
	return &MarketAddAlbumBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketAddAlbumBuilder) OwnerID(v int64) *MarketAddAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

// Collection title.
func (b *MarketAddAlbumBuilder) Title(v string) *MarketAddAlbumBuilder {
	b.Params["title"] = v
	return b
}

// Cover photo ID.
func (b *MarketAddAlbumBuilder) PhotoID(v int64) *MarketAddAlbumBuilder {
	b.Params["photo_id"] = v
	return b
}

// Set as main ('1' – set, '0' – no).
func (b *MarketAddAlbumBuilder) MainAlbum(v bool) *MarketAddAlbumBuilder {
	b.Params["main_album"] = v
	return b
}

// MarketAddToAlbumBuilder builder.
//
// Adds an item to one or multiple collections.
//
// https://vk.com/dev/market.addToAlbum
type MarketAddToAlbumBuilder struct {
	api.Params
}

// MarketAddToAlbumBuilder func.
func NewMarketAddToAlbumBuilder() *MarketAddToAlbumBuilder {
	return &MarketAddToAlbumBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketAddToAlbumBuilder) OwnerID(v int64) *MarketAddToAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketAddToAlbumBuilder) ItemID(v int64) *MarketAddToAlbumBuilder {
	b.Params["item_id"] = v
	return b
}

// Collections IDs to add item to.
func (b *MarketAddToAlbumBuilder) AlbumIDs(v []int64) *MarketAddToAlbumBuilder {
	b.Params["album_ids"] = v
	return b
}

// MarketCreateCommentBuilder builder.
//
// Creates a new comment for an item.
//
// https://vk.com/dev/market.createComment
type MarketCreateCommentBuilder struct {
	api.Params
}

// MarketCreateCommentBuilder func.
func NewMarketCreateCommentBuilder() *MarketCreateCommentBuilder {
	return &MarketCreateCommentBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketCreateCommentBuilder) OwnerID(v int64) *MarketCreateCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketCreateCommentBuilder) ItemID(v int64) *MarketCreateCommentBuilder {
	b.Params["item_id"] = v
	return b
}

// Comment text (required if 'attachments' parameter is not specified)
func (b *MarketCreateCommentBuilder) Message(v string) *MarketCreateCommentBuilder {
	b.Params["message"] = v
	return b
}

// Comma-separated list of objects attached to a comment. The field is submitted the following way: , "'<owner_id>_<media_id>,<owner_id>_<media_id>'", , '' - media attachment type: "'photo' - photo, 'video' - video, 'audio' - audio, 'doc' - document", , '<owner_id>' - media owner id, '<media_id>' - media attachment id, , For example: "photo100172_166443618,photo66748_265827614",
func (b *MarketCreateCommentBuilder) Attachments(v []string) *MarketCreateCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// '1' - comment will be published on behalf of a community, '0' - on behalf of a user (by default).
func (b *MarketCreateCommentBuilder) FromGroup(v bool) *MarketCreateCommentBuilder {
	b.Params["from_group"] = v
	return b
}

// ID of a comment to reply with current comment to.
func (b *MarketCreateCommentBuilder) ReplyToComment(v int64) *MarketCreateCommentBuilder {
	b.Params["reply_to_comment"] = v
	return b
}

// Sticker ID.
func (b *MarketCreateCommentBuilder) StickerID(v int64) *MarketCreateCommentBuilder {
	b.Params["sticker_id"] = v
	return b
}

// Random value to avoid resending one comment.
func (b *MarketCreateCommentBuilder) Guid(v string) *MarketCreateCommentBuilder {
	b.Params["guid"] = v
	return b
}

// MarketDeleteBuilder builder.
//
// Deletes an item.
//
// https://vk.com/dev/market.delete
type MarketDeleteBuilder struct {
	api.Params
}

// MarketDeleteBuilder func.
func NewMarketDeleteBuilder() *MarketDeleteBuilder {
	return &MarketDeleteBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketDeleteBuilder) OwnerID(v int64) *MarketDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketDeleteBuilder) ItemID(v int64) *MarketDeleteBuilder {
	b.Params["item_id"] = v
	return b
}

// MarketDeleteAlbumBuilder builder.
//
// Deletes a collection of items.
//
// https://vk.com/dev/market.deleteAlbum
type MarketDeleteAlbumBuilder struct {
	api.Params
}

// MarketDeleteAlbumBuilder func.
func NewMarketDeleteAlbumBuilder() *MarketDeleteAlbumBuilder {
	return &MarketDeleteAlbumBuilder{api.Params{}}
}

// ID of an collection owner community.
func (b *MarketDeleteAlbumBuilder) OwnerID(v int64) *MarketDeleteAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

// Collection ID.
func (b *MarketDeleteAlbumBuilder) AlbumID(v int64) *MarketDeleteAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

// MarketDeleteCommentBuilder builder.
//
// Deletes an item's comment
//
// https://vk.com/dev/market.deleteComment
type MarketDeleteCommentBuilder struct {
	api.Params
}

// MarketDeleteCommentBuilder func.
func NewMarketDeleteCommentBuilder() *MarketDeleteCommentBuilder {
	return &MarketDeleteCommentBuilder{api.Params{}}
}

// identifier of an item owner community, "Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community "
func (b *MarketDeleteCommentBuilder) OwnerID(v int64) *MarketDeleteCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// comment id
func (b *MarketDeleteCommentBuilder) CommentID(v int64) *MarketDeleteCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// MarketEditBuilder builder.
//
// Edits an item.
//
// https://vk.com/dev/market.edit
type MarketEditBuilder struct {
	api.Params
}

// MarketEditBuilder func.
func NewMarketEditBuilder() *MarketEditBuilder {
	return &MarketEditBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketEditBuilder) OwnerID(v int64) *MarketEditBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketEditBuilder) ItemID(v int64) *MarketEditBuilder {
	b.Params["item_id"] = v
	return b
}

// Item name.
func (b *MarketEditBuilder) Name(v string) *MarketEditBuilder {
	b.Params["name"] = v
	return b
}

// Item description.
func (b *MarketEditBuilder) Description(v string) *MarketEditBuilder {
	b.Params["description"] = v
	return b
}

// Item category ID.
func (b *MarketEditBuilder) CategoryID(v int64) *MarketEditBuilder {
	b.Params["category_id"] = v
	return b
}

// Item price.
func (b *MarketEditBuilder) Price(v float64) *MarketEditBuilder {
	b.Params["price"] = v
	return b
}

// Item status ('1' — deleted, '0' — not deleted).
func (b *MarketEditBuilder) Deleted(v bool) *MarketEditBuilder {
	b.Params["deleted"] = v
	return b
}

// Cover photo ID.
func (b *MarketEditBuilder) MainPhotoID(v int64) *MarketEditBuilder {
	b.Params["main_photo_id"] = v
	return b
}

// IDs of additional photos.
func (b *MarketEditBuilder) PhotoIDs(v []int64) *MarketEditBuilder {
	b.Params["photo_ids"] = v
	return b
}

// Url for button in market item.
func (b *MarketEditBuilder) URL(v string) *MarketEditBuilder {
	b.Params["url"] = v
	return b
}

// MarketEditAlbumBuilder builder.
//
// Edits a collection of items
//
// https://vk.com/dev/market.editAlbum
type MarketEditAlbumBuilder struct {
	api.Params
}

// MarketEditAlbumBuilder func.
func NewMarketEditAlbumBuilder() *MarketEditAlbumBuilder {
	return &MarketEditAlbumBuilder{api.Params{}}
}

// ID of an collection owner community.
func (b *MarketEditAlbumBuilder) OwnerID(v int64) *MarketEditAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

// Collection ID.
func (b *MarketEditAlbumBuilder) AlbumID(v int64) *MarketEditAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

// Collection title.
func (b *MarketEditAlbumBuilder) Title(v string) *MarketEditAlbumBuilder {
	b.Params["title"] = v
	return b
}

// Cover photo id
func (b *MarketEditAlbumBuilder) PhotoID(v int64) *MarketEditAlbumBuilder {
	b.Params["photo_id"] = v
	return b
}

// Set as main ('1' – set, '0' – no).
func (b *MarketEditAlbumBuilder) MainAlbum(v bool) *MarketEditAlbumBuilder {
	b.Params["main_album"] = v
	return b
}

// MarketEditCommentBuilder builder.
//
// Chages item comment's text
//
// https://vk.com/dev/market.editComment
type MarketEditCommentBuilder struct {
	api.Params
}

// MarketEditCommentBuilder func.
func NewMarketEditCommentBuilder() *MarketEditCommentBuilder {
	return &MarketEditCommentBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketEditCommentBuilder) OwnerID(v int64) *MarketEditCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *MarketEditCommentBuilder) CommentID(v int64) *MarketEditCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// New comment text (required if 'attachments' are not specified), , 2048 symbols maximum.
func (b *MarketEditCommentBuilder) Message(v string) *MarketEditCommentBuilder {
	b.Params["message"] = v
	return b
}

// Comma-separated list of objects attached to a comment. The field is submitted the following way: , "'<owner_id>_<media_id>,<owner_id>_<media_id>'", , '' - media attachment type: "'photo' - photo, 'video' - video, 'audio' - audio, 'doc' - document", , '<owner_id>' - media owner id, '<media_id>' - media attachment id, , For example: "photo100172_166443618,photo66748_265827614",
func (b *MarketEditCommentBuilder) Attachments(v []string) *MarketEditCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// MarketGetBuilder builder.
//
// Returns items list for a community.
//
// https://vk.com/dev/market.get
type MarketGetBuilder struct {
	api.Params
}

// MarketGetBuilder func.
func NewMarketGetBuilder() *MarketGetBuilder {
	return &MarketGetBuilder{api.Params{}}
}

// ID of an item owner community, "Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community "
func (b *MarketGetBuilder) OwnerID(v int64) *MarketGetBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *MarketGetBuilder) AlbumID(v int64) *MarketGetBuilder {
	b.Params["album_id"] = v
	return b
}

// Number of items to return.
func (b *MarketGetBuilder) Count(v int64) *MarketGetBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *MarketGetBuilder) Offset(v int64) *MarketGetBuilder {
	b.Params["offset"] = v
	return b
}

// '1' – method will return additional fields: 'likes, can_comment, car_repost, photos'. These parameters are not returned by default.
func (b *MarketGetBuilder) Extended(v bool) *MarketGetBuilder {
	b.Params["extended"] = v
	return b
}

// MarketGetAlbumByIDBuilder builder.
//
// Returns items album's data
//
// https://vk.com/dev/market.getAlbumById
type MarketGetAlbumByIDBuilder struct {
	api.Params
}

// MarketGetAlbumByIDBuilder func.
func NewMarketGetAlbumByIDBuilder() *MarketGetAlbumByIDBuilder {
	return &MarketGetAlbumByIDBuilder{api.Params{}}
}

// identifier of an album owner community, "Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community "
func (b *MarketGetAlbumByIDBuilder) OwnerID(v int64) *MarketGetAlbumByIDBuilder {
	b.Params["owner_id"] = v
	return b
}

// collections identifiers to obtain data from
func (b *MarketGetAlbumByIDBuilder) AlbumIDs(v []int64) *MarketGetAlbumByIDBuilder {
	b.Params["album_ids"] = v
	return b
}

// MarketGetAlbumsBuilder builder.
//
// Returns community's collections list.
//
// https://vk.com/dev/market.getAlbums
type MarketGetAlbumsBuilder struct {
	api.Params
}

// MarketGetAlbumsBuilder func.
func NewMarketGetAlbumsBuilder() *MarketGetAlbumsBuilder {
	return &MarketGetAlbumsBuilder{api.Params{}}
}

// ID of an items owner community.
func (b *MarketGetAlbumsBuilder) OwnerID(v int64) *MarketGetAlbumsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *MarketGetAlbumsBuilder) Offset(v int64) *MarketGetAlbumsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of items to return.
func (b *MarketGetAlbumsBuilder) Count(v int64) *MarketGetAlbumsBuilder {
	b.Params["count"] = v
	return b
}

// MarketGetByIDBuilder builder.
//
// Returns information about market items by their ids.
//
// https://vk.com/dev/market.getById
type MarketGetByIDBuilder struct {
	api.Params
}

// MarketGetByIDBuilder func.
func NewMarketGetByIDBuilder() *MarketGetByIDBuilder {
	return &MarketGetByIDBuilder{api.Params{}}
}

// Comma-separated ids list: {user id}_{item id}. If an item belongs to a community -{community id} is used. " 'Videos' value example: , '-4363_136089719,13245770_137352259'"
func (b *MarketGetByIDBuilder) ItemIDs(v []string) *MarketGetByIDBuilder {
	b.Params["item_ids"] = v
	return b
}

// '1' – to return additional fields: 'likes, can_comment, car_repost, photos'. By default: '0'.
func (b *MarketGetByIDBuilder) Extended(v bool) *MarketGetByIDBuilder {
	b.Params["extended"] = v
	return b
}

// MarketGetCategoriesBuilder builder.
//
// Returns a list of market categories.
//
// https://vk.com/dev/market.getCategories
type MarketGetCategoriesBuilder struct {
	api.Params
}

// MarketGetCategoriesBuilder func.
func NewMarketGetCategoriesBuilder() *MarketGetCategoriesBuilder {
	return &MarketGetCategoriesBuilder{api.Params{}}
}

// Number of results to return.
func (b *MarketGetCategoriesBuilder) Count(v int64) *MarketGetCategoriesBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *MarketGetCategoriesBuilder) Offset(v int64) *MarketGetCategoriesBuilder {
	b.Params["offset"] = v
	return b
}

// MarketGetCommentsBuilder builder.
//
// Returns comments list for an item.
//
// https://vk.com/dev/market.getComments
type MarketGetCommentsBuilder struct {
	api.Params
}

// MarketGetCommentsBuilder func.
func NewMarketGetCommentsBuilder() *MarketGetCommentsBuilder {
	return &MarketGetCommentsBuilder{api.Params{}}
}

// ID of an item owner community
func (b *MarketGetCommentsBuilder) OwnerID(v int64) *MarketGetCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketGetCommentsBuilder) ItemID(v int64) *MarketGetCommentsBuilder {
	b.Params["item_id"] = v
	return b
}

// '1' — to return likes info.
func (b *MarketGetCommentsBuilder) NeedLikes(v bool) *MarketGetCommentsBuilder {
	b.Params["need_likes"] = v
	return b
}

// ID of a comment to start a list from (details below).
func (b *MarketGetCommentsBuilder) StartCommentID(v int64) *MarketGetCommentsBuilder {
	b.Params["start_comment_id"] = v
	return b
}

func (b *MarketGetCommentsBuilder) Offset(v int64) *MarketGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of results to return.
func (b *MarketGetCommentsBuilder) Count(v int64) *MarketGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// Sort order ('asc' — from old to new, 'desc' — from new to old)
func (b *MarketGetCommentsBuilder) Sort(v string) *MarketGetCommentsBuilder {
	b.Params["sort"] = v
	return b
}

// '1' — comments will be returned as numbered objects, in addition lists of 'profiles' and 'groups' objects will be returned.
func (b *MarketGetCommentsBuilder) Extended(v bool) *MarketGetCommentsBuilder {
	b.Params["extended"] = v
	return b
}

// List of additional profile fields to return. See the [vk.com/dev/fields|details]
func (b *MarketGetCommentsBuilder) Fields(v []UsersFields) *MarketGetCommentsBuilder {
	b.Params["fields"] = v
	return b
}

// MarketRemoveFromAlbumBuilder builder.
//
// Removes an item from one or multiple collections.
//
// https://vk.com/dev/market.removeFromAlbum
type MarketRemoveFromAlbumBuilder struct {
	api.Params
}

// MarketRemoveFromAlbumBuilder func.
func NewMarketRemoveFromAlbumBuilder() *MarketRemoveFromAlbumBuilder {
	return &MarketRemoveFromAlbumBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketRemoveFromAlbumBuilder) OwnerID(v int64) *MarketRemoveFromAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketRemoveFromAlbumBuilder) ItemID(v int64) *MarketRemoveFromAlbumBuilder {
	b.Params["item_id"] = v
	return b
}

// Collections IDs to remove item from.
func (b *MarketRemoveFromAlbumBuilder) AlbumIDs(v []int64) *MarketRemoveFromAlbumBuilder {
	b.Params["album_ids"] = v
	return b
}

// MarketReorderAlbumsBuilder builder.
//
// Reorders the collections list.
//
// https://vk.com/dev/market.reorderAlbums
type MarketReorderAlbumsBuilder struct {
	api.Params
}

// MarketReorderAlbumsBuilder func.
func NewMarketReorderAlbumsBuilder() *MarketReorderAlbumsBuilder {
	return &MarketReorderAlbumsBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketReorderAlbumsBuilder) OwnerID(v int64) *MarketReorderAlbumsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Collection ID.
func (b *MarketReorderAlbumsBuilder) AlbumID(v int64) *MarketReorderAlbumsBuilder {
	b.Params["album_id"] = v
	return b
}

// ID of a collection to place current collection before it.
func (b *MarketReorderAlbumsBuilder) Before(v int64) *MarketReorderAlbumsBuilder {
	b.Params["before"] = v
	return b
}

// ID of a collection to place current collection after it.
func (b *MarketReorderAlbumsBuilder) After(v int64) *MarketReorderAlbumsBuilder {
	b.Params["after"] = v
	return b
}

// MarketReorderItemsBuilder builder.
//
// Changes item place in a collection.
//
// https://vk.com/dev/market.reorderItems
type MarketReorderItemsBuilder struct {
	api.Params
}

// MarketReorderItemsBuilder func.
func NewMarketReorderItemsBuilder() *MarketReorderItemsBuilder {
	return &MarketReorderItemsBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketReorderItemsBuilder) OwnerID(v int64) *MarketReorderItemsBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of a collection to reorder items in. Set 0 to reorder full items list.
func (b *MarketReorderItemsBuilder) AlbumID(v int64) *MarketReorderItemsBuilder {
	b.Params["album_id"] = v
	return b
}

// Item ID.
func (b *MarketReorderItemsBuilder) ItemID(v int64) *MarketReorderItemsBuilder {
	b.Params["item_id"] = v
	return b
}

// ID of an item to place current item before it.
func (b *MarketReorderItemsBuilder) Before(v int64) *MarketReorderItemsBuilder {
	b.Params["before"] = v
	return b
}

// ID of an item to place current item after it.
func (b *MarketReorderItemsBuilder) After(v int64) *MarketReorderItemsBuilder {
	b.Params["after"] = v
	return b
}

// MarketReportBuilder builder.
//
// Sends a complaint to the item.
//
// https://vk.com/dev/market.report
type MarketReportBuilder struct {
	api.Params
}

// MarketReportBuilder func.
func NewMarketReportBuilder() *MarketReportBuilder {
	return &MarketReportBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketReportBuilder) OwnerID(v int64) *MarketReportBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item ID.
func (b *MarketReportBuilder) ItemID(v int64) *MarketReportBuilder {
	b.Params["item_id"] = v
	return b
}

// Complaint reason. Possible values: *'0' — spam,, *'1' — child porn,, *'2' — extremism,, *'3' — violence,, *'4' — drugs propaganda,, *'5' — adult materials,, *'6' — insult.
func (b *MarketReportBuilder) Reason(v int64) *MarketReportBuilder {
	b.Params["reason"] = v
	return b
}

// MarketReportCommentBuilder builder.
//
// Sends a complaint to the item's comment.
//
// https://vk.com/dev/market.reportComment
type MarketReportCommentBuilder struct {
	api.Params
}

// MarketReportCommentBuilder func.
func NewMarketReportCommentBuilder() *MarketReportCommentBuilder {
	return &MarketReportCommentBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketReportCommentBuilder) OwnerID(v int64) *MarketReportCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *MarketReportCommentBuilder) CommentID(v int64) *MarketReportCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Complaint reason. Possible values: *'0' — spam,, *'1' — child porn,, *'2' — extremism,, *'3' — violence,, *'4' — drugs propaganda,, *'5' — adult materials,, *'6' — insult.
func (b *MarketReportCommentBuilder) Reason(v int64) *MarketReportCommentBuilder {
	b.Params["reason"] = v
	return b
}

// MarketRestoreBuilder builder.
//
// Restores recently deleted item
//
// https://vk.com/dev/market.restore
type MarketRestoreBuilder struct {
	api.Params
}

// MarketRestoreBuilder func.
func NewMarketRestoreBuilder() *MarketRestoreBuilder {
	return &MarketRestoreBuilder{api.Params{}}
}

// ID of an item owner community.
func (b *MarketRestoreBuilder) OwnerID(v int64) *MarketRestoreBuilder {
	b.Params["owner_id"] = v
	return b
}

// Deleted item ID.
func (b *MarketRestoreBuilder) ItemID(v int64) *MarketRestoreBuilder {
	b.Params["item_id"] = v
	return b
}

// MarketRestoreCommentBuilder builder.
//
// Restores a recently deleted comment
//
// https://vk.com/dev/market.restoreComment
type MarketRestoreCommentBuilder struct {
	api.Params
}

// MarketRestoreCommentBuilder func.
func NewMarketRestoreCommentBuilder() *MarketRestoreCommentBuilder {
	return &MarketRestoreCommentBuilder{api.Params{}}
}

// identifier of an item owner community, "Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community "
func (b *MarketRestoreCommentBuilder) OwnerID(v int64) *MarketRestoreCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// deleted comment id
func (b *MarketRestoreCommentBuilder) CommentID(v int64) *MarketRestoreCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// MarketSearchBuilder builder.
//
// Searches market items in a community's catalog
//
// https://vk.com/dev/market.search
type MarketSearchBuilder struct {
	api.Params
}

// MarketSearchBuilder func.
func NewMarketSearchBuilder() *MarketSearchBuilder {
	return &MarketSearchBuilder{api.Params{}}
}

// ID of an items owner community.
func (b *MarketSearchBuilder) OwnerID(v int64) *MarketSearchBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *MarketSearchBuilder) AlbumID(v int64) *MarketSearchBuilder {
	b.Params["album_id"] = v
	return b
}

// Search query, for example "pink slippers".
func (b *MarketSearchBuilder) Q(v string) *MarketSearchBuilder {
	b.Params["q"] = v
	return b
}

// Minimum item price value.
func (b *MarketSearchBuilder) PriceFrom(v int64) *MarketSearchBuilder {
	b.Params["price_from"] = v
	return b
}

// Maximum item price value.
func (b *MarketSearchBuilder) PriceTo(v int64) *MarketSearchBuilder {
	b.Params["price_to"] = v
	return b
}

func (b *MarketSearchBuilder) Sort(v int64) *MarketSearchBuilder {
	b.Params["sort"] = v
	return b
}

// '0' — do not use reverse order, '1' — use reverse order
func (b *MarketSearchBuilder) Rev(v int64) *MarketSearchBuilder {
	b.Params["rev"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *MarketSearchBuilder) Offset(v int64) *MarketSearchBuilder {
	b.Params["offset"] = v
	return b
}

// Number of items to return.
func (b *MarketSearchBuilder) Count(v int64) *MarketSearchBuilder {
	b.Params["count"] = v
	return b
}

// '1' – to return additional fields: 'likes, can_comment, car_repost, photos'. By default: '0'.
func (b *MarketSearchBuilder) Extended(v bool) *MarketSearchBuilder {
	b.Params["extended"] = v
	return b
}

func (b *MarketSearchBuilder) Status(v int64) *MarketSearchBuilder {
	b.Params["status"] = v
	return b
}

// MessagesAddChatUserBuilder builder.
//
// Adds a new user to a chat.
//
// https://vk.com/dev/messages.addChatUser
type MessagesAddChatUserBuilder struct {
	api.Params
}

// MessagesAddChatUserBuilder func.
func NewMessagesAddChatUserBuilder() *MessagesAddChatUserBuilder {
	return &MessagesAddChatUserBuilder{api.Params{}}
}

// Chat ID.
func (b *MessagesAddChatUserBuilder) ChatID(v int64) *MessagesAddChatUserBuilder {
	b.Params["chat_id"] = v
	return b
}

// ID of the user to be added to the chat.
func (b *MessagesAddChatUserBuilder) UserID(v int64) *MessagesAddChatUserBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *MessagesAddChatUserBuilder) VisibleMessagesCount(v int64) *MessagesAddChatUserBuilder {
	b.Params["visible_messages_count"] = v
	return b
}

// MessagesAllowMessagesFromGroupBuilder builder.
//
// Allows sending messages from community to the current user.
//
// https://vk.com/dev/messages.allowMessagesFromGroup
type MessagesAllowMessagesFromGroupBuilder struct {
	api.Params
}

// MessagesAllowMessagesFromGroupBuilder func.
func NewMessagesAllowMessagesFromGroupBuilder() *MessagesAllowMessagesFromGroupBuilder {
	return &MessagesAllowMessagesFromGroupBuilder{api.Params{}}
}

// Group ID.
func (b *MessagesAllowMessagesFromGroupBuilder) GroupID(v int64) *MessagesAllowMessagesFromGroupBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *MessagesAllowMessagesFromGroupBuilder) Key(v string) *MessagesAllowMessagesFromGroupBuilder {
	b.Params["key"] = v
	return b
}

// MessagesCreateChatBuilder builder.
//
// Creates a chat with several participants.
//
// https://vk.com/dev/messages.createChat
type MessagesCreateChatBuilder struct {
	api.Params
}

// MessagesCreateChatBuilder func.
func NewMessagesCreateChatBuilder() *MessagesCreateChatBuilder {
	return &MessagesCreateChatBuilder{api.Params{}}
}

// IDs of the users to be added to the chat.
func (b *MessagesCreateChatBuilder) UserIDs(v []int64) *MessagesCreateChatBuilder {
	b.Params["user_ids"] = v
	return b
}

// Chat title.
func (b *MessagesCreateChatBuilder) Title(v string) *MessagesCreateChatBuilder {
	b.Params["title"] = v
	return b
}

func (b *MessagesCreateChatBuilder) GroupID(v int64) *MessagesCreateChatBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesDeleteBuilder builder.
//
// Deletes one or more messages.
//
// https://vk.com/dev/messages.delete
type MessagesDeleteBuilder struct {
	api.Params
}

// MessagesDeleteBuilder func.
func NewMessagesDeleteBuilder() *MessagesDeleteBuilder {
	return &MessagesDeleteBuilder{api.Params{}}
}

// Message IDs.
func (b *MessagesDeleteBuilder) MessageIDs(v []int64) *MessagesDeleteBuilder {
	b.Params["message_ids"] = v
	return b
}

// '1' — to mark message as spam.
func (b *MessagesDeleteBuilder) Spam(v bool) *MessagesDeleteBuilder {
	b.Params["spam"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesDeleteBuilder) GroupID(v int64) *MessagesDeleteBuilder {
	b.Params["group_id"] = v
	return b
}

// '1' — delete message for for all.
func (b *MessagesDeleteBuilder) DeleteForAll(v bool) *MessagesDeleteBuilder {
	b.Params["delete_for_all"] = v
	return b
}

// MessagesDeleteChatPhotoBuilder builder.
//
// Deletes a chat's cover picture.
//
// https://vk.com/dev/messages.deleteChatPhoto
type MessagesDeleteChatPhotoBuilder struct {
	api.Params
}

// MessagesDeleteChatPhotoBuilder func.
func NewMessagesDeleteChatPhotoBuilder() *MessagesDeleteChatPhotoBuilder {
	return &MessagesDeleteChatPhotoBuilder{api.Params{}}
}

// Chat ID.
func (b *MessagesDeleteChatPhotoBuilder) ChatID(v int64) *MessagesDeleteChatPhotoBuilder {
	b.Params["chat_id"] = v
	return b
}

func (b *MessagesDeleteChatPhotoBuilder) GroupID(v int64) *MessagesDeleteChatPhotoBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesDeleteConversationBuilder builder.
//
// Deletes all private messages in a conversation.
//
// https://vk.com/dev/messages.deleteConversation
type MessagesDeleteConversationBuilder struct {
	api.Params
}

// MessagesDeleteConversationBuilder func.
func NewMessagesDeleteConversationBuilder() *MessagesDeleteConversationBuilder {
	return &MessagesDeleteConversationBuilder{api.Params{}}
}

// User ID. To clear a chat history use 'chat_id'
func (b *MessagesDeleteConversationBuilder) UserID(v int64) *MessagesDeleteConversationBuilder {
	b.Params["user_id"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesDeleteConversationBuilder) PeerID(v int64) *MessagesDeleteConversationBuilder {
	b.Params["peer_id"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesDeleteConversationBuilder) GroupID(v int64) *MessagesDeleteConversationBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesDenyMessagesFromGroupBuilder builder.
//
// Denies sending message from community to the current user.
//
// https://vk.com/dev/messages.denyMessagesFromGroup
type MessagesDenyMessagesFromGroupBuilder struct {
	api.Params
}

// MessagesDenyMessagesFromGroupBuilder func.
func NewMessagesDenyMessagesFromGroupBuilder() *MessagesDenyMessagesFromGroupBuilder {
	return &MessagesDenyMessagesFromGroupBuilder{api.Params{}}
}

// Group ID.
func (b *MessagesDenyMessagesFromGroupBuilder) GroupID(v int64) *MessagesDenyMessagesFromGroupBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesEditBuilder builder.
//
// Edits the message.
//
// https://vk.com/dev/messages.edit
type MessagesEditBuilder struct {
	api.Params
}

// MessagesEditBuilder func.
func NewMessagesEditBuilder() *MessagesEditBuilder {
	return &MessagesEditBuilder{api.Params{}}
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesEditBuilder) PeerID(v int64) *MessagesEditBuilder {
	b.Params["peer_id"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the message.
func (b *MessagesEditBuilder) Message(v string) *MessagesEditBuilder {
	b.Params["message"] = v
	return b
}

// Geographical latitude of a check-in, in degrees (from -90 to 90).
func (b *MessagesEditBuilder) Lat(v float64) *MessagesEditBuilder {
	b.Params["lat"] = v
	return b
}

// Geographical longitude of a check-in, in degrees (from -180 to 180).
func (b *MessagesEditBuilder) Long(v float64) *MessagesEditBuilder {
	b.Params["long"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the message, separated by commas, in the following format: "<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'wall' — wall post, '<owner_id>' — ID of the media attachment owner. '<media_id>' — media attachment ID. Example: "photo100172_166443618"
func (b *MessagesEditBuilder) Attachment(v string) *MessagesEditBuilder {
	b.Params["attachment"] = v
	return b
}

// '1' — to keep forwarded, messages.
func (b *MessagesEditBuilder) KeepForwardMessages(v bool) *MessagesEditBuilder {
	b.Params["keep_forward_messages"] = v
	return b
}

// '1' — to keep attached snippets.
func (b *MessagesEditBuilder) KeepSnippets(v bool) *MessagesEditBuilder {
	b.Params["keep_snippets"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesEditBuilder) GroupID(v int64) *MessagesEditBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *MessagesEditBuilder) DontParseLinks(v bool) *MessagesEditBuilder {
	b.Params["dont_parse_links"] = v
	return b
}

func (b *MessagesEditBuilder) MessageID(v int64) *MessagesEditBuilder {
	b.Params["message_id"] = v
	return b
}

func (b *MessagesEditBuilder) ConversationMessageID(v int64) *MessagesEditBuilder {
	b.Params["conversation_message_id"] = v
	return b
}

func (b *MessagesEditBuilder) Template(v string) *MessagesEditBuilder {
	b.Params["template"] = v
	return b
}

func (b *MessagesEditBuilder) Keyboard(v string) *MessagesEditBuilder {
	b.Params["keyboard"] = v
	return b
}

// MessagesEditChatBuilder builder.
//
// Edits the title of a chat.
//
// https://vk.com/dev/messages.editChat
type MessagesEditChatBuilder struct {
	api.Params
}

// MessagesEditChatBuilder func.
func NewMessagesEditChatBuilder() *MessagesEditChatBuilder {
	return &MessagesEditChatBuilder{api.Params{}}
}

// Chat ID.
func (b *MessagesEditChatBuilder) ChatID(v int64) *MessagesEditChatBuilder {
	b.Params["chat_id"] = v
	return b
}

// New title of the chat.
func (b *MessagesEditChatBuilder) Title(v string) *MessagesEditChatBuilder {
	b.Params["title"] = v
	return b
}

// MessagesGetByConversationMessageIDBuilder builder.
//
// Returns messages by their IDs within the conversation.
//
// https://vk.com/dev/messages.getByConversationMessageId
type MessagesGetByConversationMessageIDBuilder struct {
	api.Params
}

// MessagesGetByConversationMessageIDBuilder func.
func NewMessagesGetByConversationMessageIDBuilder() *MessagesGetByConversationMessageIDBuilder {
	return &MessagesGetByConversationMessageIDBuilder{api.Params{}}
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesGetByConversationMessageIDBuilder) PeerID(v int64) *MessagesGetByConversationMessageIDBuilder {
	b.Params["peer_id"] = v
	return b
}

// Conversation message IDs.
func (b *MessagesGetByConversationMessageIDBuilder) ConversationMessageIDs(v []int64) *MessagesGetByConversationMessageIDBuilder {
	b.Params["conversation_message_ids"] = v
	return b
}

// Information whether the response should be extended
func (b *MessagesGetByConversationMessageIDBuilder) Extended(v bool) *MessagesGetByConversationMessageIDBuilder {
	b.Params["extended"] = v
	return b
}

// Profile fields to return.
func (b *MessagesGetByConversationMessageIDBuilder) Fields(v []UsersFields) *MessagesGetByConversationMessageIDBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetByConversationMessageIDBuilder) GroupID(v int64) *MessagesGetByConversationMessageIDBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetByIDBuilder builder.
//
// Returns messages by their IDs.
//
// https://vk.com/dev/messages.getById
type MessagesGetByIDBuilder struct {
	api.Params
}

// MessagesGetByIDBuilder func.
func NewMessagesGetByIDBuilder() *MessagesGetByIDBuilder {
	return &MessagesGetByIDBuilder{api.Params{}}
}

// Message IDs.
func (b *MessagesGetByIDBuilder) MessageIDs(v []int64) *MessagesGetByIDBuilder {
	b.Params["message_ids"] = v
	return b
}

// Number of characters after which to truncate a previewed message. To preview the full message, specify '0'. "NOTE: Messages are not truncated by default. Messages are truncated by words."
func (b *MessagesGetByIDBuilder) PreviewLength(v int64) *MessagesGetByIDBuilder {
	b.Params["preview_length"] = v
	return b
}

// Information whether the response should be extended
func (b *MessagesGetByIDBuilder) Extended(v bool) *MessagesGetByIDBuilder {
	b.Params["extended"] = v
	return b
}

// Profile fields to return.
func (b *MessagesGetByIDBuilder) Fields(v []UsersFields) *MessagesGetByIDBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetByIDBuilder) GroupID(v int64) *MessagesGetByIDBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetChatPreviewBuilder builder.
//
// https://vk.com/dev/messages.getChatPreview
type MessagesGetChatPreviewBuilder struct {
	api.Params
}

// MessagesGetChatPreviewBuilder func.
func NewMessagesGetChatPreviewBuilder() *MessagesGetChatPreviewBuilder {
	return &MessagesGetChatPreviewBuilder{api.Params{}}
}

func (b *MessagesGetChatPreviewBuilder) PeerID(v int64) *MessagesGetChatPreviewBuilder {
	b.Params["peer_id"] = v
	return b
}

// Invitation link.
func (b *MessagesGetChatPreviewBuilder) Link(v string) *MessagesGetChatPreviewBuilder {
	b.Params["link"] = v
	return b
}

// Profile fields to return.
func (b *MessagesGetChatPreviewBuilder) Fields(v []UsersFields) *MessagesGetChatPreviewBuilder {
	b.Params["fields"] = v
	return b
}

// MessagesGetConversationMembersBuilder builder.
//
// Returns a list of IDs of users participating in a chat.
//
// https://vk.com/dev/messages.getConversationMembers
type MessagesGetConversationMembersBuilder struct {
	api.Params
}

// MessagesGetConversationMembersBuilder func.
func NewMessagesGetConversationMembersBuilder() *MessagesGetConversationMembersBuilder {
	return &MessagesGetConversationMembersBuilder{api.Params{}}
}

// Peer ID.
func (b *MessagesGetConversationMembersBuilder) PeerID(v int64) *MessagesGetConversationMembersBuilder {
	b.Params["peer_id"] = v
	return b
}

// Profile fields to return.
func (b *MessagesGetConversationMembersBuilder) Fields(v []UsersFields) *MessagesGetConversationMembersBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetConversationMembersBuilder) GroupID(v int64) *MessagesGetConversationMembersBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetConversationsBuilder builder.
//
// Returns a list of the current user's conversations.
//
// https://vk.com/dev/messages.getConversations
type MessagesGetConversationsBuilder struct {
	api.Params
}

// MessagesGetConversationsBuilder func.
func NewMessagesGetConversationsBuilder() *MessagesGetConversationsBuilder {
	return &MessagesGetConversationsBuilder{api.Params{}}
}

// Offset needed to return a specific subset of conversations.
func (b *MessagesGetConversationsBuilder) Offset(v int64) *MessagesGetConversationsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of conversations to return.
func (b *MessagesGetConversationsBuilder) Count(v int64) *MessagesGetConversationsBuilder {
	b.Params["count"] = v
	return b
}

// Filter to apply: 'all' — all conversations, 'unread' — conversations with unread messages, 'important' — conversations, marked as important (only for community messages), 'unanswered' — conversations, marked as unanswered (only for community messages)
func (b *MessagesGetConversationsBuilder) Filter(v string) *MessagesGetConversationsBuilder {
	b.Params["filter"] = v
	return b
}

// '1' — return extra information about users and communities
func (b *MessagesGetConversationsBuilder) Extended(v bool) *MessagesGetConversationsBuilder {
	b.Params["extended"] = v
	return b
}

// ID of the message from what to return dialogs.
func (b *MessagesGetConversationsBuilder) StartMessageID(v int64) *MessagesGetConversationsBuilder {
	b.Params["start_message_id"] = v
	return b
}

// Profile and communities fields to return.
func (b *MessagesGetConversationsBuilder) Fields(v []BaseUserGroupFields) *MessagesGetConversationsBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetConversationsBuilder) GroupID(v int64) *MessagesGetConversationsBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetConversationsByIDBuilder builder.
//
// Returns conversations by their IDs
//
// https://vk.com/dev/messages.getConversationsById
type MessagesGetConversationsByIDBuilder struct {
	api.Params
}

// MessagesGetConversationsByIDBuilder func.
func NewMessagesGetConversationsByIDBuilder() *MessagesGetConversationsByIDBuilder {
	return &MessagesGetConversationsByIDBuilder{api.Params{}}
}

// Destination IDs. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesGetConversationsByIDBuilder) PeerIDs(v []int64) *MessagesGetConversationsByIDBuilder {
	b.Params["peer_ids"] = v
	return b
}

// Return extended properties
func (b *MessagesGetConversationsByIDBuilder) Extended(v bool) *MessagesGetConversationsByIDBuilder {
	b.Params["extended"] = v
	return b
}

// Profile and communities fields to return.
func (b *MessagesGetConversationsByIDBuilder) Fields(v []BaseUserGroupFields) *MessagesGetConversationsByIDBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetConversationsByIDBuilder) GroupID(v int64) *MessagesGetConversationsByIDBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetHistoryBuilder builder.
//
// Returns message history for the specified user or group chat.
//
// https://vk.com/dev/messages.getHistory
type MessagesGetHistoryBuilder struct {
	api.Params
}

// MessagesGetHistoryBuilder func.
func NewMessagesGetHistoryBuilder() *MessagesGetHistoryBuilder {
	return &MessagesGetHistoryBuilder{api.Params{}}
}

// Offset needed to return a specific subset of messages.
func (b *MessagesGetHistoryBuilder) Offset(v int64) *MessagesGetHistoryBuilder {
	b.Params["offset"] = v
	return b
}

// Number of messages to return.
func (b *MessagesGetHistoryBuilder) Count(v int64) *MessagesGetHistoryBuilder {
	b.Params["count"] = v
	return b
}

// ID of the user whose message history you want to return.
func (b *MessagesGetHistoryBuilder) UserID(v int64) *MessagesGetHistoryBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *MessagesGetHistoryBuilder) PeerID(v int64) *MessagesGetHistoryBuilder {
	b.Params["peer_id"] = v
	return b
}

// Starting message ID from which to return history.
func (b *MessagesGetHistoryBuilder) StartMessageID(v int64) *MessagesGetHistoryBuilder {
	b.Params["start_message_id"] = v
	return b
}

// Sort order: '1' — return messages in chronological order. '0' — return messages in reverse chronological order.
func (b *MessagesGetHistoryBuilder) Rev(v int64) *MessagesGetHistoryBuilder {
	b.Params["rev"] = v
	return b
}

// Information whether the response should be extended
func (b *MessagesGetHistoryBuilder) Extended(v bool) *MessagesGetHistoryBuilder {
	b.Params["extended"] = v
	return b
}

// Profile fields to return.
func (b *MessagesGetHistoryBuilder) Fields(v []UsersFields) *MessagesGetHistoryBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetHistoryBuilder) GroupID(v int64) *MessagesGetHistoryBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetHistoryAttachmentsBuilder builder.
//
// Returns media files from the dialog or group chat.
//
// https://vk.com/dev/messages.getHistoryAttachments
type MessagesGetHistoryAttachmentsBuilder struct {
	api.Params
}

// MessagesGetHistoryAttachmentsBuilder func.
func NewMessagesGetHistoryAttachmentsBuilder() *MessagesGetHistoryAttachmentsBuilder {
	return &MessagesGetHistoryAttachmentsBuilder{api.Params{}}
}

// Peer ID. ", For group chat: '2000000000 + chat ID' , , For community: '-community ID'"
func (b *MessagesGetHistoryAttachmentsBuilder) PeerID(v int64) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["peer_id"] = v
	return b
}

// Type of media files to return: *'photo',, *'video',, *'audio',, *'doc',, *'link'.,*'market'.,*'wall'.,*'share'
func (b *MessagesGetHistoryAttachmentsBuilder) MediaType(v string) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["media_type"] = v
	return b
}

// Message ID to start return results from.
func (b *MessagesGetHistoryAttachmentsBuilder) StartFrom(v string) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["start_from"] = v
	return b
}

// Number of objects to return.
func (b *MessagesGetHistoryAttachmentsBuilder) Count(v int64) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return photo sizes in a
func (b *MessagesGetHistoryAttachmentsBuilder) PhotoSizes(v bool) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["photo_sizes"] = v
	return b
}

// Additional profile [vk.com/dev/fields|fields] to return.
func (b *MessagesGetHistoryAttachmentsBuilder) Fields(v []UsersFields) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesGetHistoryAttachmentsBuilder) GroupID(v int64) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *MessagesGetHistoryAttachmentsBuilder) PreserveOrder(v bool) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["preserve_order"] = v
	return b
}

func (b *MessagesGetHistoryAttachmentsBuilder) MaxForwardsLevel(v int64) *MessagesGetHistoryAttachmentsBuilder {
	b.Params["max_forwards_level"] = v
	return b
}

// MessagesGetInviteLinkBuilder builder.
//
// https://vk.com/dev/messages.getInviteLink
type MessagesGetInviteLinkBuilder struct {
	api.Params
}

// MessagesGetInviteLinkBuilder func.
func NewMessagesGetInviteLinkBuilder() *MessagesGetInviteLinkBuilder {
	return &MessagesGetInviteLinkBuilder{api.Params{}}
}

// Destination ID.
func (b *MessagesGetInviteLinkBuilder) PeerID(v int64) *MessagesGetInviteLinkBuilder {
	b.Params["peer_id"] = v
	return b
}

// 1 — to generate new link (revoke previous), 0 — to return previous link.
func (b *MessagesGetInviteLinkBuilder) Reset(v bool) *MessagesGetInviteLinkBuilder {
	b.Params["reset"] = v
	return b
}

// Group ID
func (b *MessagesGetInviteLinkBuilder) GroupID(v int64) *MessagesGetInviteLinkBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesGetLastActivityBuilder builder.
//
// Returns a user's current status and date of last activity.
//
// https://vk.com/dev/messages.getLastActivity
type MessagesGetLastActivityBuilder struct {
	api.Params
}

// MessagesGetLastActivityBuilder func.
func NewMessagesGetLastActivityBuilder() *MessagesGetLastActivityBuilder {
	return &MessagesGetLastActivityBuilder{api.Params{}}
}

// User ID.
func (b *MessagesGetLastActivityBuilder) UserID(v int64) *MessagesGetLastActivityBuilder {
	b.Params["user_id"] = v
	return b
}

// MessagesGetLongPollHistoryBuilder builder.
//
// Returns updates in user's private messages.
//
// https://vk.com/dev/messages.getLongPollHistory
type MessagesGetLongPollHistoryBuilder struct {
	api.Params
}

// MessagesGetLongPollHistoryBuilder func.
func NewMessagesGetLongPollHistoryBuilder() *MessagesGetLongPollHistoryBuilder {
	return &MessagesGetLongPollHistoryBuilder{api.Params{}}
}

// Last value of the 'ts' parameter returned from the Long Poll server or by using [vk.com/dev/messages.getLongPollHistory|messages.getLongPollHistory] method.
func (b *MessagesGetLongPollHistoryBuilder) Ts(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["ts"] = v
	return b
}

// Lsat value of 'pts' parameter returned from the Long Poll server or by using [vk.com/dev/messages.getLongPollHistory|messages.getLongPollHistory] method.
func (b *MessagesGetLongPollHistoryBuilder) Pts(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["pts"] = v
	return b
}

// Number of characters after which to truncate a previewed message. To preview the full message, specify '0'. "NOTE: Messages are not truncated by default. Messages are truncated by words."
func (b *MessagesGetLongPollHistoryBuilder) PreviewLength(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["preview_length"] = v
	return b
}

// '1' — to return history with online users only.
func (b *MessagesGetLongPollHistoryBuilder) Onlines(v bool) *MessagesGetLongPollHistoryBuilder {
	b.Params["onlines"] = v
	return b
}

// Additional profile [vk.com/dev/fields|fields] to return.
func (b *MessagesGetLongPollHistoryBuilder) Fields(v []UsersFields) *MessagesGetLongPollHistoryBuilder {
	b.Params["fields"] = v
	return b
}

// Maximum number of events to return.
func (b *MessagesGetLongPollHistoryBuilder) EventsLimit(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["events_limit"] = v
	return b
}

// Maximum number of messages to return.
func (b *MessagesGetLongPollHistoryBuilder) MsgsLimit(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["msgs_limit"] = v
	return b
}

// Maximum ID of the message among existing ones in the local copy. Both messages received with API methods (for example, , ), and data received from a Long Poll server (events with code 4) are taken into account.
func (b *MessagesGetLongPollHistoryBuilder) MaxMsgID(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["max_msg_id"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesGetLongPollHistoryBuilder) GroupID(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *MessagesGetLongPollHistoryBuilder) LpVersion(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["lp_version"] = v
	return b
}

func (b *MessagesGetLongPollHistoryBuilder) LastN(v int64) *MessagesGetLongPollHistoryBuilder {
	b.Params["last_n"] = v
	return b
}

func (b *MessagesGetLongPollHistoryBuilder) Credentials(v bool) *MessagesGetLongPollHistoryBuilder {
	b.Params["credentials"] = v
	return b
}

// MessagesGetLongPollServerBuilder builder.
//
// Returns data required for connection to a Long Poll server.
//
// https://vk.com/dev/messages.getLongPollServer
type MessagesGetLongPollServerBuilder struct {
	api.Params
}

// MessagesGetLongPollServerBuilder func.
func NewMessagesGetLongPollServerBuilder() *MessagesGetLongPollServerBuilder {
	return &MessagesGetLongPollServerBuilder{api.Params{}}
}

// '1' — to return the 'pts' field, needed for the [vk.com/dev/messages.getLongPollHistory|messages.getLongPollHistory] method.
func (b *MessagesGetLongPollServerBuilder) NeedPts(v bool) *MessagesGetLongPollServerBuilder {
	b.Params["need_pts"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesGetLongPollServerBuilder) GroupID(v int64) *MessagesGetLongPollServerBuilder {
	b.Params["group_id"] = v
	return b
}

// Long poll version
func (b *MessagesGetLongPollServerBuilder) LpVersion(v int64) *MessagesGetLongPollServerBuilder {
	b.Params["lp_version"] = v
	return b
}

// MessagesIsMessagesFromGroupAllowedBuilder builder.
//
// Returns information whether sending messages from the community to current user is allowed.
//
// https://vk.com/dev/messages.isMessagesFromGroupAllowed
type MessagesIsMessagesFromGroupAllowedBuilder struct {
	api.Params
}

// MessagesIsMessagesFromGroupAllowedBuilder func.
func NewMessagesIsMessagesFromGroupAllowedBuilder() *MessagesIsMessagesFromGroupAllowedBuilder {
	return &MessagesIsMessagesFromGroupAllowedBuilder{api.Params{}}
}

// Group ID.
func (b *MessagesIsMessagesFromGroupAllowedBuilder) GroupID(v int64) *MessagesIsMessagesFromGroupAllowedBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID.
func (b *MessagesIsMessagesFromGroupAllowedBuilder) UserID(v int64) *MessagesIsMessagesFromGroupAllowedBuilder {
	b.Params["user_id"] = v
	return b
}

// MessagesJoinChatByInviteLinkBuilder builder.
//
// https://vk.com/dev/messages.joinChatByInviteLink
type MessagesJoinChatByInviteLinkBuilder struct {
	api.Params
}

// MessagesJoinChatByInviteLinkBuilder func.
func NewMessagesJoinChatByInviteLinkBuilder() *MessagesJoinChatByInviteLinkBuilder {
	return &MessagesJoinChatByInviteLinkBuilder{api.Params{}}
}

// Invitation link.
func (b *MessagesJoinChatByInviteLinkBuilder) Link(v string) *MessagesJoinChatByInviteLinkBuilder {
	b.Params["link"] = v
	return b
}

// MessagesMarkAsAnsweredConversationBuilder builder.
//
// Marks and unmarks conversations as unanswered.
//
// https://vk.com/dev/messages.markAsAnsweredConversation
type MessagesMarkAsAnsweredConversationBuilder struct {
	api.Params
}

// MessagesMarkAsAnsweredConversationBuilder func.
func NewMessagesMarkAsAnsweredConversationBuilder() *MessagesMarkAsAnsweredConversationBuilder {
	return &MessagesMarkAsAnsweredConversationBuilder{api.Params{}}
}

// ID of conversation to mark as important.
func (b *MessagesMarkAsAnsweredConversationBuilder) PeerID(v int64) *MessagesMarkAsAnsweredConversationBuilder {
	b.Params["peer_id"] = v
	return b
}

// '1' — to mark as answered, '0' — to remove the mark
func (b *MessagesMarkAsAnsweredConversationBuilder) Answered(v bool) *MessagesMarkAsAnsweredConversationBuilder {
	b.Params["answered"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesMarkAsAnsweredConversationBuilder) GroupID(v int64) *MessagesMarkAsAnsweredConversationBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesMarkAsImportantBuilder builder.
//
// Marks and unmarks messages as important (starred).
//
// https://vk.com/dev/messages.markAsImportant
type MessagesMarkAsImportantBuilder struct {
	api.Params
}

// MessagesMarkAsImportantBuilder func.
func NewMessagesMarkAsImportantBuilder() *MessagesMarkAsImportantBuilder {
	return &MessagesMarkAsImportantBuilder{api.Params{}}
}

// IDs of messages to mark as important.
func (b *MessagesMarkAsImportantBuilder) MessageIDs(v []int64) *MessagesMarkAsImportantBuilder {
	b.Params["message_ids"] = v
	return b
}

// '1' — to add a star (mark as important), '0' — to remove the star
func (b *MessagesMarkAsImportantBuilder) Important(v int64) *MessagesMarkAsImportantBuilder {
	b.Params["important"] = v
	return b
}

// MessagesMarkAsImportantConversationBuilder builder.
//
// Marks and unmarks conversations as important.
//
// https://vk.com/dev/messages.markAsImportantConversation
type MessagesMarkAsImportantConversationBuilder struct {
	api.Params
}

// MessagesMarkAsImportantConversationBuilder func.
func NewMessagesMarkAsImportantConversationBuilder() *MessagesMarkAsImportantConversationBuilder {
	return &MessagesMarkAsImportantConversationBuilder{api.Params{}}
}

// ID of conversation to mark as important.
func (b *MessagesMarkAsImportantConversationBuilder) PeerID(v int64) *MessagesMarkAsImportantConversationBuilder {
	b.Params["peer_id"] = v
	return b
}

// '1' — to add a star (mark as important), '0' — to remove the star
func (b *MessagesMarkAsImportantConversationBuilder) Important(v bool) *MessagesMarkAsImportantConversationBuilder {
	b.Params["important"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesMarkAsImportantConversationBuilder) GroupID(v int64) *MessagesMarkAsImportantConversationBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesMarkAsReadBuilder builder.
//
// Marks messages as read.
//
// https://vk.com/dev/messages.markAsRead
type MessagesMarkAsReadBuilder struct {
	api.Params
}

// MessagesMarkAsReadBuilder func.
func NewMessagesMarkAsReadBuilder() *MessagesMarkAsReadBuilder {
	return &MessagesMarkAsReadBuilder{api.Params{}}
}

// IDs of messages to mark as read.
func (b *MessagesMarkAsReadBuilder) MessageIDs(v []int64) *MessagesMarkAsReadBuilder {
	b.Params["message_ids"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesMarkAsReadBuilder) PeerID(v int64) *MessagesMarkAsReadBuilder {
	b.Params["peer_id"] = v
	return b
}

// Message ID to start from.
func (b *MessagesMarkAsReadBuilder) StartMessageID(v int64) *MessagesMarkAsReadBuilder {
	b.Params["start_message_id"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesMarkAsReadBuilder) GroupID(v int64) *MessagesMarkAsReadBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *MessagesMarkAsReadBuilder) MarkConversationAsRead(v bool) *MessagesMarkAsReadBuilder {
	b.Params["mark_conversation_as_read"] = v
	return b
}

// MessagesPinBuilder builder.
//
// Pin a message.
//
// https://vk.com/dev/messages.pin
type MessagesPinBuilder struct {
	api.Params
}

// MessagesPinBuilder func.
func NewMessagesPinBuilder() *MessagesPinBuilder {
	return &MessagesPinBuilder{api.Params{}}
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. "
func (b *MessagesPinBuilder) PeerID(v int64) *MessagesPinBuilder {
	b.Params["peer_id"] = v
	return b
}

func (b *MessagesPinBuilder) MessageID(v int64) *MessagesPinBuilder {
	b.Params["message_id"] = v
	return b
}

// MessagesRemoveChatUserBuilder builder.
//
// Allows the current user to leave a chat or, if the current user started the chat, allows the user to remove another user from the chat.
//
// https://vk.com/dev/messages.removeChatUser
type MessagesRemoveChatUserBuilder struct {
	api.Params
}

// MessagesRemoveChatUserBuilder func.
func NewMessagesRemoveChatUserBuilder() *MessagesRemoveChatUserBuilder {
	return &MessagesRemoveChatUserBuilder{api.Params{}}
}

// Chat ID.
func (b *MessagesRemoveChatUserBuilder) ChatID(v int64) *MessagesRemoveChatUserBuilder {
	b.Params["chat_id"] = v
	return b
}

// ID of the user to be removed from the chat.
func (b *MessagesRemoveChatUserBuilder) UserID(v int64) *MessagesRemoveChatUserBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *MessagesRemoveChatUserBuilder) MemberID(v int64) *MessagesRemoveChatUserBuilder {
	b.Params["member_id"] = v
	return b
}

// MessagesRestoreBuilder builder.
//
// Restores a deleted message.
//
// https://vk.com/dev/messages.restore
type MessagesRestoreBuilder struct {
	api.Params
}

// MessagesRestoreBuilder func.
func NewMessagesRestoreBuilder() *MessagesRestoreBuilder {
	return &MessagesRestoreBuilder{api.Params{}}
}

// ID of a previously-deleted message to restore.
func (b *MessagesRestoreBuilder) MessageID(v int64) *MessagesRestoreBuilder {
	b.Params["message_id"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesRestoreBuilder) GroupID(v int64) *MessagesRestoreBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesSearchBuilder builder.
//
// Returns a list of the current user's private messages that match search criteria.
//
// https://vk.com/dev/messages.search
type MessagesSearchBuilder struct {
	api.Params
}

// MessagesSearchBuilder func.
func NewMessagesSearchBuilder() *MessagesSearchBuilder {
	return &MessagesSearchBuilder{api.Params{}}
}

// Search query string.
func (b *MessagesSearchBuilder) Q(v string) *MessagesSearchBuilder {
	b.Params["q"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesSearchBuilder) PeerID(v int64) *MessagesSearchBuilder {
	b.Params["peer_id"] = v
	return b
}

// Date to search message before in Unixtime.
func (b *MessagesSearchBuilder) Date(v int64) *MessagesSearchBuilder {
	b.Params["date"] = v
	return b
}

// Number of characters after which to truncate a previewed message. To preview the full message, specify '0'. "NOTE: Messages are not truncated by default. Messages are truncated by words."
func (b *MessagesSearchBuilder) PreviewLength(v int64) *MessagesSearchBuilder {
	b.Params["preview_length"] = v
	return b
}

// Offset needed to return a specific subset of messages.
func (b *MessagesSearchBuilder) Offset(v int64) *MessagesSearchBuilder {
	b.Params["offset"] = v
	return b
}

// Number of messages to return.
func (b *MessagesSearchBuilder) Count(v int64) *MessagesSearchBuilder {
	b.Params["count"] = v
	return b
}

func (b *MessagesSearchBuilder) Extended(v bool) *MessagesSearchBuilder {
	b.Params["extended"] = v
	return b
}

func (b *MessagesSearchBuilder) Fields(v []string) *MessagesSearchBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesSearchBuilder) GroupID(v int64) *MessagesSearchBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesSearchConversationsBuilder builder.
//
// Returns a list of the current user's conversations that match search criteria.
//
// https://vk.com/dev/messages.searchConversations
type MessagesSearchConversationsBuilder struct {
	api.Params
}

// MessagesSearchConversationsBuilder func.
func NewMessagesSearchConversationsBuilder() *MessagesSearchConversationsBuilder {
	return &MessagesSearchConversationsBuilder{api.Params{}}
}

// Search query string.
func (b *MessagesSearchConversationsBuilder) Q(v string) *MessagesSearchConversationsBuilder {
	b.Params["q"] = v
	return b
}

// Maximum number of results.
func (b *MessagesSearchConversationsBuilder) Count(v int64) *MessagesSearchConversationsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — return extra information about users and communities
func (b *MessagesSearchConversationsBuilder) Extended(v bool) *MessagesSearchConversationsBuilder {
	b.Params["extended"] = v
	return b
}

// Profile fields to return.
func (b *MessagesSearchConversationsBuilder) Fields(v []UsersFields) *MessagesSearchConversationsBuilder {
	b.Params["fields"] = v
	return b
}

// Group ID (for group messages with user access token)
func (b *MessagesSearchConversationsBuilder) GroupID(v int64) *MessagesSearchConversationsBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesSendBuilder builder.
//
// Sends a message.
//
// https://vk.com/dev/messages.send
type MessagesSendBuilder struct {
	api.Params
}

// MessagesSendBuilder func.
func NewMessagesSendBuilder() *MessagesSendBuilder {
	return &MessagesSendBuilder{api.Params{}}
}

// User ID (by default — current user).
func (b *MessagesSendBuilder) UserID(v int64) *MessagesSendBuilder {
	b.Params["user_id"] = v
	return b
}

// Unique identifier to avoid resending the message.
func (b *MessagesSendBuilder) RandomID(v int64) *MessagesSendBuilder {
	b.Params["random_id"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesSendBuilder) PeerID(v int64) *MessagesSendBuilder {
	b.Params["peer_id"] = v
	return b
}

// User's short address (for example, 'illarionov').
func (b *MessagesSendBuilder) Domain(v string) *MessagesSendBuilder {
	b.Params["domain"] = v
	return b
}

// ID of conversation the message will relate to.
func (b *MessagesSendBuilder) ChatID(v int64) *MessagesSendBuilder {
	b.Params["chat_id"] = v
	return b
}

// IDs of message recipients (if new conversation shall be started).
func (b *MessagesSendBuilder) UserIDs(v []int64) *MessagesSendBuilder {
	b.Params["user_ids"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the message.
func (b *MessagesSendBuilder) Message(v string) *MessagesSendBuilder {
	b.Params["message"] = v
	return b
}

// Geographical latitude of a check-in, in degrees (from -90 to 90).
func (b *MessagesSendBuilder) Lat(v float64) *MessagesSendBuilder {
	b.Params["lat"] = v
	return b
}

// Geographical longitude of a check-in, in degrees (from -180 to 180).
func (b *MessagesSendBuilder) Long(v float64) *MessagesSendBuilder {
	b.Params["long"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the message, separated by commas, in the following format: "<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'wall' — wall post, '<owner_id>' — ID of the media attachment owner. '<media_id>' — media attachment ID. Example: "photo100172_166443618"
func (b *MessagesSendBuilder) Attachment(v string) *MessagesSendBuilder {
	b.Params["attachment"] = v
	return b
}

func (b *MessagesSendBuilder) ReplyTo(v int64) *MessagesSendBuilder {
	b.Params["reply_to"] = v
	return b
}

// ID of forwarded messages, separated with a comma. Listed messages of the sender will be shown in the message body at the recipient's. Example: "123,431,544"
func (b *MessagesSendBuilder) ForwardMessages(v []int64) *MessagesSendBuilder {
	b.Params["forward_messages"] = v
	return b
}

// Sticker id.
func (b *MessagesSendBuilder) StickerID(v int64) *MessagesSendBuilder {
	b.Params["sticker_id"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesSendBuilder) GroupID(v int64) *MessagesSendBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *MessagesSendBuilder) Keyboard(v MessagesKeyboard) *MessagesSendBuilder {
	b.Params["keyboard"] = v
	return b
}

func (b *MessagesSendBuilder) Payload(v string) *MessagesSendBuilder {
	b.Params["payload"] = v
	return b
}

func (b *MessagesSendBuilder) DontParseLinks(v bool) *MessagesSendBuilder {
	b.Params["dont_parse_links"] = v
	return b
}

func (b *MessagesSendBuilder) DisableMentions(v bool) *MessagesSendBuilder {
	b.Params["disable_mentions"] = v
	return b
}

func (b *MessagesSendBuilder) Intent(v string) *MessagesSendBuilder {
	b.Params["intent"] = v
	return b
}

func (b *MessagesSendBuilder) SubscribeID(v int64) *MessagesSendBuilder {
	b.Params["subscribe_id"] = v
	return b
}

// MessagesSendMessageEventAnswerBuilder builder.
//
// https://vk.com/dev/messages.sendMessageEventAnswer
type MessagesSendMessageEventAnswerBuilder struct {
	api.Params
}

// MessagesSendMessageEventAnswerBuilder func.
func NewMessagesSendMessageEventAnswerBuilder() *MessagesSendMessageEventAnswerBuilder {
	return &MessagesSendMessageEventAnswerBuilder{api.Params{}}
}

func (b *MessagesSendMessageEventAnswerBuilder) EventID(v string) *MessagesSendMessageEventAnswerBuilder {
	b.Params["event_id"] = v
	return b
}

func (b *MessagesSendMessageEventAnswerBuilder) UserID(v int64) *MessagesSendMessageEventAnswerBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *MessagesSendMessageEventAnswerBuilder) PeerID(v int64) *MessagesSendMessageEventAnswerBuilder {
	b.Params["peer_id"] = v
	return b
}

func (b *MessagesSendMessageEventAnswerBuilder) EventData(v string) *MessagesSendMessageEventAnswerBuilder {
	b.Params["event_data"] = v
	return b
}

// MessagesSetActivityBuilder builder.
//
// Changes the status of a user as typing in a conversation.
//
// https://vk.com/dev/messages.setActivity
type MessagesSetActivityBuilder struct {
	api.Params
}

// MessagesSetActivityBuilder func.
func NewMessagesSetActivityBuilder() *MessagesSetActivityBuilder {
	return &MessagesSetActivityBuilder{api.Params{}}
}

// User ID.
func (b *MessagesSetActivityBuilder) UserID(v int64) *MessagesSetActivityBuilder {
	b.Params["user_id"] = v
	return b
}

// 'typing' — user has started to type.
func (b *MessagesSetActivityBuilder) Type(v string) *MessagesSetActivityBuilder {
	b.Params["type"] = v
	return b
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. "
func (b *MessagesSetActivityBuilder) PeerID(v int64) *MessagesSetActivityBuilder {
	b.Params["peer_id"] = v
	return b
}

// Group ID (for group messages with group access token)
func (b *MessagesSetActivityBuilder) GroupID(v int64) *MessagesSetActivityBuilder {
	b.Params["group_id"] = v
	return b
}

// MessagesSetChatPhotoBuilder builder.
//
// Sets a previously-uploaded picture as the cover picture of a chat.
//
// https://vk.com/dev/messages.setChatPhoto
type MessagesSetChatPhotoBuilder struct {
	api.Params
}

// MessagesSetChatPhotoBuilder func.
func NewMessagesSetChatPhotoBuilder() *MessagesSetChatPhotoBuilder {
	return &MessagesSetChatPhotoBuilder{api.Params{}}
}

// Upload URL from the 'response' field returned by the [vk.com/dev/photos.getChatUploadServer|photos.getChatUploadServer] method upon successfully uploading an image.
func (b *MessagesSetChatPhotoBuilder) File(v string) *MessagesSetChatPhotoBuilder {
	b.Params["file"] = v
	return b
}

// MessagesUnpinBuilder builder.
//
// https://vk.com/dev/messages.unpin
type MessagesUnpinBuilder struct {
	api.Params
}

// MessagesUnpinBuilder func.
func NewMessagesUnpinBuilder() *MessagesUnpinBuilder {
	return &MessagesUnpinBuilder{api.Params{}}
}

func (b *MessagesUnpinBuilder) PeerID(v int64) *MessagesUnpinBuilder {
	b.Params["peer_id"] = v
	return b
}

func (b *MessagesUnpinBuilder) GroupID(v int64) *MessagesUnpinBuilder {
	b.Params["group_id"] = v
	return b
}

// NewsfeedAddBanBuilder builder.
//
// Prevents news from specified users and communities from appearing in the current user's newsfeed.
//
// https://vk.com/dev/newsfeed.addBan
type NewsfeedAddBanBuilder struct {
	api.Params
}

// NewsfeedAddBanBuilder func.
func NewNewsfeedAddBanBuilder() *NewsfeedAddBanBuilder {
	return &NewsfeedAddBanBuilder{api.Params{}}
}

func (b *NewsfeedAddBanBuilder) UserIDs(v []int64) *NewsfeedAddBanBuilder {
	b.Params["user_ids"] = v
	return b
}

func (b *NewsfeedAddBanBuilder) GroupIDs(v []int64) *NewsfeedAddBanBuilder {
	b.Params["group_ids"] = v
	return b
}

// NewsfeedDeleteBanBuilder builder.
//
// Allows news from previously banned users and communities to be shown in the current user's newsfeed.
//
// https://vk.com/dev/newsfeed.deleteBan
type NewsfeedDeleteBanBuilder struct {
	api.Params
}

// NewsfeedDeleteBanBuilder func.
func NewNewsfeedDeleteBanBuilder() *NewsfeedDeleteBanBuilder {
	return &NewsfeedDeleteBanBuilder{api.Params{}}
}

func (b *NewsfeedDeleteBanBuilder) UserIDs(v []int64) *NewsfeedDeleteBanBuilder {
	b.Params["user_ids"] = v
	return b
}

func (b *NewsfeedDeleteBanBuilder) GroupIDs(v []int64) *NewsfeedDeleteBanBuilder {
	b.Params["group_ids"] = v
	return b
}

// NewsfeedDeleteListBuilder builder.
//
// https://vk.com/dev/newsfeed.deleteList
type NewsfeedDeleteListBuilder struct {
	api.Params
}

// NewsfeedDeleteListBuilder func.
func NewNewsfeedDeleteListBuilder() *NewsfeedDeleteListBuilder {
	return &NewsfeedDeleteListBuilder{api.Params{}}
}

func (b *NewsfeedDeleteListBuilder) ListID(v int64) *NewsfeedDeleteListBuilder {
	b.Params["list_id"] = v
	return b
}

// NewsfeedGetBuilder builder.
//
// Returns data required to show newsfeed for the current user.
//
// https://vk.com/dev/newsfeed.get
type NewsfeedGetBuilder struct {
	api.Params
}

// NewsfeedGetBuilder func.
func NewNewsfeedGetBuilder() *NewsfeedGetBuilder {
	return &NewsfeedGetBuilder{api.Params{}}
}

// Filters to apply: 'post' — new wall posts, 'photo' — new photos, 'photo_tag' — new photo tags, 'wall_photo' — new wall photos, 'friend' — new friends, 'note' — new notes
func (b *NewsfeedGetBuilder) Filters(v []NewsfeedFilters) *NewsfeedGetBuilder {
	b.Params["filters"] = v
	return b
}

// '1' — to return news items from banned sources
func (b *NewsfeedGetBuilder) ReturnBanned(v bool) *NewsfeedGetBuilder {
	b.Params["return_banned"] = v
	return b
}

// Earliest timestamp (in Unix time) of a news item to return. By default, 24 hours ago.
func (b *NewsfeedGetBuilder) StartTime(v int64) *NewsfeedGetBuilder {
	b.Params["start_time"] = v
	return b
}

// Latest timestamp (in Unix time) of a news item to return. By default, the current time.
func (b *NewsfeedGetBuilder) EndTime(v int64) *NewsfeedGetBuilder {
	b.Params["end_time"] = v
	return b
}

// Maximum number of photos to return. By default, '5'.
func (b *NewsfeedGetBuilder) MaxPhotos(v int64) *NewsfeedGetBuilder {
	b.Params["max_photos"] = v
	return b
}

// Sources to obtain news from, separated by commas. User IDs can be specified in formats '' or 'u' , where '' is the user's friend ID. Community IDs can be specified in formats '-' or 'g' , where '' is the community ID. If the parameter is not set, all of the user's friends and communities are returned, except for banned sources, which can be obtained with the [vk.com/dev/newsfeed.getBanned|newsfeed.getBanned] method.
func (b *NewsfeedGetBuilder) SourceIDs(v string) *NewsfeedGetBuilder {
	b.Params["source_ids"] = v
	return b
}

// identifier required to get the next page of results. Value for this parameter is returned in 'next_from' field in a reply.
func (b *NewsfeedGetBuilder) StartFrom(v string) *NewsfeedGetBuilder {
	b.Params["start_from"] = v
	return b
}

// Number of news items to return (default 50, maximum 100). For auto feed, you can use the 'new_offset' parameter returned by this method.
func (b *NewsfeedGetBuilder) Count(v int64) *NewsfeedGetBuilder {
	b.Params["count"] = v
	return b
}

// Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.
func (b *NewsfeedGetBuilder) Fields(v []BaseUserGroupFields) *NewsfeedGetBuilder {
	b.Params["fields"] = v
	return b
}

func (b *NewsfeedGetBuilder) Section(v string) *NewsfeedGetBuilder {
	b.Params["section"] = v
	return b
}

// NewsfeedGetBannedBuilder builder.
//
// Returns a list of users and communities banned from the current user's newsfeed.
//
// https://vk.com/dev/newsfeed.getBanned
type NewsfeedGetBannedBuilder struct {
	api.Params
}

// NewsfeedGetBannedBuilder func.
func NewNewsfeedGetBannedBuilder() *NewsfeedGetBannedBuilder {
	return &NewsfeedGetBannedBuilder{api.Params{}}
}

// '1' — return extra information about users and communities
func (b *NewsfeedGetBannedBuilder) Extended(v bool) *NewsfeedGetBannedBuilder {
	b.Params["extended"] = v
	return b
}

// Profile fields to return.
func (b *NewsfeedGetBannedBuilder) Fields(v []UsersFields) *NewsfeedGetBannedBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *NewsfeedGetBannedBuilder) NameCase(v string) *NewsfeedGetBannedBuilder {
	b.Params["name_case"] = v
	return b
}

// NewsfeedGetCommentsBuilder builder.
//
// Returns a list of comments in the current user's newsfeed.
//
// https://vk.com/dev/newsfeed.getComments
type NewsfeedGetCommentsBuilder struct {
	api.Params
}

// NewsfeedGetCommentsBuilder func.
func NewNewsfeedGetCommentsBuilder() *NewsfeedGetCommentsBuilder {
	return &NewsfeedGetCommentsBuilder{api.Params{}}
}

// Number of comments to return. For auto feed, you can use the 'new_offset' parameter returned by this method.
func (b *NewsfeedGetCommentsBuilder) Count(v int64) *NewsfeedGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// Filters to apply: 'post' — new comments on wall posts, 'photo' — new comments on photos, 'video' — new comments on videos, 'topic' — new comments on discussions, 'note' — new comments on notes,
func (b *NewsfeedGetCommentsBuilder) Filters(v []NewsfeedCommentsFilters) *NewsfeedGetCommentsBuilder {
	b.Params["filters"] = v
	return b
}

// Object ID, comments on repost of which shall be returned, e.g. 'wall1_45486'. (If the parameter is set, the 'filters' parameter is optional.),
func (b *NewsfeedGetCommentsBuilder) Reposts(v string) *NewsfeedGetCommentsBuilder {
	b.Params["reposts"] = v
	return b
}

// Earliest timestamp (in Unix time) of a comment to return. By default, 24 hours ago.
func (b *NewsfeedGetCommentsBuilder) StartTime(v int64) *NewsfeedGetCommentsBuilder {
	b.Params["start_time"] = v
	return b
}

// Latest timestamp (in Unix time) of a comment to return. By default, the current time.
func (b *NewsfeedGetCommentsBuilder) EndTime(v int64) *NewsfeedGetCommentsBuilder {
	b.Params["end_time"] = v
	return b
}

func (b *NewsfeedGetCommentsBuilder) LastCommentsCount(v int64) *NewsfeedGetCommentsBuilder {
	b.Params["last_comments_count"] = v
	return b
}

// Identificator needed to return the next page with results. Value for this parameter returns in 'next_from' field.
func (b *NewsfeedGetCommentsBuilder) StartFrom(v string) *NewsfeedGetCommentsBuilder {
	b.Params["start_from"] = v
	return b
}

// Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.
func (b *NewsfeedGetCommentsBuilder) Fields(v []BaseUserGroupFields) *NewsfeedGetCommentsBuilder {
	b.Params["fields"] = v
	return b
}

// NewsfeedGetListsBuilder builder.
//
// Returns a list of newsfeeds followed by the current user.
//
// https://vk.com/dev/newsfeed.getLists
type NewsfeedGetListsBuilder struct {
	api.Params
}

// NewsfeedGetListsBuilder func.
func NewNewsfeedGetListsBuilder() *NewsfeedGetListsBuilder {
	return &NewsfeedGetListsBuilder{api.Params{}}
}

// numeric list identifiers.
func (b *NewsfeedGetListsBuilder) ListIDs(v []int64) *NewsfeedGetListsBuilder {
	b.Params["list_ids"] = v
	return b
}

// Return additional list info
func (b *NewsfeedGetListsBuilder) Extended(v bool) *NewsfeedGetListsBuilder {
	b.Params["extended"] = v
	return b
}

// NewsfeedGetMentionsBuilder builder.
//
// Returns a list of posts on user walls in which the current user is mentioned.
//
// https://vk.com/dev/newsfeed.getMentions
type NewsfeedGetMentionsBuilder struct {
	api.Params
}

// NewsfeedGetMentionsBuilder func.
func NewNewsfeedGetMentionsBuilder() *NewsfeedGetMentionsBuilder {
	return &NewsfeedGetMentionsBuilder{api.Params{}}
}

// Owner ID.
func (b *NewsfeedGetMentionsBuilder) OwnerID(v int64) *NewsfeedGetMentionsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Earliest timestamp (in Unix time) of a post to return. By default, 24 hours ago.
func (b *NewsfeedGetMentionsBuilder) StartTime(v int64) *NewsfeedGetMentionsBuilder {
	b.Params["start_time"] = v
	return b
}

// Latest timestamp (in Unix time) of a post to return. By default, the current time.
func (b *NewsfeedGetMentionsBuilder) EndTime(v int64) *NewsfeedGetMentionsBuilder {
	b.Params["end_time"] = v
	return b
}

// Offset needed to return a specific subset of posts.
func (b *NewsfeedGetMentionsBuilder) Offset(v int64) *NewsfeedGetMentionsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of posts to return.
func (b *NewsfeedGetMentionsBuilder) Count(v int64) *NewsfeedGetMentionsBuilder {
	b.Params["count"] = v
	return b
}

// NewsfeedGetRecommendedBuilder builder.
//
// , Returns a list of newsfeeds recommended to the current user.
//
// https://vk.com/dev/newsfeed.getRecommended
type NewsfeedGetRecommendedBuilder struct {
	api.Params
}

// NewsfeedGetRecommendedBuilder func.
func NewNewsfeedGetRecommendedBuilder() *NewsfeedGetRecommendedBuilder {
	return &NewsfeedGetRecommendedBuilder{api.Params{}}
}

// Earliest timestamp (in Unix time) of a news item to return. By default, 24 hours ago.
func (b *NewsfeedGetRecommendedBuilder) StartTime(v int64) *NewsfeedGetRecommendedBuilder {
	b.Params["start_time"] = v
	return b
}

// Latest timestamp (in Unix time) of a news item to return. By default, the current time.
func (b *NewsfeedGetRecommendedBuilder) EndTime(v int64) *NewsfeedGetRecommendedBuilder {
	b.Params["end_time"] = v
	return b
}

// Maximum number of photos to return. By default, '5'.
func (b *NewsfeedGetRecommendedBuilder) MaxPhotos(v int64) *NewsfeedGetRecommendedBuilder {
	b.Params["max_photos"] = v
	return b
}

// 'new_from' value obtained in previous call.
func (b *NewsfeedGetRecommendedBuilder) StartFrom(v string) *NewsfeedGetRecommendedBuilder {
	b.Params["start_from"] = v
	return b
}

// Number of news items to return.
func (b *NewsfeedGetRecommendedBuilder) Count(v int64) *NewsfeedGetRecommendedBuilder {
	b.Params["count"] = v
	return b
}

// Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.
func (b *NewsfeedGetRecommendedBuilder) Fields(v []BaseUserGroupFields) *NewsfeedGetRecommendedBuilder {
	b.Params["fields"] = v
	return b
}

// NewsfeedGetSuggestedSourcesBuilder builder.
//
// Returns communities and users that current user is suggested to follow.
//
// https://vk.com/dev/newsfeed.getSuggestedSources
type NewsfeedGetSuggestedSourcesBuilder struct {
	api.Params
}

// NewsfeedGetSuggestedSourcesBuilder func.
func NewNewsfeedGetSuggestedSourcesBuilder() *NewsfeedGetSuggestedSourcesBuilder {
	return &NewsfeedGetSuggestedSourcesBuilder{api.Params{}}
}

// offset required to choose a particular subset of communities or users.
func (b *NewsfeedGetSuggestedSourcesBuilder) Offset(v int64) *NewsfeedGetSuggestedSourcesBuilder {
	b.Params["offset"] = v
	return b
}

// amount of communities or users to return.
func (b *NewsfeedGetSuggestedSourcesBuilder) Count(v int64) *NewsfeedGetSuggestedSourcesBuilder {
	b.Params["count"] = v
	return b
}

// shuffle the returned list or not.
func (b *NewsfeedGetSuggestedSourcesBuilder) Shuffle(v bool) *NewsfeedGetSuggestedSourcesBuilder {
	b.Params["shuffle"] = v
	return b
}

// list of extra fields to be returned. See available fields for [vk.com/dev/fields|users] and [vk.com/dev/fields_groups|communities].
func (b *NewsfeedGetSuggestedSourcesBuilder) Fields(v []BaseUserGroupFields) *NewsfeedGetSuggestedSourcesBuilder {
	b.Params["fields"] = v
	return b
}

// NewsfeedIgnoreItemBuilder builder.
//
// Hides an item from the newsfeed.
//
// https://vk.com/dev/newsfeed.ignoreItem
type NewsfeedIgnoreItemBuilder struct {
	api.Params
}

// NewsfeedIgnoreItemBuilder func.
func NewNewsfeedIgnoreItemBuilder() *NewsfeedIgnoreItemBuilder {
	return &NewsfeedIgnoreItemBuilder{api.Params{}}
}

// Item type. Possible values: *'wall' – post on the wall,, *'tag' – tag on a photo,, *'profilephoto' – profile photo,, *'video' – video,, *'audio' – audio.
func (b *NewsfeedIgnoreItemBuilder) Type(v NewsfeedIgnoreItemType) *NewsfeedIgnoreItemBuilder {
	b.Params["type"] = v
	return b
}

// Item owner's identifier (user or community), "Note that community id must be negative. 'owner_id=1' – user , 'owner_id=-1' – community "
func (b *NewsfeedIgnoreItemBuilder) OwnerID(v int64) *NewsfeedIgnoreItemBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item identifier
func (b *NewsfeedIgnoreItemBuilder) ItemID(v int64) *NewsfeedIgnoreItemBuilder {
	b.Params["item_id"] = v
	return b
}

// NewsfeedSaveListBuilder builder.
//
// Creates and edits user newsfeed lists
//
// https://vk.com/dev/newsfeed.saveList
type NewsfeedSaveListBuilder struct {
	api.Params
}

// NewsfeedSaveListBuilder func.
func NewNewsfeedSaveListBuilder() *NewsfeedSaveListBuilder {
	return &NewsfeedSaveListBuilder{api.Params{}}
}

// numeric list identifier (if not sent, will be set automatically).
func (b *NewsfeedSaveListBuilder) ListID(v int64) *NewsfeedSaveListBuilder {
	b.Params["list_id"] = v
	return b
}

// list name.
func (b *NewsfeedSaveListBuilder) Title(v string) *NewsfeedSaveListBuilder {
	b.Params["title"] = v
	return b
}

// users and communities identifiers to be added to the list. Community identifiers must be negative numbers.
func (b *NewsfeedSaveListBuilder) SourceIDs(v []int64) *NewsfeedSaveListBuilder {
	b.Params["source_ids"] = v
	return b
}

// reposts display on and off ('1' is for off).
func (b *NewsfeedSaveListBuilder) NoReposts(v bool) *NewsfeedSaveListBuilder {
	b.Params["no_reposts"] = v
	return b
}

// NewsfeedSearchBuilder builder.
//
// Returns search results by statuses.
//
// https://vk.com/dev/newsfeed.search
type NewsfeedSearchBuilder struct {
	api.Params
}

// NewsfeedSearchBuilder func.
func NewNewsfeedSearchBuilder() *NewsfeedSearchBuilder {
	return &NewsfeedSearchBuilder{api.Params{}}
}

// Search query string (e.g., 'New Year').
func (b *NewsfeedSearchBuilder) Q(v string) *NewsfeedSearchBuilder {
	b.Params["q"] = v
	return b
}

// '1' — to return additional information about the user or community that placed the post.
func (b *NewsfeedSearchBuilder) Extended(v bool) *NewsfeedSearchBuilder {
	b.Params["extended"] = v
	return b
}

// Number of posts to return.
func (b *NewsfeedSearchBuilder) Count(v int64) *NewsfeedSearchBuilder {
	b.Params["count"] = v
	return b
}

// Geographical latitude point (in degrees, -90 to 90) within which to search.
func (b *NewsfeedSearchBuilder) Latitude(v float64) *NewsfeedSearchBuilder {
	b.Params["latitude"] = v
	return b
}

// Geographical longitude point (in degrees, -180 to 180) within which to search.
func (b *NewsfeedSearchBuilder) Longitude(v float64) *NewsfeedSearchBuilder {
	b.Params["longitude"] = v
	return b
}

// Earliest timestamp (in Unix time) of a news item to return. By default, 24 hours ago.
func (b *NewsfeedSearchBuilder) StartTime(v int64) *NewsfeedSearchBuilder {
	b.Params["start_time"] = v
	return b
}

// Latest timestamp (in Unix time) of a news item to return. By default, the current time.
func (b *NewsfeedSearchBuilder) EndTime(v int64) *NewsfeedSearchBuilder {
	b.Params["end_time"] = v
	return b
}

func (b *NewsfeedSearchBuilder) StartFrom(v string) *NewsfeedSearchBuilder {
	b.Params["start_from"] = v
	return b
}

// Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.
func (b *NewsfeedSearchBuilder) Fields(v []BaseUserGroupFields) *NewsfeedSearchBuilder {
	b.Params["fields"] = v
	return b
}

// NewsfeedUnignoreItemBuilder builder.
//
// Returns a hidden item to the newsfeed.
//
// https://vk.com/dev/newsfeed.unignoreItem
type NewsfeedUnignoreItemBuilder struct {
	api.Params
}

// NewsfeedUnignoreItemBuilder func.
func NewNewsfeedUnignoreItemBuilder() *NewsfeedUnignoreItemBuilder {
	return &NewsfeedUnignoreItemBuilder{api.Params{}}
}

// Item type. Possible values: *'wall' – post on the wall,, *'tag' – tag on a photo,, *'profilephoto' – profile photo,, *'video' – video,, *'audio' – audio.
func (b *NewsfeedUnignoreItemBuilder) Type(v NewsfeedIgnoreItemType) *NewsfeedUnignoreItemBuilder {
	b.Params["type"] = v
	return b
}

// Item owner's identifier (user or community), "Note that community id must be negative. 'owner_id=1' – user , 'owner_id=-1' – community "
func (b *NewsfeedUnignoreItemBuilder) OwnerID(v int64) *NewsfeedUnignoreItemBuilder {
	b.Params["owner_id"] = v
	return b
}

// Item identifier
func (b *NewsfeedUnignoreItemBuilder) ItemID(v int64) *NewsfeedUnignoreItemBuilder {
	b.Params["item_id"] = v
	return b
}

// Track code of unignored item
func (b *NewsfeedUnignoreItemBuilder) TrackCode(v string) *NewsfeedUnignoreItemBuilder {
	b.Params["track_code"] = v
	return b
}

// NewsfeedUnsubscribeBuilder builder.
//
// Unsubscribes the current user from specified newsfeeds.
//
// https://vk.com/dev/newsfeed.unsubscribe
type NewsfeedUnsubscribeBuilder struct {
	api.Params
}

// NewsfeedUnsubscribeBuilder func.
func NewNewsfeedUnsubscribeBuilder() *NewsfeedUnsubscribeBuilder {
	return &NewsfeedUnsubscribeBuilder{api.Params{}}
}

// Type of object from which to unsubscribe: 'note' — note, 'photo' — photo, 'post' — post on user wall or community wall, 'topic' — topic, 'video' — video
func (b *NewsfeedUnsubscribeBuilder) Type(v string) *NewsfeedUnsubscribeBuilder {
	b.Params["type"] = v
	return b
}

// Object owner ID.
func (b *NewsfeedUnsubscribeBuilder) OwnerID(v int64) *NewsfeedUnsubscribeBuilder {
	b.Params["owner_id"] = v
	return b
}

// Object ID.
func (b *NewsfeedUnsubscribeBuilder) ItemID(v int64) *NewsfeedUnsubscribeBuilder {
	b.Params["item_id"] = v
	return b
}

// NotesAddBuilder builder.
//
// Creates a new note for the current user.
//
// https://vk.com/dev/notes.add
type NotesAddBuilder struct {
	api.Params
}

// NotesAddBuilder func.
func NewNotesAddBuilder() *NotesAddBuilder {
	return &NotesAddBuilder{api.Params{}}
}

// Note title.
func (b *NotesAddBuilder) Title(v string) *NotesAddBuilder {
	b.Params["title"] = v
	return b
}

// Note text.
func (b *NotesAddBuilder) Text(v string) *NotesAddBuilder {
	b.Params["text"] = v
	return b
}

func (b *NotesAddBuilder) PrivacyView(v []string) *NotesAddBuilder {
	b.Params["privacy_view"] = v
	return b
}

func (b *NotesAddBuilder) PrivacyComment(v []string) *NotesAddBuilder {
	b.Params["privacy_comment"] = v
	return b
}

// NotesCreateCommentBuilder builder.
//
// Adds a new comment on a note.
//
// https://vk.com/dev/notes.createComment
type NotesCreateCommentBuilder struct {
	api.Params
}

// NotesCreateCommentBuilder func.
func NewNotesCreateCommentBuilder() *NotesCreateCommentBuilder {
	return &NotesCreateCommentBuilder{api.Params{}}
}

// Note ID.
func (b *NotesCreateCommentBuilder) NoteID(v int64) *NotesCreateCommentBuilder {
	b.Params["note_id"] = v
	return b
}

// Note owner ID.
func (b *NotesCreateCommentBuilder) OwnerID(v int64) *NotesCreateCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the user to whom the reply is addressed (if the comment is a reply to another comment).
func (b *NotesCreateCommentBuilder) ReplyTo(v int64) *NotesCreateCommentBuilder {
	b.Params["reply_to"] = v
	return b
}

// Comment text.
func (b *NotesCreateCommentBuilder) Message(v string) *NotesCreateCommentBuilder {
	b.Params["message"] = v
	return b
}

func (b *NotesCreateCommentBuilder) Guid(v string) *NotesCreateCommentBuilder {
	b.Params["guid"] = v
	return b
}

// NotesDeleteBuilder builder.
//
// Deletes a note of the current user.
//
// https://vk.com/dev/notes.delete
type NotesDeleteBuilder struct {
	api.Params
}

// NotesDeleteBuilder func.
func NewNotesDeleteBuilder() *NotesDeleteBuilder {
	return &NotesDeleteBuilder{api.Params{}}
}

// Note ID.
func (b *NotesDeleteBuilder) NoteID(v int64) *NotesDeleteBuilder {
	b.Params["note_id"] = v
	return b
}

// NotesDeleteCommentBuilder builder.
//
// Deletes a comment on a note.
//
// https://vk.com/dev/notes.deleteComment
type NotesDeleteCommentBuilder struct {
	api.Params
}

// NotesDeleteCommentBuilder func.
func NewNotesDeleteCommentBuilder() *NotesDeleteCommentBuilder {
	return &NotesDeleteCommentBuilder{api.Params{}}
}

// Comment ID.
func (b *NotesDeleteCommentBuilder) CommentID(v int64) *NotesDeleteCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Note owner ID.
func (b *NotesDeleteCommentBuilder) OwnerID(v int64) *NotesDeleteCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// NotesEditBuilder builder.
//
// Edits a note of the current user.
//
// https://vk.com/dev/notes.edit
type NotesEditBuilder struct {
	api.Params
}

// NotesEditBuilder func.
func NewNotesEditBuilder() *NotesEditBuilder {
	return &NotesEditBuilder{api.Params{}}
}

// Note ID.
func (b *NotesEditBuilder) NoteID(v int64) *NotesEditBuilder {
	b.Params["note_id"] = v
	return b
}

// Note title.
func (b *NotesEditBuilder) Title(v string) *NotesEditBuilder {
	b.Params["title"] = v
	return b
}

// Note text.
func (b *NotesEditBuilder) Text(v string) *NotesEditBuilder {
	b.Params["text"] = v
	return b
}

func (b *NotesEditBuilder) PrivacyView(v []string) *NotesEditBuilder {
	b.Params["privacy_view"] = v
	return b
}

func (b *NotesEditBuilder) PrivacyComment(v []string) *NotesEditBuilder {
	b.Params["privacy_comment"] = v
	return b
}

// NotesEditCommentBuilder builder.
//
// Edits a comment on a note.
//
// https://vk.com/dev/notes.editComment
type NotesEditCommentBuilder struct {
	api.Params
}

// NotesEditCommentBuilder func.
func NewNotesEditCommentBuilder() *NotesEditCommentBuilder {
	return &NotesEditCommentBuilder{api.Params{}}
}

// Comment ID.
func (b *NotesEditCommentBuilder) CommentID(v int64) *NotesEditCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Note owner ID.
func (b *NotesEditCommentBuilder) OwnerID(v int64) *NotesEditCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// New comment text.
func (b *NotesEditCommentBuilder) Message(v string) *NotesEditCommentBuilder {
	b.Params["message"] = v
	return b
}

// NotesGetBuilder builder.
//
// Returns a list of notes created by a user.
//
// https://vk.com/dev/notes.get
type NotesGetBuilder struct {
	api.Params
}

// NotesGetBuilder func.
func NewNotesGetBuilder() *NotesGetBuilder {
	return &NotesGetBuilder{api.Params{}}
}

// Note IDs.
func (b *NotesGetBuilder) NoteIDs(v []int64) *NotesGetBuilder {
	b.Params["note_ids"] = v
	return b
}

// Note owner ID.
func (b *NotesGetBuilder) UserID(v int64) *NotesGetBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *NotesGetBuilder) Offset(v int64) *NotesGetBuilder {
	b.Params["offset"] = v
	return b
}

// Number of notes to return.
func (b *NotesGetBuilder) Count(v int64) *NotesGetBuilder {
	b.Params["count"] = v
	return b
}

func (b *NotesGetBuilder) Sort(v int64) *NotesGetBuilder {
	b.Params["sort"] = v
	return b
}

// NotesGetByIDBuilder builder.
//
// Returns a note by its ID.
//
// https://vk.com/dev/notes.getById
type NotesGetByIDBuilder struct {
	api.Params
}

// NotesGetByIDBuilder func.
func NewNotesGetByIDBuilder() *NotesGetByIDBuilder {
	return &NotesGetByIDBuilder{api.Params{}}
}

// Note ID.
func (b *NotesGetByIDBuilder) NoteID(v int64) *NotesGetByIDBuilder {
	b.Params["note_id"] = v
	return b
}

// Note owner ID.
func (b *NotesGetByIDBuilder) OwnerID(v int64) *NotesGetByIDBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *NotesGetByIDBuilder) NeedWiki(v bool) *NotesGetByIDBuilder {
	b.Params["need_wiki"] = v
	return b
}

// NotesGetCommentsBuilder builder.
//
// Returns a list of comments on a note.
//
// https://vk.com/dev/notes.getComments
type NotesGetCommentsBuilder struct {
	api.Params
}

// NotesGetCommentsBuilder func.
func NewNotesGetCommentsBuilder() *NotesGetCommentsBuilder {
	return &NotesGetCommentsBuilder{api.Params{}}
}

// Note ID.
func (b *NotesGetCommentsBuilder) NoteID(v int64) *NotesGetCommentsBuilder {
	b.Params["note_id"] = v
	return b
}

// Note owner ID.
func (b *NotesGetCommentsBuilder) OwnerID(v int64) *NotesGetCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *NotesGetCommentsBuilder) Sort(v int64) *NotesGetCommentsBuilder {
	b.Params["sort"] = v
	return b
}

func (b *NotesGetCommentsBuilder) Offset(v int64) *NotesGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of comments to return.
func (b *NotesGetCommentsBuilder) Count(v int64) *NotesGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// NotesRestoreCommentBuilder builder.
//
// Restores a deleted comment on a note.
//
// https://vk.com/dev/notes.restoreComment
type NotesRestoreCommentBuilder struct {
	api.Params
}

// NotesRestoreCommentBuilder func.
func NewNotesRestoreCommentBuilder() *NotesRestoreCommentBuilder {
	return &NotesRestoreCommentBuilder{api.Params{}}
}

// Comment ID.
func (b *NotesRestoreCommentBuilder) CommentID(v int64) *NotesRestoreCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Note owner ID.
func (b *NotesRestoreCommentBuilder) OwnerID(v int64) *NotesRestoreCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// NotificationsGetBuilder builder.
//
// Returns a list of notifications about other users' feedback to the current user's wall posts.
//
// https://vk.com/dev/notifications.get
type NotificationsGetBuilder struct {
	api.Params
}

// NotificationsGetBuilder func.
func NewNotificationsGetBuilder() *NotificationsGetBuilder {
	return &NotificationsGetBuilder{api.Params{}}
}

// Number of notifications to return.
func (b *NotificationsGetBuilder) Count(v int64) *NotificationsGetBuilder {
	b.Params["count"] = v
	return b
}

func (b *NotificationsGetBuilder) StartFrom(v string) *NotificationsGetBuilder {
	b.Params["start_from"] = v
	return b
}

// Type of notifications to return: 'wall' — wall posts, 'mentions' — mentions in wall posts, comments, or topics, 'comments' — comments to wall posts, photos, and videos, 'likes' — likes, 'reposted' — wall posts that are copied from the current user's wall, 'followers' — new followers, 'friends' — accepted friend requests
func (b *NotificationsGetBuilder) Filters(v []string) *NotificationsGetBuilder {
	b.Params["filters"] = v
	return b
}

// Earliest timestamp (in Unix time) of a notification to return. By default, 24 hours ago.
func (b *NotificationsGetBuilder) StartTime(v int64) *NotificationsGetBuilder {
	b.Params["start_time"] = v
	return b
}

// Latest timestamp (in Unix time) of a notification to return. By default, the current time.
func (b *NotificationsGetBuilder) EndTime(v int64) *NotificationsGetBuilder {
	b.Params["end_time"] = v
	return b
}

// NotificationsMarkAsViewedBuilder builder.
//
// Resets the counter of new notifications about other users' feedback to the current user's wall posts.
//
// https://vk.com/dev/notifications.markAsViewed
type NotificationsMarkAsViewedBuilder struct {
	api.Params
}

// NotificationsMarkAsViewedBuilder func.
func NewNotificationsMarkAsViewedBuilder() *NotificationsMarkAsViewedBuilder {
	return &NotificationsMarkAsViewedBuilder{api.Params{}}
}

// NotificationsSendMessageBuilder builder.
//
// https://vk.com/dev/notifications.sendMessage
type NotificationsSendMessageBuilder struct {
	api.Params
}

// NotificationsSendMessageBuilder func.
func NewNotificationsSendMessageBuilder() *NotificationsSendMessageBuilder {
	return &NotificationsSendMessageBuilder{api.Params{}}
}

func (b *NotificationsSendMessageBuilder) UserIDs(v []int64) *NotificationsSendMessageBuilder {
	b.Params["user_ids"] = v
	return b
}

func (b *NotificationsSendMessageBuilder) Message(v string) *NotificationsSendMessageBuilder {
	b.Params["message"] = v
	return b
}

func (b *NotificationsSendMessageBuilder) Fragment(v string) *NotificationsSendMessageBuilder {
	b.Params["fragment"] = v
	return b
}

func (b *NotificationsSendMessageBuilder) GroupID(v int64) *NotificationsSendMessageBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *NotificationsSendMessageBuilder) RandomID(v int64) *NotificationsSendMessageBuilder {
	b.Params["random_id"] = v
	return b
}

// OrdersCancelSubscriptionBuilder builder.
//
// https://vk.com/dev/orders.cancelSubscription
type OrdersCancelSubscriptionBuilder struct {
	api.Params
}

// OrdersCancelSubscriptionBuilder func.
func NewOrdersCancelSubscriptionBuilder() *OrdersCancelSubscriptionBuilder {
	return &OrdersCancelSubscriptionBuilder{api.Params{}}
}

func (b *OrdersCancelSubscriptionBuilder) UserID(v int64) *OrdersCancelSubscriptionBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *OrdersCancelSubscriptionBuilder) SubscriptionID(v int64) *OrdersCancelSubscriptionBuilder {
	b.Params["subscription_id"] = v
	return b
}

func (b *OrdersCancelSubscriptionBuilder) PendingCancel(v bool) *OrdersCancelSubscriptionBuilder {
	b.Params["pending_cancel"] = v
	return b
}

// OrdersChangeStateBuilder builder.
//
// Changes order status.
//
// https://vk.com/dev/orders.changeState
type OrdersChangeStateBuilder struct {
	api.Params
}

// OrdersChangeStateBuilder func.
func NewOrdersChangeStateBuilder() *OrdersChangeStateBuilder {
	return &OrdersChangeStateBuilder{api.Params{}}
}

// order ID.
func (b *OrdersChangeStateBuilder) OrderID(v int64) *OrdersChangeStateBuilder {
	b.Params["order_id"] = v
	return b
}

// action to be done with the order. Available actions: *cancel — to cancel unconfirmed order. *charge — to confirm unconfirmed order. Applies only if processing of [vk.com/dev/payments_status|order_change_state] notification failed. *refund — to cancel confirmed order.
func (b *OrdersChangeStateBuilder) Action(v string) *OrdersChangeStateBuilder {
	b.Params["action"] = v
	return b
}

// internal ID of the order in the application.
func (b *OrdersChangeStateBuilder) AppOrderID(v int64) *OrdersChangeStateBuilder {
	b.Params["app_order_id"] = v
	return b
}

// if this parameter is set to 1, this method returns a list of test mode orders. By default — 0.
func (b *OrdersChangeStateBuilder) TestMode(v bool) *OrdersChangeStateBuilder {
	b.Params["test_mode"] = v
	return b
}

// OrdersGetBuilder builder.
//
// Returns a list of orders.
//
// https://vk.com/dev/orders.get
type OrdersGetBuilder struct {
	api.Params
}

// OrdersGetBuilder func.
func NewOrdersGetBuilder() *OrdersGetBuilder {
	return &OrdersGetBuilder{api.Params{}}
}

func (b *OrdersGetBuilder) Offset(v int64) *OrdersGetBuilder {
	b.Params["offset"] = v
	return b
}

// number of returned orders.
func (b *OrdersGetBuilder) Count(v int64) *OrdersGetBuilder {
	b.Params["count"] = v
	return b
}

// if this parameter is set to 1, this method returns a list of test mode orders. By default — 0.
func (b *OrdersGetBuilder) TestMode(v bool) *OrdersGetBuilder {
	b.Params["test_mode"] = v
	return b
}

// OrdersGetAmountBuilder builder.
//
// https://vk.com/dev/orders.getAmount
type OrdersGetAmountBuilder struct {
	api.Params
}

// OrdersGetAmountBuilder func.
func NewOrdersGetAmountBuilder() *OrdersGetAmountBuilder {
	return &OrdersGetAmountBuilder{api.Params{}}
}

func (b *OrdersGetAmountBuilder) UserID(v int64) *OrdersGetAmountBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *OrdersGetAmountBuilder) Votes(v []string) *OrdersGetAmountBuilder {
	b.Params["votes"] = v
	return b
}

// OrdersGetByIDBuilder builder.
//
// Returns information about orders by their IDs.
//
// https://vk.com/dev/orders.getById
type OrdersGetByIDBuilder struct {
	api.Params
}

// OrdersGetByIDBuilder func.
func NewOrdersGetByIDBuilder() *OrdersGetByIDBuilder {
	return &OrdersGetByIDBuilder{api.Params{}}
}

// order ID.
func (b *OrdersGetByIDBuilder) OrderID(v int64) *OrdersGetByIDBuilder {
	b.Params["order_id"] = v
	return b
}

// order IDs (when information about several orders is requested).
func (b *OrdersGetByIDBuilder) OrderIDs(v []int64) *OrdersGetByIDBuilder {
	b.Params["order_ids"] = v
	return b
}

// if this parameter is set to 1, this method returns a list of test mode orders. By default — 0.
func (b *OrdersGetByIDBuilder) TestMode(v bool) *OrdersGetByIDBuilder {
	b.Params["test_mode"] = v
	return b
}

// OrdersGetUserSubscriptionByIDBuilder builder.
//
// https://vk.com/dev/orders.getUserSubscriptionById
type OrdersGetUserSubscriptionByIDBuilder struct {
	api.Params
}

// OrdersGetUserSubscriptionByIDBuilder func.
func NewOrdersGetUserSubscriptionByIDBuilder() *OrdersGetUserSubscriptionByIDBuilder {
	return &OrdersGetUserSubscriptionByIDBuilder{api.Params{}}
}

func (b *OrdersGetUserSubscriptionByIDBuilder) UserID(v int64) *OrdersGetUserSubscriptionByIDBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *OrdersGetUserSubscriptionByIDBuilder) SubscriptionID(v int64) *OrdersGetUserSubscriptionByIDBuilder {
	b.Params["subscription_id"] = v
	return b
}

// OrdersGetUserSubscriptionsBuilder builder.
//
// https://vk.com/dev/orders.getUserSubscriptions
type OrdersGetUserSubscriptionsBuilder struct {
	api.Params
}

// OrdersGetUserSubscriptionsBuilder func.
func NewOrdersGetUserSubscriptionsBuilder() *OrdersGetUserSubscriptionsBuilder {
	return &OrdersGetUserSubscriptionsBuilder{api.Params{}}
}

func (b *OrdersGetUserSubscriptionsBuilder) UserID(v int64) *OrdersGetUserSubscriptionsBuilder {
	b.Params["user_id"] = v
	return b
}

// OrdersUpdateSubscriptionBuilder builder.
//
// https://vk.com/dev/orders.updateSubscription
type OrdersUpdateSubscriptionBuilder struct {
	api.Params
}

// OrdersUpdateSubscriptionBuilder func.
func NewOrdersUpdateSubscriptionBuilder() *OrdersUpdateSubscriptionBuilder {
	return &OrdersUpdateSubscriptionBuilder{api.Params{}}
}

func (b *OrdersUpdateSubscriptionBuilder) UserID(v int64) *OrdersUpdateSubscriptionBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *OrdersUpdateSubscriptionBuilder) SubscriptionID(v int64) *OrdersUpdateSubscriptionBuilder {
	b.Params["subscription_id"] = v
	return b
}

func (b *OrdersUpdateSubscriptionBuilder) Price(v int64) *OrdersUpdateSubscriptionBuilder {
	b.Params["price"] = v
	return b
}

// PagesClearCacheBuilder builder.
//
// Allows to clear the cache of particular 'external' pages which may be attached to VK posts.
//
// https://vk.com/dev/pages.clearCache
type PagesClearCacheBuilder struct {
	api.Params
}

// PagesClearCacheBuilder func.
func NewPagesClearCacheBuilder() *PagesClearCacheBuilder {
	return &PagesClearCacheBuilder{api.Params{}}
}

// Address of the page where you need to refesh the cached version
func (b *PagesClearCacheBuilder) URL(v string) *PagesClearCacheBuilder {
	b.Params["url"] = v
	return b
}

// PagesGetBuilder builder.
//
// Returns information about a wiki page.
//
// https://vk.com/dev/pages.get
type PagesGetBuilder struct {
	api.Params
}

// PagesGetBuilder func.
func NewPagesGetBuilder() *PagesGetBuilder {
	return &PagesGetBuilder{api.Params{}}
}

// Page owner ID.
func (b *PagesGetBuilder) OwnerID(v int64) *PagesGetBuilder {
	b.Params["owner_id"] = v
	return b
}

// Wiki page ID.
func (b *PagesGetBuilder) PageID(v int64) *PagesGetBuilder {
	b.Params["page_id"] = v
	return b
}

// '1' — to return information about a global wiki page
func (b *PagesGetBuilder) Global(v bool) *PagesGetBuilder {
	b.Params["global"] = v
	return b
}

// '1' — resulting wiki page is a preview for the attached link
func (b *PagesGetBuilder) SitePreview(v bool) *PagesGetBuilder {
	b.Params["site_preview"] = v
	return b
}

// Wiki page title.
func (b *PagesGetBuilder) Title(v string) *PagesGetBuilder {
	b.Params["title"] = v
	return b
}

func (b *PagesGetBuilder) NeedSource(v bool) *PagesGetBuilder {
	b.Params["need_source"] = v
	return b
}

// '1' — to return the page as HTML,
func (b *PagesGetBuilder) NeedHtml(v bool) *PagesGetBuilder {
	b.Params["need_html"] = v
	return b
}

// PagesGetHistoryBuilder builder.
//
// Returns a list of all previous versions of a wiki page.
//
// https://vk.com/dev/pages.getHistory
type PagesGetHistoryBuilder struct {
	api.Params
}

// PagesGetHistoryBuilder func.
func NewPagesGetHistoryBuilder() *PagesGetHistoryBuilder {
	return &PagesGetHistoryBuilder{api.Params{}}
}

// Wiki page ID.
func (b *PagesGetHistoryBuilder) PageID(v int64) *PagesGetHistoryBuilder {
	b.Params["page_id"] = v
	return b
}

// ID of the community that owns the wiki page.
func (b *PagesGetHistoryBuilder) GroupID(v int64) *PagesGetHistoryBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *PagesGetHistoryBuilder) UserID(v int64) *PagesGetHistoryBuilder {
	b.Params["user_id"] = v
	return b
}

// PagesGetTitlesBuilder builder.
//
// Returns a list of wiki pages in a group.
//
// https://vk.com/dev/pages.getTitles
type PagesGetTitlesBuilder struct {
	api.Params
}

// PagesGetTitlesBuilder func.
func NewPagesGetTitlesBuilder() *PagesGetTitlesBuilder {
	return &PagesGetTitlesBuilder{api.Params{}}
}

// ID of the community that owns the wiki page.
func (b *PagesGetTitlesBuilder) GroupID(v int64) *PagesGetTitlesBuilder {
	b.Params["group_id"] = v
	return b
}

// PagesGetVersionBuilder builder.
//
// Returns the text of one of the previous versions of a wiki page.
//
// https://vk.com/dev/pages.getVersion
type PagesGetVersionBuilder struct {
	api.Params
}

// PagesGetVersionBuilder func.
func NewPagesGetVersionBuilder() *PagesGetVersionBuilder {
	return &PagesGetVersionBuilder{api.Params{}}
}

func (b *PagesGetVersionBuilder) VersionID(v int64) *PagesGetVersionBuilder {
	b.Params["version_id"] = v
	return b
}

// ID of the community that owns the wiki page.
func (b *PagesGetVersionBuilder) GroupID(v int64) *PagesGetVersionBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *PagesGetVersionBuilder) UserID(v int64) *PagesGetVersionBuilder {
	b.Params["user_id"] = v
	return b
}

// '1' — to return the page as HTML
func (b *PagesGetVersionBuilder) NeedHtml(v bool) *PagesGetVersionBuilder {
	b.Params["need_html"] = v
	return b
}

// PagesParseWikiBuilder builder.
//
// Returns HTML representation of the wiki markup.
//
// https://vk.com/dev/pages.parseWiki
type PagesParseWikiBuilder struct {
	api.Params
}

// PagesParseWikiBuilder func.
func NewPagesParseWikiBuilder() *PagesParseWikiBuilder {
	return &PagesParseWikiBuilder{api.Params{}}
}

// Text of the wiki page.
func (b *PagesParseWikiBuilder) Text(v string) *PagesParseWikiBuilder {
	b.Params["text"] = v
	return b
}

// ID of the group in the context of which this markup is interpreted.
func (b *PagesParseWikiBuilder) GroupID(v int64) *PagesParseWikiBuilder {
	b.Params["group_id"] = v
	return b
}

// PagesSaveBuilder builder.
//
// Saves the text of a wiki page.
//
// https://vk.com/dev/pages.save
type PagesSaveBuilder struct {
	api.Params
}

// PagesSaveBuilder func.
func NewPagesSaveBuilder() *PagesSaveBuilder {
	return &PagesSaveBuilder{api.Params{}}
}

// Text of the wiki page in wiki-format.
func (b *PagesSaveBuilder) Text(v string) *PagesSaveBuilder {
	b.Params["text"] = v
	return b
}

// Wiki page ID. The 'title' parameter can be passed instead of 'pid'.
func (b *PagesSaveBuilder) PageID(v int64) *PagesSaveBuilder {
	b.Params["page_id"] = v
	return b
}

// ID of the community that owns the wiki page.
func (b *PagesSaveBuilder) GroupID(v int64) *PagesSaveBuilder {
	b.Params["group_id"] = v
	return b
}

// User ID
func (b *PagesSaveBuilder) UserID(v int64) *PagesSaveBuilder {
	b.Params["user_id"] = v
	return b
}

// Wiki page title.
func (b *PagesSaveBuilder) Title(v string) *PagesSaveBuilder {
	b.Params["title"] = v
	return b
}

// PagesSaveAccessBuilder builder.
//
// Saves modified read and edit access settings for a wiki page.
//
// https://vk.com/dev/pages.saveAccess
type PagesSaveAccessBuilder struct {
	api.Params
}

// PagesSaveAccessBuilder func.
func NewPagesSaveAccessBuilder() *PagesSaveAccessBuilder {
	return &PagesSaveAccessBuilder{api.Params{}}
}

// Wiki page ID.
func (b *PagesSaveAccessBuilder) PageID(v int64) *PagesSaveAccessBuilder {
	b.Params["page_id"] = v
	return b
}

// ID of the community that owns the wiki page.
func (b *PagesSaveAccessBuilder) GroupID(v int64) *PagesSaveAccessBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *PagesSaveAccessBuilder) UserID(v int64) *PagesSaveAccessBuilder {
	b.Params["user_id"] = v
	return b
}

// Who can view the wiki page: '1' — only community members, '2' — all users can view the page, '0' — only community managers
func (b *PagesSaveAccessBuilder) View(v int64) *PagesSaveAccessBuilder {
	b.Params["view"] = v
	return b
}

// Who can edit the wiki page: '1' — only community members, '2' — all users can edit the page, '0' — only community managers
func (b *PagesSaveAccessBuilder) Edit(v int64) *PagesSaveAccessBuilder {
	b.Params["edit"] = v
	return b
}

// PhotosConfirmTagBuilder builder.
//
// Confirms a tag on a photo.
//
// https://vk.com/dev/photos.confirmTag
type PhotosConfirmTagBuilder struct {
	api.Params
}

// PhotosConfirmTagBuilder func.
func NewPhotosConfirmTagBuilder() *PhotosConfirmTagBuilder {
	return &PhotosConfirmTagBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosConfirmTagBuilder) OwnerID(v int64) *PhotosConfirmTagBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosConfirmTagBuilder) PhotoID(v string) *PhotosConfirmTagBuilder {
	b.Params["photo_id"] = v
	return b
}

// Tag ID.
func (b *PhotosConfirmTagBuilder) TagID(v int64) *PhotosConfirmTagBuilder {
	b.Params["tag_id"] = v
	return b
}

// PhotosCopyBuilder builder.
//
// Allows to copy a photo to the "Saved photos" album
//
// https://vk.com/dev/photos.copy
type PhotosCopyBuilder struct {
	api.Params
}

// PhotosCopyBuilder func.
func NewPhotosCopyBuilder() *PhotosCopyBuilder {
	return &PhotosCopyBuilder{api.Params{}}
}

// photo's owner ID
func (b *PhotosCopyBuilder) OwnerID(v int64) *PhotosCopyBuilder {
	b.Params["owner_id"] = v
	return b
}

// photo ID
func (b *PhotosCopyBuilder) PhotoID(v int64) *PhotosCopyBuilder {
	b.Params["photo_id"] = v
	return b
}

// for private photos
func (b *PhotosCopyBuilder) AccessKey(v string) *PhotosCopyBuilder {
	b.Params["access_key"] = v
	return b
}

// PhotosCreateAlbumBuilder builder.
//
// Creates an empty photo album.
//
// https://vk.com/dev/photos.createAlbum
type PhotosCreateAlbumBuilder struct {
	api.Params
}

// PhotosCreateAlbumBuilder func.
func NewPhotosCreateAlbumBuilder() *PhotosCreateAlbumBuilder {
	return &PhotosCreateAlbumBuilder{api.Params{}}
}

// Album title.
func (b *PhotosCreateAlbumBuilder) Title(v string) *PhotosCreateAlbumBuilder {
	b.Params["title"] = v
	return b
}

// ID of the community in which the album will be created.
func (b *PhotosCreateAlbumBuilder) GroupID(v int64) *PhotosCreateAlbumBuilder {
	b.Params["group_id"] = v
	return b
}

// Album description.
func (b *PhotosCreateAlbumBuilder) Description(v string) *PhotosCreateAlbumBuilder {
	b.Params["description"] = v
	return b
}

func (b *PhotosCreateAlbumBuilder) PrivacyView(v []string) *PhotosCreateAlbumBuilder {
	b.Params["privacy_view"] = v
	return b
}

func (b *PhotosCreateAlbumBuilder) PrivacyComment(v []string) *PhotosCreateAlbumBuilder {
	b.Params["privacy_comment"] = v
	return b
}

func (b *PhotosCreateAlbumBuilder) UploadByAdminsOnly(v bool) *PhotosCreateAlbumBuilder {
	b.Params["upload_by_admins_only"] = v
	return b
}

func (b *PhotosCreateAlbumBuilder) CommentsDisabled(v bool) *PhotosCreateAlbumBuilder {
	b.Params["comments_disabled"] = v
	return b
}

// PhotosCreateCommentBuilder builder.
//
// Adds a new comment on the photo.
//
// https://vk.com/dev/photos.createComment
type PhotosCreateCommentBuilder struct {
	api.Params
}

// PhotosCreateCommentBuilder func.
func NewPhotosCreateCommentBuilder() *PhotosCreateCommentBuilder {
	return &PhotosCreateCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosCreateCommentBuilder) OwnerID(v int64) *PhotosCreateCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosCreateCommentBuilder) PhotoID(v int64) *PhotosCreateCommentBuilder {
	b.Params["photo_id"] = v
	return b
}

// Comment text.
func (b *PhotosCreateCommentBuilder) Message(v string) *PhotosCreateCommentBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the post, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — Media attachment owner ID. '<media_id>' — Media attachment ID. Example: "photo100172_166443618,photo66748_265827614"
func (b *PhotosCreateCommentBuilder) Attachments(v []string) *PhotosCreateCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// '1' — to post a comment from the community
func (b *PhotosCreateCommentBuilder) FromGroup(v bool) *PhotosCreateCommentBuilder {
	b.Params["from_group"] = v
	return b
}

func (b *PhotosCreateCommentBuilder) ReplyToComment(v int64) *PhotosCreateCommentBuilder {
	b.Params["reply_to_comment"] = v
	return b
}

func (b *PhotosCreateCommentBuilder) StickerID(v int64) *PhotosCreateCommentBuilder {
	b.Params["sticker_id"] = v
	return b
}

func (b *PhotosCreateCommentBuilder) AccessKey(v string) *PhotosCreateCommentBuilder {
	b.Params["access_key"] = v
	return b
}

func (b *PhotosCreateCommentBuilder) Guid(v string) *PhotosCreateCommentBuilder {
	b.Params["guid"] = v
	return b
}

// PhotosDeleteBuilder builder.
//
// Deletes a photo.
//
// https://vk.com/dev/photos.delete
type PhotosDeleteBuilder struct {
	api.Params
}

// PhotosDeleteBuilder func.
func NewPhotosDeleteBuilder() *PhotosDeleteBuilder {
	return &PhotosDeleteBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosDeleteBuilder) OwnerID(v int64) *PhotosDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosDeleteBuilder) PhotoID(v int64) *PhotosDeleteBuilder {
	b.Params["photo_id"] = v
	return b
}

// PhotosDeleteAlbumBuilder builder.
//
// Deletes a photo album belonging to the current user.
//
// https://vk.com/dev/photos.deleteAlbum
type PhotosDeleteAlbumBuilder struct {
	api.Params
}

// PhotosDeleteAlbumBuilder func.
func NewPhotosDeleteAlbumBuilder() *PhotosDeleteAlbumBuilder {
	return &PhotosDeleteAlbumBuilder{api.Params{}}
}

// Album ID.
func (b *PhotosDeleteAlbumBuilder) AlbumID(v int64) *PhotosDeleteAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

// ID of the community that owns the album.
func (b *PhotosDeleteAlbumBuilder) GroupID(v int64) *PhotosDeleteAlbumBuilder {
	b.Params["group_id"] = v
	return b
}

// PhotosDeleteCommentBuilder builder.
//
// Deletes a comment on the photo.
//
// https://vk.com/dev/photos.deleteComment
type PhotosDeleteCommentBuilder struct {
	api.Params
}

// PhotosDeleteCommentBuilder func.
func NewPhotosDeleteCommentBuilder() *PhotosDeleteCommentBuilder {
	return &PhotosDeleteCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosDeleteCommentBuilder) OwnerID(v int64) *PhotosDeleteCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *PhotosDeleteCommentBuilder) CommentID(v int64) *PhotosDeleteCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// PhotosEditBuilder builder.
//
// Edits the caption of a photo.
//
// https://vk.com/dev/photos.edit
type PhotosEditBuilder struct {
	api.Params
}

// PhotosEditBuilder func.
func NewPhotosEditBuilder() *PhotosEditBuilder {
	return &PhotosEditBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosEditBuilder) OwnerID(v int64) *PhotosEditBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosEditBuilder) PhotoID(v int64) *PhotosEditBuilder {
	b.Params["photo_id"] = v
	return b
}

// New caption for the photo. If this parameter is not set, it is considered to be equal to an empty string.
func (b *PhotosEditBuilder) Caption(v string) *PhotosEditBuilder {
	b.Params["caption"] = v
	return b
}

func (b *PhotosEditBuilder) Latitude(v float64) *PhotosEditBuilder {
	b.Params["latitude"] = v
	return b
}

func (b *PhotosEditBuilder) Longitude(v float64) *PhotosEditBuilder {
	b.Params["longitude"] = v
	return b
}

func (b *PhotosEditBuilder) PlaceStr(v string) *PhotosEditBuilder {
	b.Params["place_str"] = v
	return b
}

func (b *PhotosEditBuilder) FoursquareID(v string) *PhotosEditBuilder {
	b.Params["foursquare_id"] = v
	return b
}

func (b *PhotosEditBuilder) DeletePlace(v bool) *PhotosEditBuilder {
	b.Params["delete_place"] = v
	return b
}

// PhotosEditAlbumBuilder builder.
//
// Edits information about a photo album.
//
// https://vk.com/dev/photos.editAlbum
type PhotosEditAlbumBuilder struct {
	api.Params
}

// PhotosEditAlbumBuilder func.
func NewPhotosEditAlbumBuilder() *PhotosEditAlbumBuilder {
	return &PhotosEditAlbumBuilder{api.Params{}}
}

// ID of the photo album to be edited.
func (b *PhotosEditAlbumBuilder) AlbumID(v int64) *PhotosEditAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

// New album title.
func (b *PhotosEditAlbumBuilder) Title(v string) *PhotosEditAlbumBuilder {
	b.Params["title"] = v
	return b
}

// New album description.
func (b *PhotosEditAlbumBuilder) Description(v string) *PhotosEditAlbumBuilder {
	b.Params["description"] = v
	return b
}

// ID of the user or community that owns the album.
func (b *PhotosEditAlbumBuilder) OwnerID(v int64) *PhotosEditAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *PhotosEditAlbumBuilder) PrivacyView(v []string) *PhotosEditAlbumBuilder {
	b.Params["privacy_view"] = v
	return b
}

func (b *PhotosEditAlbumBuilder) PrivacyComment(v []string) *PhotosEditAlbumBuilder {
	b.Params["privacy_comment"] = v
	return b
}

func (b *PhotosEditAlbumBuilder) UploadByAdminsOnly(v bool) *PhotosEditAlbumBuilder {
	b.Params["upload_by_admins_only"] = v
	return b
}

func (b *PhotosEditAlbumBuilder) CommentsDisabled(v bool) *PhotosEditAlbumBuilder {
	b.Params["comments_disabled"] = v
	return b
}

// PhotosEditCommentBuilder builder.
//
// Edits a comment on a photo.
//
// https://vk.com/dev/photos.editComment
type PhotosEditCommentBuilder struct {
	api.Params
}

// PhotosEditCommentBuilder func.
func NewPhotosEditCommentBuilder() *PhotosEditCommentBuilder {
	return &PhotosEditCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosEditCommentBuilder) OwnerID(v int64) *PhotosEditCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *PhotosEditCommentBuilder) CommentID(v int64) *PhotosEditCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// New text of the comment.
func (b *PhotosEditCommentBuilder) Message(v string) *PhotosEditCommentBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the post, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — Media attachment owner ID. '<media_id>' — Media attachment ID. Example: "photo100172_166443618,photo66748_265827614"
func (b *PhotosEditCommentBuilder) Attachments(v []string) *PhotosEditCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// PhotosGetBuilder builder.
//
// Returns a list of a user's or community's photos.
//
// https://vk.com/dev/photos.get
type PhotosGetBuilder struct {
	api.Params
}

// PhotosGetBuilder func.
func NewPhotosGetBuilder() *PhotosGetBuilder {
	return &PhotosGetBuilder{api.Params{}}
}

// ID of the user or community that owns the photos. Use a negative value to designate a community ID.
func (b *PhotosGetBuilder) OwnerID(v int64) *PhotosGetBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo album ID. To return information about photos from service albums, use the following string values: 'profile, wall, saved'.
func (b *PhotosGetBuilder) AlbumID(v string) *PhotosGetBuilder {
	b.Params["album_id"] = v
	return b
}

// Photo IDs.
func (b *PhotosGetBuilder) PhotoIDs(v []string) *PhotosGetBuilder {
	b.Params["photo_ids"] = v
	return b
}

// Sort order: '1' — reverse chronological, '0' — chronological
func (b *PhotosGetBuilder) Rev(v bool) *PhotosGetBuilder {
	b.Params["rev"] = v
	return b
}

// '1' — to return additional 'likes', 'comments', and 'tags' fields, '0' — (default)
func (b *PhotosGetBuilder) Extended(v bool) *PhotosGetBuilder {
	b.Params["extended"] = v
	return b
}

// Type of feed obtained in 'feed' field of the method.
func (b *PhotosGetBuilder) FeedType(v string) *PhotosGetBuilder {
	b.Params["feed_type"] = v
	return b
}

// unixtime, that can be obtained with [vk.com/dev/newsfeed.get|newsfeed.get] method in date field to get all photos uploaded by the user on a specific day, or photos the user has been tagged on. Also, 'uid' parameter of the user the event happened with shall be specified.
func (b *PhotosGetBuilder) Feed(v int64) *PhotosGetBuilder {
	b.Params["feed"] = v
	return b
}

// '1' — to return photo sizes in a [vk.com/dev/photo_sizes|special format]
func (b *PhotosGetBuilder) PhotoSizes(v bool) *PhotosGetBuilder {
	b.Params["photo_sizes"] = v
	return b
}

func (b *PhotosGetBuilder) Offset(v int64) *PhotosGetBuilder {
	b.Params["offset"] = v
	return b
}

func (b *PhotosGetBuilder) Count(v int64) *PhotosGetBuilder {
	b.Params["count"] = v
	return b
}

// PhotosGetAlbumsBuilder builder.
//
// Returns a list of a user's or community's photo albums.
//
// https://vk.com/dev/photos.getAlbums
type PhotosGetAlbumsBuilder struct {
	api.Params
}

// PhotosGetAlbumsBuilder func.
func NewPhotosGetAlbumsBuilder() *PhotosGetAlbumsBuilder {
	return &PhotosGetAlbumsBuilder{api.Params{}}
}

// ID of the user or community that owns the albums.
func (b *PhotosGetAlbumsBuilder) OwnerID(v int64) *PhotosGetAlbumsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Album IDs.
func (b *PhotosGetAlbumsBuilder) AlbumIDs(v []int64) *PhotosGetAlbumsBuilder {
	b.Params["album_ids"] = v
	return b
}

// Offset needed to return a specific subset of albums.
func (b *PhotosGetAlbumsBuilder) Offset(v int64) *PhotosGetAlbumsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of albums to return.
func (b *PhotosGetAlbumsBuilder) Count(v int64) *PhotosGetAlbumsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return system albums with negative IDs
func (b *PhotosGetAlbumsBuilder) NeedSystem(v bool) *PhotosGetAlbumsBuilder {
	b.Params["need_system"] = v
	return b
}

// '1' — to return an additional 'thumb_src' field, '0' — (default)
func (b *PhotosGetAlbumsBuilder) NeedCovers(v bool) *PhotosGetAlbumsBuilder {
	b.Params["need_covers"] = v
	return b
}

// '1' — to return photo sizes in a
func (b *PhotosGetAlbumsBuilder) PhotoSizes(v bool) *PhotosGetAlbumsBuilder {
	b.Params["photo_sizes"] = v
	return b
}

// PhotosGetAlbumsCountBuilder builder.
//
// Returns the number of photo albums belonging to a user or community.
//
// https://vk.com/dev/photos.getAlbumsCount
type PhotosGetAlbumsCountBuilder struct {
	api.Params
}

// PhotosGetAlbumsCountBuilder func.
func NewPhotosGetAlbumsCountBuilder() *PhotosGetAlbumsCountBuilder {
	return &PhotosGetAlbumsCountBuilder{api.Params{}}
}

// User ID.
func (b *PhotosGetAlbumsCountBuilder) UserID(v int64) *PhotosGetAlbumsCountBuilder {
	b.Params["user_id"] = v
	return b
}

// Community ID.
func (b *PhotosGetAlbumsCountBuilder) GroupID(v int64) *PhotosGetAlbumsCountBuilder {
	b.Params["group_id"] = v
	return b
}

// PhotosGetAllBuilder builder.
//
// Returns a list of photos belonging to a user or community, in reverse chronological order.
//
// https://vk.com/dev/photos.getAll
type PhotosGetAllBuilder struct {
	api.Params
}

// PhotosGetAllBuilder func.
func NewPhotosGetAllBuilder() *PhotosGetAllBuilder {
	return &PhotosGetAllBuilder{api.Params{}}
}

// ID of a user or community that owns the photos. Use a negative value to designate a community ID.
func (b *PhotosGetAllBuilder) OwnerID(v int64) *PhotosGetAllBuilder {
	b.Params["owner_id"] = v
	return b
}

// '1' — to return detailed information about photos
func (b *PhotosGetAllBuilder) Extended(v bool) *PhotosGetAllBuilder {
	b.Params["extended"] = v
	return b
}

// Offset needed to return a specific subset of photos. By default, '0'.
func (b *PhotosGetAllBuilder) Offset(v int64) *PhotosGetAllBuilder {
	b.Params["offset"] = v
	return b
}

// Number of photos to return.
func (b *PhotosGetAllBuilder) Count(v int64) *PhotosGetAllBuilder {
	b.Params["count"] = v
	return b
}

// '1' – to return image sizes in [vk.com/dev/photo_sizes|special format].
func (b *PhotosGetAllBuilder) PhotoSizes(v bool) *PhotosGetAllBuilder {
	b.Params["photo_sizes"] = v
	return b
}

// '1' – to return photos only from standard albums, '0' – to return all photos including those in service albums, e.g., 'My wall photos' (default)
func (b *PhotosGetAllBuilder) NoServiceAlbums(v bool) *PhotosGetAllBuilder {
	b.Params["no_service_albums"] = v
	return b
}

// '1' – to show information about photos being hidden from the block above the wall.
func (b *PhotosGetAllBuilder) NeedHidden(v bool) *PhotosGetAllBuilder {
	b.Params["need_hidden"] = v
	return b
}

// '1' – not to return photos being hidden from the block above the wall. Works only with owner_id>0, no_service_albums is ignored.
func (b *PhotosGetAllBuilder) SkipHidden(v bool) *PhotosGetAllBuilder {
	b.Params["skip_hidden"] = v
	return b
}

// PhotosGetAllCommentsBuilder builder.
//
// Returns a list of comments on a specific photo album or all albums of the user sorted in reverse chronological order.
//
// https://vk.com/dev/photos.getAllComments
type PhotosGetAllCommentsBuilder struct {
	api.Params
}

// PhotosGetAllCommentsBuilder func.
func NewPhotosGetAllCommentsBuilder() *PhotosGetAllCommentsBuilder {
	return &PhotosGetAllCommentsBuilder{api.Params{}}
}

// ID of the user or community that owns the album(s).
func (b *PhotosGetAllCommentsBuilder) OwnerID(v int64) *PhotosGetAllCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Album ID. If the parameter is not set, comments on all of the user's albums will be returned.
func (b *PhotosGetAllCommentsBuilder) AlbumID(v int64) *PhotosGetAllCommentsBuilder {
	b.Params["album_id"] = v
	return b
}

// '1' — to return an additional 'likes' field, '0' — (default)
func (b *PhotosGetAllCommentsBuilder) NeedLikes(v bool) *PhotosGetAllCommentsBuilder {
	b.Params["need_likes"] = v
	return b
}

// Offset needed to return a specific subset of comments. By default, '0'.
func (b *PhotosGetAllCommentsBuilder) Offset(v int64) *PhotosGetAllCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of comments to return. By default, '20'. Maximum value, '100'.
func (b *PhotosGetAllCommentsBuilder) Count(v int64) *PhotosGetAllCommentsBuilder {
	b.Params["count"] = v
	return b
}

// PhotosGetByIDBuilder builder.
//
// Returns information about photos by their IDs.
//
// https://vk.com/dev/photos.getById
type PhotosGetByIDBuilder struct {
	api.Params
}

// PhotosGetByIDBuilder func.
func NewPhotosGetByIDBuilder() *PhotosGetByIDBuilder {
	return &PhotosGetByIDBuilder{api.Params{}}
}

// IDs separated with a comma, that are IDs of users who posted photos and IDs of photos themselves with an underscore character between such IDs. To get information about a photo in the group album, you shall specify group ID instead of user ID. Example: "1_129207899,6492_135055734, , -20629724_271945303"
func (b *PhotosGetByIDBuilder) Photos(v []string) *PhotosGetByIDBuilder {
	b.Params["photos"] = v
	return b
}

// '1' — to return additional fields, '0' — (default)
func (b *PhotosGetByIDBuilder) Extended(v bool) *PhotosGetByIDBuilder {
	b.Params["extended"] = v
	return b
}

// '1' — to return photo sizes in a
func (b *PhotosGetByIDBuilder) PhotoSizes(v bool) *PhotosGetByIDBuilder {
	b.Params["photo_sizes"] = v
	return b
}

// PhotosGetChatUploadServerBuilder builder.
//
// Returns an upload link for chat cover pictures.
//
// https://vk.com/dev/photos.getChatUploadServer
type PhotosGetChatUploadServerBuilder struct {
	api.Params
}

// PhotosGetChatUploadServerBuilder func.
func NewPhotosGetChatUploadServerBuilder() *PhotosGetChatUploadServerBuilder {
	return &PhotosGetChatUploadServerBuilder{api.Params{}}
}

// ID of the chat for which you want to upload a cover photo.
func (b *PhotosGetChatUploadServerBuilder) ChatID(v int64) *PhotosGetChatUploadServerBuilder {
	b.Params["chat_id"] = v
	return b
}

func (b *PhotosGetChatUploadServerBuilder) CropX(v int64) *PhotosGetChatUploadServerBuilder {
	b.Params["crop_x"] = v
	return b
}

func (b *PhotosGetChatUploadServerBuilder) CropY(v int64) *PhotosGetChatUploadServerBuilder {
	b.Params["crop_y"] = v
	return b
}

// Width (in pixels) of the photo after cropping.
func (b *PhotosGetChatUploadServerBuilder) CropWidth(v int64) *PhotosGetChatUploadServerBuilder {
	b.Params["crop_width"] = v
	return b
}

// PhotosGetCommentsBuilder builder.
//
// Returns a list of comments on a photo.
//
// https://vk.com/dev/photos.getComments
type PhotosGetCommentsBuilder struct {
	api.Params
}

// PhotosGetCommentsBuilder func.
func NewPhotosGetCommentsBuilder() *PhotosGetCommentsBuilder {
	return &PhotosGetCommentsBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosGetCommentsBuilder) OwnerID(v int64) *PhotosGetCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosGetCommentsBuilder) PhotoID(v int64) *PhotosGetCommentsBuilder {
	b.Params["photo_id"] = v
	return b
}

// '1' — to return an additional 'likes' field, '0' — (default)
func (b *PhotosGetCommentsBuilder) NeedLikes(v bool) *PhotosGetCommentsBuilder {
	b.Params["need_likes"] = v
	return b
}

func (b *PhotosGetCommentsBuilder) StartCommentID(v int64) *PhotosGetCommentsBuilder {
	b.Params["start_comment_id"] = v
	return b
}

// Offset needed to return a specific subset of comments. By default, '0'.
func (b *PhotosGetCommentsBuilder) Offset(v int64) *PhotosGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of comments to return.
func (b *PhotosGetCommentsBuilder) Count(v int64) *PhotosGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// Sort order: 'asc' — old first, 'desc' — new first
func (b *PhotosGetCommentsBuilder) Sort(v string) *PhotosGetCommentsBuilder {
	b.Params["sort"] = v
	return b
}

func (b *PhotosGetCommentsBuilder) AccessKey(v string) *PhotosGetCommentsBuilder {
	b.Params["access_key"] = v
	return b
}

func (b *PhotosGetCommentsBuilder) Extended(v bool) *PhotosGetCommentsBuilder {
	b.Params["extended"] = v
	return b
}

func (b *PhotosGetCommentsBuilder) Fields(v []UsersFields) *PhotosGetCommentsBuilder {
	b.Params["fields"] = v
	return b
}

// PhotosGetMarketAlbumUploadServerBuilder builder.
//
// Returns the server address for market album photo upload.
//
// https://vk.com/dev/photos.getMarketAlbumUploadServer
type PhotosGetMarketAlbumUploadServerBuilder struct {
	api.Params
}

// PhotosGetMarketAlbumUploadServerBuilder func.
func NewPhotosGetMarketAlbumUploadServerBuilder() *PhotosGetMarketAlbumUploadServerBuilder {
	return &PhotosGetMarketAlbumUploadServerBuilder{api.Params{}}
}

// Community ID.
func (b *PhotosGetMarketAlbumUploadServerBuilder) GroupID(v int64) *PhotosGetMarketAlbumUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

// PhotosGetMarketUploadServerBuilder builder.
//
// Returns the server address for market photo upload.
//
// https://vk.com/dev/photos.getMarketUploadServer
type PhotosGetMarketUploadServerBuilder struct {
	api.Params
}

// PhotosGetMarketUploadServerBuilder func.
func NewPhotosGetMarketUploadServerBuilder() *PhotosGetMarketUploadServerBuilder {
	return &PhotosGetMarketUploadServerBuilder{api.Params{}}
}

// Community ID.
func (b *PhotosGetMarketUploadServerBuilder) GroupID(v int64) *PhotosGetMarketUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

// '1' if you want to upload the main item photo.
func (b *PhotosGetMarketUploadServerBuilder) MainPhoto(v bool) *PhotosGetMarketUploadServerBuilder {
	b.Params["main_photo"] = v
	return b
}

// X coordinate of the crop left upper corner.
func (b *PhotosGetMarketUploadServerBuilder) CropX(v int64) *PhotosGetMarketUploadServerBuilder {
	b.Params["crop_x"] = v
	return b
}

// Y coordinate of the crop left upper corner.
func (b *PhotosGetMarketUploadServerBuilder) CropY(v int64) *PhotosGetMarketUploadServerBuilder {
	b.Params["crop_y"] = v
	return b
}

// Width of the cropped photo in px.
func (b *PhotosGetMarketUploadServerBuilder) CropWidth(v int64) *PhotosGetMarketUploadServerBuilder {
	b.Params["crop_width"] = v
	return b
}

// PhotosGetMessagesUploadServerBuilder builder.
//
// Returns the server address for photo upload in a private message for a user.
//
// https://vk.com/dev/photos.getMessagesUploadServer
type PhotosGetMessagesUploadServerBuilder struct {
	api.Params
}

// PhotosGetMessagesUploadServerBuilder func.
func NewPhotosGetMessagesUploadServerBuilder() *PhotosGetMessagesUploadServerBuilder {
	return &PhotosGetMessagesUploadServerBuilder{api.Params{}}
}

// Destination ID. "For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. "
func (b *PhotosGetMessagesUploadServerBuilder) PeerID(v int64) *PhotosGetMessagesUploadServerBuilder {
	b.Params["peer_id"] = v
	return b
}

// PhotosGetNewTagsBuilder builder.
//
// Returns a list of photos with tags that have not been viewed.
//
// https://vk.com/dev/photos.getNewTags
type PhotosGetNewTagsBuilder struct {
	api.Params
}

// PhotosGetNewTagsBuilder func.
func NewPhotosGetNewTagsBuilder() *PhotosGetNewTagsBuilder {
	return &PhotosGetNewTagsBuilder{api.Params{}}
}

// Offset needed to return a specific subset of photos.
func (b *PhotosGetNewTagsBuilder) Offset(v int64) *PhotosGetNewTagsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of photos to return.
func (b *PhotosGetNewTagsBuilder) Count(v int64) *PhotosGetNewTagsBuilder {
	b.Params["count"] = v
	return b
}

// PhotosGetOwnerCoverPhotoUploadServerBuilder builder.
//
// Returns the server address for owner cover upload.
//
// https://vk.com/dev/photos.getOwnerCoverPhotoUploadServer
type PhotosGetOwnerCoverPhotoUploadServerBuilder struct {
	api.Params
}

// PhotosGetOwnerCoverPhotoUploadServerBuilder func.
func NewPhotosGetOwnerCoverPhotoUploadServerBuilder() *PhotosGetOwnerCoverPhotoUploadServerBuilder {
	return &PhotosGetOwnerCoverPhotoUploadServerBuilder{api.Params{}}
}

// ID of community that owns the album (if the photo will be uploaded to a community album).
func (b *PhotosGetOwnerCoverPhotoUploadServerBuilder) GroupID(v int64) *PhotosGetOwnerCoverPhotoUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

// X coordinate of the left-upper corner
func (b *PhotosGetOwnerCoverPhotoUploadServerBuilder) CropX(v int64) *PhotosGetOwnerCoverPhotoUploadServerBuilder {
	b.Params["crop_x"] = v
	return b
}

// Y coordinate of the left-upper corner
func (b *PhotosGetOwnerCoverPhotoUploadServerBuilder) CropY(v int64) *PhotosGetOwnerCoverPhotoUploadServerBuilder {
	b.Params["crop_y"] = v
	return b
}

// X coordinate of the right-bottom corner
func (b *PhotosGetOwnerCoverPhotoUploadServerBuilder) CropX2(v int64) *PhotosGetOwnerCoverPhotoUploadServerBuilder {
	b.Params["crop_x2"] = v
	return b
}

// Y coordinate of the right-bottom corner
func (b *PhotosGetOwnerCoverPhotoUploadServerBuilder) CropY2(v int64) *PhotosGetOwnerCoverPhotoUploadServerBuilder {
	b.Params["crop_y2"] = v
	return b
}

// PhotosGetOwnerPhotoUploadServerBuilder builder.
//
// Returns an upload server address for a profile or community photo.
//
// https://vk.com/dev/photos.getOwnerPhotoUploadServer
type PhotosGetOwnerPhotoUploadServerBuilder struct {
	api.Params
}

// PhotosGetOwnerPhotoUploadServerBuilder func.
func NewPhotosGetOwnerPhotoUploadServerBuilder() *PhotosGetOwnerPhotoUploadServerBuilder {
	return &PhotosGetOwnerPhotoUploadServerBuilder{api.Params{}}
}

// identifier of a community or current user. "Note that community id must be negative. 'owner_id=1' – user, 'owner_id=-1' – community, "
func (b *PhotosGetOwnerPhotoUploadServerBuilder) OwnerID(v int64) *PhotosGetOwnerPhotoUploadServerBuilder {
	b.Params["owner_id"] = v
	return b
}

// PhotosGetTagsBuilder builder.
//
// Returns a list of tags on a photo.
//
// https://vk.com/dev/photos.getTags
type PhotosGetTagsBuilder struct {
	api.Params
}

// PhotosGetTagsBuilder func.
func NewPhotosGetTagsBuilder() *PhotosGetTagsBuilder {
	return &PhotosGetTagsBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosGetTagsBuilder) OwnerID(v int64) *PhotosGetTagsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosGetTagsBuilder) PhotoID(v int64) *PhotosGetTagsBuilder {
	b.Params["photo_id"] = v
	return b
}

func (b *PhotosGetTagsBuilder) AccessKey(v string) *PhotosGetTagsBuilder {
	b.Params["access_key"] = v
	return b
}

// PhotosGetUploadServerBuilder builder.
//
// Returns the server address for photo upload.
//
// https://vk.com/dev/photos.getUploadServer
type PhotosGetUploadServerBuilder struct {
	api.Params
}

// PhotosGetUploadServerBuilder func.
func NewPhotosGetUploadServerBuilder() *PhotosGetUploadServerBuilder {
	return &PhotosGetUploadServerBuilder{api.Params{}}
}

// ID of community that owns the album (if the photo will be uploaded to a community album).
func (b *PhotosGetUploadServerBuilder) GroupID(v int64) *PhotosGetUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *PhotosGetUploadServerBuilder) AlbumID(v int64) *PhotosGetUploadServerBuilder {
	b.Params["album_id"] = v
	return b
}

// PhotosGetUserPhotosBuilder builder.
//
// Returns a list of photos in which a user is tagged.
//
// https://vk.com/dev/photos.getUserPhotos
type PhotosGetUserPhotosBuilder struct {
	api.Params
}

// PhotosGetUserPhotosBuilder func.
func NewPhotosGetUserPhotosBuilder() *PhotosGetUserPhotosBuilder {
	return &PhotosGetUserPhotosBuilder{api.Params{}}
}

// User ID.
func (b *PhotosGetUserPhotosBuilder) UserID(v int64) *PhotosGetUserPhotosBuilder {
	b.Params["user_id"] = v
	return b
}

// Offset needed to return a specific subset of photos. By default, '0'.
func (b *PhotosGetUserPhotosBuilder) Offset(v int64) *PhotosGetUserPhotosBuilder {
	b.Params["offset"] = v
	return b
}

// Number of photos to return. Maximum value is 1000.
func (b *PhotosGetUserPhotosBuilder) Count(v int64) *PhotosGetUserPhotosBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return an additional 'likes' field, '0' — (default)
func (b *PhotosGetUserPhotosBuilder) Extended(v bool) *PhotosGetUserPhotosBuilder {
	b.Params["extended"] = v
	return b
}

// Sort order: '1' — by date the tag was added in ascending order, '0' — by date the tag was added in descending order
func (b *PhotosGetUserPhotosBuilder) Sort(v string) *PhotosGetUserPhotosBuilder {
	b.Params["sort"] = v
	return b
}

// PhotosGetWallUploadServerBuilder builder.
//
// Returns the server address for photo upload onto a user's wall.
//
// https://vk.com/dev/photos.getWallUploadServer
type PhotosGetWallUploadServerBuilder struct {
	api.Params
}

// PhotosGetWallUploadServerBuilder func.
func NewPhotosGetWallUploadServerBuilder() *PhotosGetWallUploadServerBuilder {
	return &PhotosGetWallUploadServerBuilder{api.Params{}}
}

// ID of community to whose wall the photo will be uploaded.
func (b *PhotosGetWallUploadServerBuilder) GroupID(v int64) *PhotosGetWallUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

// PhotosMakeCoverBuilder builder.
//
// Makes a photo into an album cover.
//
// https://vk.com/dev/photos.makeCover
type PhotosMakeCoverBuilder struct {
	api.Params
}

// PhotosMakeCoverBuilder func.
func NewPhotosMakeCoverBuilder() *PhotosMakeCoverBuilder {
	return &PhotosMakeCoverBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosMakeCoverBuilder) OwnerID(v int64) *PhotosMakeCoverBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosMakeCoverBuilder) PhotoID(v int64) *PhotosMakeCoverBuilder {
	b.Params["photo_id"] = v
	return b
}

// Album ID.
func (b *PhotosMakeCoverBuilder) AlbumID(v int64) *PhotosMakeCoverBuilder {
	b.Params["album_id"] = v
	return b
}

// PhotosMoveBuilder builder.
//
// Moves a photo from one album to another.
//
// https://vk.com/dev/photos.move
type PhotosMoveBuilder struct {
	api.Params
}

// PhotosMoveBuilder func.
func NewPhotosMoveBuilder() *PhotosMoveBuilder {
	return &PhotosMoveBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosMoveBuilder) OwnerID(v int64) *PhotosMoveBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the album to which the photo will be moved.
func (b *PhotosMoveBuilder) TargetAlbumID(v int64) *PhotosMoveBuilder {
	b.Params["target_album_id"] = v
	return b
}

// Photo ID.
func (b *PhotosMoveBuilder) PhotoID(v int64) *PhotosMoveBuilder {
	b.Params["photo_id"] = v
	return b
}

// PhotosPutTagBuilder builder.
//
// Adds a tag on the photo.
//
// https://vk.com/dev/photos.putTag
type PhotosPutTagBuilder struct {
	api.Params
}

// PhotosPutTagBuilder func.
func NewPhotosPutTagBuilder() *PhotosPutTagBuilder {
	return &PhotosPutTagBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosPutTagBuilder) OwnerID(v int64) *PhotosPutTagBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosPutTagBuilder) PhotoID(v int64) *PhotosPutTagBuilder {
	b.Params["photo_id"] = v
	return b
}

// ID of the user to be tagged.
func (b *PhotosPutTagBuilder) UserID(v int64) *PhotosPutTagBuilder {
	b.Params["user_id"] = v
	return b
}

// Upper left-corner coordinate of the tagged area (as a percentage of the photo's width).
func (b *PhotosPutTagBuilder) X(v float64) *PhotosPutTagBuilder {
	b.Params["x"] = v
	return b
}

// Upper left-corner coordinate of the tagged area (as a percentage of the photo's height).
func (b *PhotosPutTagBuilder) Y(v float64) *PhotosPutTagBuilder {
	b.Params["y"] = v
	return b
}

// Lower right-corner coordinate of the tagged area (as a percentage of the photo's width).
func (b *PhotosPutTagBuilder) X2(v float64) *PhotosPutTagBuilder {
	b.Params["x2"] = v
	return b
}

// Lower right-corner coordinate of the tagged area (as a percentage of the photo's height).
func (b *PhotosPutTagBuilder) Y2(v float64) *PhotosPutTagBuilder {
	b.Params["y2"] = v
	return b
}

// PhotosRemoveTagBuilder builder.
//
// Removes a tag from a photo.
//
// https://vk.com/dev/photos.removeTag
type PhotosRemoveTagBuilder struct {
	api.Params
}

// PhotosRemoveTagBuilder func.
func NewPhotosRemoveTagBuilder() *PhotosRemoveTagBuilder {
	return &PhotosRemoveTagBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosRemoveTagBuilder) OwnerID(v int64) *PhotosRemoveTagBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosRemoveTagBuilder) PhotoID(v int64) *PhotosRemoveTagBuilder {
	b.Params["photo_id"] = v
	return b
}

// Tag ID.
func (b *PhotosRemoveTagBuilder) TagID(v int64) *PhotosRemoveTagBuilder {
	b.Params["tag_id"] = v
	return b
}

// PhotosReorderAlbumsBuilder builder.
//
// Reorders the album in the list of user albums.
//
// https://vk.com/dev/photos.reorderAlbums
type PhotosReorderAlbumsBuilder struct {
	api.Params
}

// PhotosReorderAlbumsBuilder func.
func NewPhotosReorderAlbumsBuilder() *PhotosReorderAlbumsBuilder {
	return &PhotosReorderAlbumsBuilder{api.Params{}}
}

// ID of the user or community that owns the album.
func (b *PhotosReorderAlbumsBuilder) OwnerID(v int64) *PhotosReorderAlbumsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Album ID.
func (b *PhotosReorderAlbumsBuilder) AlbumID(v int64) *PhotosReorderAlbumsBuilder {
	b.Params["album_id"] = v
	return b
}

// ID of the album before which the album in question shall be placed.
func (b *PhotosReorderAlbumsBuilder) Before(v int64) *PhotosReorderAlbumsBuilder {
	b.Params["before"] = v
	return b
}

// ID of the album after which the album in question shall be placed.
func (b *PhotosReorderAlbumsBuilder) After(v int64) *PhotosReorderAlbumsBuilder {
	b.Params["after"] = v
	return b
}

// PhotosReorderPhotosBuilder builder.
//
// Reorders the photo in the list of photos of the user album.
//
// https://vk.com/dev/photos.reorderPhotos
type PhotosReorderPhotosBuilder struct {
	api.Params
}

// PhotosReorderPhotosBuilder func.
func NewPhotosReorderPhotosBuilder() *PhotosReorderPhotosBuilder {
	return &PhotosReorderPhotosBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosReorderPhotosBuilder) OwnerID(v int64) *PhotosReorderPhotosBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosReorderPhotosBuilder) PhotoID(v int64) *PhotosReorderPhotosBuilder {
	b.Params["photo_id"] = v
	return b
}

// ID of the photo before which the photo in question shall be placed.
func (b *PhotosReorderPhotosBuilder) Before(v int64) *PhotosReorderPhotosBuilder {
	b.Params["before"] = v
	return b
}

// ID of the photo after which the photo in question shall be placed.
func (b *PhotosReorderPhotosBuilder) After(v int64) *PhotosReorderPhotosBuilder {
	b.Params["after"] = v
	return b
}

// PhotosReportBuilder builder.
//
// Reports (submits a complaint about) a photo.
//
// https://vk.com/dev/photos.report
type PhotosReportBuilder struct {
	api.Params
}

// PhotosReportBuilder func.
func NewPhotosReportBuilder() *PhotosReportBuilder {
	return &PhotosReportBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosReportBuilder) OwnerID(v int64) *PhotosReportBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosReportBuilder) PhotoID(v int64) *PhotosReportBuilder {
	b.Params["photo_id"] = v
	return b
}

// Reason for the complaint: '0' – spam, '1' – child pornography, '2' – extremism, '3' – violence, '4' – drug propaganda, '5' – adult material, '6' – insult, abuse
func (b *PhotosReportBuilder) Reason(v int64) *PhotosReportBuilder {
	b.Params["reason"] = v
	return b
}

// PhotosReportCommentBuilder builder.
//
// Reports (submits a complaint about) a comment on a photo.
//
// https://vk.com/dev/photos.reportComment
type PhotosReportCommentBuilder struct {
	api.Params
}

// PhotosReportCommentBuilder func.
func NewPhotosReportCommentBuilder() *PhotosReportCommentBuilder {
	return &PhotosReportCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosReportCommentBuilder) OwnerID(v int64) *PhotosReportCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the comment being reported.
func (b *PhotosReportCommentBuilder) CommentID(v int64) *PhotosReportCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Reason for the complaint: '0' – spam, '1' – child pornography, '2' – extremism, '3' – violence, '4' – drug propaganda, '5' – adult material, '6' – insult, abuse
func (b *PhotosReportCommentBuilder) Reason(v int64) *PhotosReportCommentBuilder {
	b.Params["reason"] = v
	return b
}

// PhotosRestoreBuilder builder.
//
// Restores a deleted photo.
//
// https://vk.com/dev/photos.restore
type PhotosRestoreBuilder struct {
	api.Params
}

// PhotosRestoreBuilder func.
func NewPhotosRestoreBuilder() *PhotosRestoreBuilder {
	return &PhotosRestoreBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosRestoreBuilder) OwnerID(v int64) *PhotosRestoreBuilder {
	b.Params["owner_id"] = v
	return b
}

// Photo ID.
func (b *PhotosRestoreBuilder) PhotoID(v int64) *PhotosRestoreBuilder {
	b.Params["photo_id"] = v
	return b
}

// PhotosRestoreCommentBuilder builder.
//
// Restores a deleted comment on a photo.
//
// https://vk.com/dev/photos.restoreComment
type PhotosRestoreCommentBuilder struct {
	api.Params
}

// PhotosRestoreCommentBuilder func.
func NewPhotosRestoreCommentBuilder() *PhotosRestoreCommentBuilder {
	return &PhotosRestoreCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the photo.
func (b *PhotosRestoreCommentBuilder) OwnerID(v int64) *PhotosRestoreCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the deleted comment.
func (b *PhotosRestoreCommentBuilder) CommentID(v int64) *PhotosRestoreCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// PhotosSaveBuilder builder.
//
// Saves photos after successful uploading.
//
// https://vk.com/dev/photos.save
type PhotosSaveBuilder struct {
	api.Params
}

// PhotosSaveBuilder func.
func NewPhotosSaveBuilder() *PhotosSaveBuilder {
	return &PhotosSaveBuilder{api.Params{}}
}

// ID of the album to save photos to.
func (b *PhotosSaveBuilder) AlbumID(v int64) *PhotosSaveBuilder {
	b.Params["album_id"] = v
	return b
}

// ID of the community to save photos to.
func (b *PhotosSaveBuilder) GroupID(v int64) *PhotosSaveBuilder {
	b.Params["group_id"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveBuilder) Server(v int64) *PhotosSaveBuilder {
	b.Params["server"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveBuilder) PhotosList(v string) *PhotosSaveBuilder {
	b.Params["photos_list"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveBuilder) Hash(v string) *PhotosSaveBuilder {
	b.Params["hash"] = v
	return b
}

// Geographical latitude, in degrees (from '-90' to '90').
func (b *PhotosSaveBuilder) Latitude(v float64) *PhotosSaveBuilder {
	b.Params["latitude"] = v
	return b
}

// Geographical longitude, in degrees (from '-180' to '180').
func (b *PhotosSaveBuilder) Longitude(v float64) *PhotosSaveBuilder {
	b.Params["longitude"] = v
	return b
}

// Text describing the photo. 2048 digits max.
func (b *PhotosSaveBuilder) Caption(v string) *PhotosSaveBuilder {
	b.Params["caption"] = v
	return b
}

// PhotosSaveMarketAlbumPhotoBuilder builder.
//
// Saves market album photos after successful uploading.
//
// https://vk.com/dev/photos.saveMarketAlbumPhoto
type PhotosSaveMarketAlbumPhotoBuilder struct {
	api.Params
}

// PhotosSaveMarketAlbumPhotoBuilder func.
func NewPhotosSaveMarketAlbumPhotoBuilder() *PhotosSaveMarketAlbumPhotoBuilder {
	return &PhotosSaveMarketAlbumPhotoBuilder{api.Params{}}
}

// Community ID.
func (b *PhotosSaveMarketAlbumPhotoBuilder) GroupID(v int64) *PhotosSaveMarketAlbumPhotoBuilder {
	b.Params["group_id"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketAlbumPhotoBuilder) Photo(v string) *PhotosSaveMarketAlbumPhotoBuilder {
	b.Params["photo"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketAlbumPhotoBuilder) Server(v int64) *PhotosSaveMarketAlbumPhotoBuilder {
	b.Params["server"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketAlbumPhotoBuilder) Hash(v string) *PhotosSaveMarketAlbumPhotoBuilder {
	b.Params["hash"] = v
	return b
}

// PhotosSaveMarketPhotoBuilder builder.
//
// Saves market photos after successful uploading.
//
// https://vk.com/dev/photos.saveMarketPhoto
type PhotosSaveMarketPhotoBuilder struct {
	api.Params
}

// PhotosSaveMarketPhotoBuilder func.
func NewPhotosSaveMarketPhotoBuilder() *PhotosSaveMarketPhotoBuilder {
	return &PhotosSaveMarketPhotoBuilder{api.Params{}}
}

// Community ID.
func (b *PhotosSaveMarketPhotoBuilder) GroupID(v int64) *PhotosSaveMarketPhotoBuilder {
	b.Params["group_id"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketPhotoBuilder) Photo(v string) *PhotosSaveMarketPhotoBuilder {
	b.Params["photo"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketPhotoBuilder) Server(v int64) *PhotosSaveMarketPhotoBuilder {
	b.Params["server"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketPhotoBuilder) Hash(v string) *PhotosSaveMarketPhotoBuilder {
	b.Params["hash"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketPhotoBuilder) CropData(v string) *PhotosSaveMarketPhotoBuilder {
	b.Params["crop_data"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveMarketPhotoBuilder) CropHash(v string) *PhotosSaveMarketPhotoBuilder {
	b.Params["crop_hash"] = v
	return b
}

// PhotosSaveMessagesPhotoBuilder builder.
//
// Saves a photo after being successfully uploaded. URL obtained with [vk.com/dev/photos.getMessagesUploadServer|photos.getMessagesUploadServer] method.
//
// https://vk.com/dev/photos.saveMessagesPhoto
type PhotosSaveMessagesPhotoBuilder struct {
	api.Params
}

// PhotosSaveMessagesPhotoBuilder func.
func NewPhotosSaveMessagesPhotoBuilder() *PhotosSaveMessagesPhotoBuilder {
	return &PhotosSaveMessagesPhotoBuilder{api.Params{}}
}

// Parameter returned when the photo is [vk.com/dev/upload_files|uploaded to the server].
func (b *PhotosSaveMessagesPhotoBuilder) Photo(v string) *PhotosSaveMessagesPhotoBuilder {
	b.Params["photo"] = v
	return b
}

func (b *PhotosSaveMessagesPhotoBuilder) Server(v int64) *PhotosSaveMessagesPhotoBuilder {
	b.Params["server"] = v
	return b
}

func (b *PhotosSaveMessagesPhotoBuilder) Hash(v string) *PhotosSaveMessagesPhotoBuilder {
	b.Params["hash"] = v
	return b
}

// PhotosSaveOwnerCoverPhotoBuilder builder.
//
// Saves cover photo after successful uploading.
//
// https://vk.com/dev/photos.saveOwnerCoverPhoto
type PhotosSaveOwnerCoverPhotoBuilder struct {
	api.Params
}

// PhotosSaveOwnerCoverPhotoBuilder func.
func NewPhotosSaveOwnerCoverPhotoBuilder() *PhotosSaveOwnerCoverPhotoBuilder {
	return &PhotosSaveOwnerCoverPhotoBuilder{api.Params{}}
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveOwnerCoverPhotoBuilder) Hash(v string) *PhotosSaveOwnerCoverPhotoBuilder {
	b.Params["hash"] = v
	return b
}

// Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].
func (b *PhotosSaveOwnerCoverPhotoBuilder) Photo(v string) *PhotosSaveOwnerCoverPhotoBuilder {
	b.Params["photo"] = v
	return b
}

// PhotosSaveOwnerPhotoBuilder builder.
//
// Saves a profile or community photo. Upload URL can be got with the [vk.com/dev/photos.getOwnerPhotoUploadServer|photos.getOwnerPhotoUploadServer] method.
//
// https://vk.com/dev/photos.saveOwnerPhoto
type PhotosSaveOwnerPhotoBuilder struct {
	api.Params
}

// PhotosSaveOwnerPhotoBuilder func.
func NewPhotosSaveOwnerPhotoBuilder() *PhotosSaveOwnerPhotoBuilder {
	return &PhotosSaveOwnerPhotoBuilder{api.Params{}}
}

// parameter returned after [vk.com/dev/upload_files|photo upload].
func (b *PhotosSaveOwnerPhotoBuilder) Server(v string) *PhotosSaveOwnerPhotoBuilder {
	b.Params["server"] = v
	return b
}

// parameter returned after [vk.com/dev/upload_files|photo upload].
func (b *PhotosSaveOwnerPhotoBuilder) Hash(v string) *PhotosSaveOwnerPhotoBuilder {
	b.Params["hash"] = v
	return b
}

// parameter returned after [vk.com/dev/upload_files|photo upload].
func (b *PhotosSaveOwnerPhotoBuilder) Photo(v string) *PhotosSaveOwnerPhotoBuilder {
	b.Params["photo"] = v
	return b
}

// PhotosSaveWallPhotoBuilder builder.
//
// Saves a photo to a user's or community's wall after being uploaded.
//
// https://vk.com/dev/photos.saveWallPhoto
type PhotosSaveWallPhotoBuilder struct {
	api.Params
}

// PhotosSaveWallPhotoBuilder func.
func NewPhotosSaveWallPhotoBuilder() *PhotosSaveWallPhotoBuilder {
	return &PhotosSaveWallPhotoBuilder{api.Params{}}
}

// ID of the user on whose wall the photo will be saved.
func (b *PhotosSaveWallPhotoBuilder) UserID(v int64) *PhotosSaveWallPhotoBuilder {
	b.Params["user_id"] = v
	return b
}

// ID of community on whose wall the photo will be saved.
func (b *PhotosSaveWallPhotoBuilder) GroupID(v int64) *PhotosSaveWallPhotoBuilder {
	b.Params["group_id"] = v
	return b
}

// Parameter returned when the the photo is [vk.com/dev/upload_files|uploaded to the server].
func (b *PhotosSaveWallPhotoBuilder) Photo(v string) *PhotosSaveWallPhotoBuilder {
	b.Params["photo"] = v
	return b
}

func (b *PhotosSaveWallPhotoBuilder) Server(v int64) *PhotosSaveWallPhotoBuilder {
	b.Params["server"] = v
	return b
}

func (b *PhotosSaveWallPhotoBuilder) Hash(v string) *PhotosSaveWallPhotoBuilder {
	b.Params["hash"] = v
	return b
}

// Geographical latitude, in degrees (from '-90' to '90').
func (b *PhotosSaveWallPhotoBuilder) Latitude(v float64) *PhotosSaveWallPhotoBuilder {
	b.Params["latitude"] = v
	return b
}

// Geographical longitude, in degrees (from '-180' to '180').
func (b *PhotosSaveWallPhotoBuilder) Longitude(v float64) *PhotosSaveWallPhotoBuilder {
	b.Params["longitude"] = v
	return b
}

// Text describing the photo. 2048 digits max.
func (b *PhotosSaveWallPhotoBuilder) Caption(v string) *PhotosSaveWallPhotoBuilder {
	b.Params["caption"] = v
	return b
}

// PhotosSearchBuilder builder.
//
// Returns a list of photos.
//
// https://vk.com/dev/photos.search
type PhotosSearchBuilder struct {
	api.Params
}

// PhotosSearchBuilder func.
func NewPhotosSearchBuilder() *PhotosSearchBuilder {
	return &PhotosSearchBuilder{api.Params{}}
}

// Search query string.
func (b *PhotosSearchBuilder) Q(v string) *PhotosSearchBuilder {
	b.Params["q"] = v
	return b
}

// Geographical latitude, in degrees (from '-90' to '90').
func (b *PhotosSearchBuilder) Lat(v float64) *PhotosSearchBuilder {
	b.Params["lat"] = v
	return b
}

// Geographical longitude, in degrees (from '-180' to '180').
func (b *PhotosSearchBuilder) Long(v float64) *PhotosSearchBuilder {
	b.Params["long"] = v
	return b
}

func (b *PhotosSearchBuilder) StartTime(v int64) *PhotosSearchBuilder {
	b.Params["start_time"] = v
	return b
}

func (b *PhotosSearchBuilder) EndTime(v int64) *PhotosSearchBuilder {
	b.Params["end_time"] = v
	return b
}

// Sort order:
func (b *PhotosSearchBuilder) Sort(v int64) *PhotosSearchBuilder {
	b.Params["sort"] = v
	return b
}

// Offset needed to return a specific subset of photos.
func (b *PhotosSearchBuilder) Offset(v int64) *PhotosSearchBuilder {
	b.Params["offset"] = v
	return b
}

// Number of photos to return.
func (b *PhotosSearchBuilder) Count(v int64) *PhotosSearchBuilder {
	b.Params["count"] = v
	return b
}

// Radius of search in meters (works very approximately). Available values: '10', '100', '800', '6000', '50000'.
func (b *PhotosSearchBuilder) Radius(v int64) *PhotosSearchBuilder {
	b.Params["radius"] = v
	return b
}

// PollsAddVoteBuilder builder.
//
// Adds the current user's vote to the selected answer in the poll.
//
// https://vk.com/dev/polls.addVote
type PollsAddVoteBuilder struct {
	api.Params
}

// PollsAddVoteBuilder func.
func NewPollsAddVoteBuilder() *PollsAddVoteBuilder {
	return &PollsAddVoteBuilder{api.Params{}}
}

// ID of the user or community that owns the poll. Use a negative value to designate a community ID.
func (b *PollsAddVoteBuilder) OwnerID(v int64) *PollsAddVoteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Poll ID.
func (b *PollsAddVoteBuilder) PollID(v int64) *PollsAddVoteBuilder {
	b.Params["poll_id"] = v
	return b
}

func (b *PollsAddVoteBuilder) AnswerIDs(v []int64) *PollsAddVoteBuilder {
	b.Params["answer_ids"] = v
	return b
}

func (b *PollsAddVoteBuilder) IsBoard(v bool) *PollsAddVoteBuilder {
	b.Params["is_board"] = v
	return b
}

// PollsCreateBuilder builder.
//
// Creates polls that can be attached to the users' or communities' posts.
//
// https://vk.com/dev/polls.create
type PollsCreateBuilder struct {
	api.Params
}

// PollsCreateBuilder func.
func NewPollsCreateBuilder() *PollsCreateBuilder {
	return &PollsCreateBuilder{api.Params{}}
}

// question text
func (b *PollsCreateBuilder) Question(v string) *PollsCreateBuilder {
	b.Params["question"] = v
	return b
}

// '1' – anonymous poll, participants list is hidden,, '0' – public poll, participants list is available,, Default value is '0'.
func (b *PollsCreateBuilder) IsAnonymous(v bool) *PollsCreateBuilder {
	b.Params["is_anonymous"] = v
	return b
}

func (b *PollsCreateBuilder) IsMultiple(v bool) *PollsCreateBuilder {
	b.Params["is_multiple"] = v
	return b
}

func (b *PollsCreateBuilder) EndDate(v int64) *PollsCreateBuilder {
	b.Params["end_date"] = v
	return b
}

// If a poll will be added to a communty it is required to send a negative group identifier. Current user by default.
func (b *PollsCreateBuilder) OwnerID(v int64) *PollsCreateBuilder {
	b.Params["owner_id"] = v
	return b
}

// available answers list, for example: " ["yes","no","maybe"]", There can be from 1 to 10 answers.
func (b *PollsCreateBuilder) AddAnswers(v string) *PollsCreateBuilder {
	b.Params["add_answers"] = v
	return b
}

func (b *PollsCreateBuilder) PhotoID(v int64) *PollsCreateBuilder {
	b.Params["photo_id"] = v
	return b
}

func (b *PollsCreateBuilder) BackgroundID(v string) *PollsCreateBuilder {
	b.Params["background_id"] = v
	return b
}

func (b *PollsCreateBuilder) DisableUnvote(v bool) *PollsCreateBuilder {
	b.Params["disable_unvote"] = v
	return b
}

// PollsDeleteVoteBuilder builder.
//
// Deletes the current user's vote from the selected answer in the poll.
//
// https://vk.com/dev/polls.deleteVote
type PollsDeleteVoteBuilder struct {
	api.Params
}

// PollsDeleteVoteBuilder func.
func NewPollsDeleteVoteBuilder() *PollsDeleteVoteBuilder {
	return &PollsDeleteVoteBuilder{api.Params{}}
}

// ID of the user or community that owns the poll. Use a negative value to designate a community ID.
func (b *PollsDeleteVoteBuilder) OwnerID(v int64) *PollsDeleteVoteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Poll ID.
func (b *PollsDeleteVoteBuilder) PollID(v int64) *PollsDeleteVoteBuilder {
	b.Params["poll_id"] = v
	return b
}

// Answer ID.
func (b *PollsDeleteVoteBuilder) AnswerID(v int64) *PollsDeleteVoteBuilder {
	b.Params["answer_id"] = v
	return b
}

func (b *PollsDeleteVoteBuilder) IsBoard(v bool) *PollsDeleteVoteBuilder {
	b.Params["is_board"] = v
	return b
}

// PollsEditBuilder builder.
//
// Edits created polls
//
// https://vk.com/dev/polls.edit
type PollsEditBuilder struct {
	api.Params
}

// PollsEditBuilder func.
func NewPollsEditBuilder() *PollsEditBuilder {
	return &PollsEditBuilder{api.Params{}}
}

// poll owner id
func (b *PollsEditBuilder) OwnerID(v int64) *PollsEditBuilder {
	b.Params["owner_id"] = v
	return b
}

// edited poll's id
func (b *PollsEditBuilder) PollID(v int64) *PollsEditBuilder {
	b.Params["poll_id"] = v
	return b
}

// new question text
func (b *PollsEditBuilder) Question(v string) *PollsEditBuilder {
	b.Params["question"] = v
	return b
}

// answers list, for example: , "["yes","no","maybe"]"
func (b *PollsEditBuilder) AddAnswers(v string) *PollsEditBuilder {
	b.Params["add_answers"] = v
	return b
}

// object containing answers that need to be edited,, key – answer id, value – new answer text. Example: {"382967099":"option1", "382967103":"option2"}"
func (b *PollsEditBuilder) EditAnswers(v string) *PollsEditBuilder {
	b.Params["edit_answers"] = v
	return b
}

// list of answer ids to be deleted. For example: "[382967099, 382967103]"
func (b *PollsEditBuilder) DeleteAnswers(v string) *PollsEditBuilder {
	b.Params["delete_answers"] = v
	return b
}

func (b *PollsEditBuilder) EndDate(v int64) *PollsEditBuilder {
	b.Params["end_date"] = v
	return b
}

func (b *PollsEditBuilder) PhotoID(v int64) *PollsEditBuilder {
	b.Params["photo_id"] = v
	return b
}

func (b *PollsEditBuilder) BackgroundID(v string) *PollsEditBuilder {
	b.Params["background_id"] = v
	return b
}

// PollsGetByIDBuilder builder.
//
// Returns detailed information about a poll by its ID.
//
// https://vk.com/dev/polls.getById
type PollsGetByIDBuilder struct {
	api.Params
}

// PollsGetByIDBuilder func.
func NewPollsGetByIDBuilder() *PollsGetByIDBuilder {
	return &PollsGetByIDBuilder{api.Params{}}
}

// ID of the user or community that owns the poll. Use a negative value to designate a community ID.
func (b *PollsGetByIDBuilder) OwnerID(v int64) *PollsGetByIDBuilder {
	b.Params["owner_id"] = v
	return b
}

// '1' – poll is in a board, '0' – poll is on a wall. '0' by default.
func (b *PollsGetByIDBuilder) IsBoard(v bool) *PollsGetByIDBuilder {
	b.Params["is_board"] = v
	return b
}

// Poll ID.
func (b *PollsGetByIDBuilder) PollID(v int64) *PollsGetByIDBuilder {
	b.Params["poll_id"] = v
	return b
}

func (b *PollsGetByIDBuilder) Extended(v bool) *PollsGetByIDBuilder {
	b.Params["extended"] = v
	return b
}

func (b *PollsGetByIDBuilder) FriendsCount(v int64) *PollsGetByIDBuilder {
	b.Params["friends_count"] = v
	return b
}

func (b *PollsGetByIDBuilder) Fields(v []string) *PollsGetByIDBuilder {
	b.Params["fields"] = v
	return b
}

func (b *PollsGetByIDBuilder) NameCase(v string) *PollsGetByIDBuilder {
	b.Params["name_case"] = v
	return b
}

// PollsGetVotersBuilder builder.
//
// Returns a list of IDs of users who selected specific answers in the poll.
//
// https://vk.com/dev/polls.getVoters
type PollsGetVotersBuilder struct {
	api.Params
}

// PollsGetVotersBuilder func.
func NewPollsGetVotersBuilder() *PollsGetVotersBuilder {
	return &PollsGetVotersBuilder{api.Params{}}
}

// ID of the user or community that owns the poll. Use a negative value to designate a community ID.
func (b *PollsGetVotersBuilder) OwnerID(v int64) *PollsGetVotersBuilder {
	b.Params["owner_id"] = v
	return b
}

// Poll ID.
func (b *PollsGetVotersBuilder) PollID(v int64) *PollsGetVotersBuilder {
	b.Params["poll_id"] = v
	return b
}

// Answer IDs.
func (b *PollsGetVotersBuilder) AnswerIDs(v []int64) *PollsGetVotersBuilder {
	b.Params["answer_ids"] = v
	return b
}

func (b *PollsGetVotersBuilder) IsBoard(v bool) *PollsGetVotersBuilder {
	b.Params["is_board"] = v
	return b
}

// '1' — to return only current user's friends, '0' — to return all users (default),
func (b *PollsGetVotersBuilder) FriendsOnly(v bool) *PollsGetVotersBuilder {
	b.Params["friends_only"] = v
	return b
}

// Offset needed to return a specific subset of voters. '0' — (default)
func (b *PollsGetVotersBuilder) Offset(v int64) *PollsGetVotersBuilder {
	b.Params["offset"] = v
	return b
}

// Number of user IDs to return (if the 'friends_only' parameter is not set, maximum '1000', otherwise '10'). '100' — (default)
func (b *PollsGetVotersBuilder) Count(v int64) *PollsGetVotersBuilder {
	b.Params["count"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate (birthdate)', 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online', 'counters'.
func (b *PollsGetVotersBuilder) Fields(v []UsersFields) *PollsGetVotersBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: , 'nom' — nominative (default) , 'gen' — genitive , 'dat' — dative , 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *PollsGetVotersBuilder) NameCase(v string) *PollsGetVotersBuilder {
	b.Params["name_case"] = v
	return b
}

// PrettyCardsCreateBuilder builder.
//
// https://vk.com/dev/prettyCards.create
type PrettyCardsCreateBuilder struct {
	api.Params
}

// PrettyCardsCreateBuilder func.
func NewPrettyCardsCreateBuilder() *PrettyCardsCreateBuilder {
	return &PrettyCardsCreateBuilder{api.Params{}}
}

func (b *PrettyCardsCreateBuilder) OwnerID(v int64) *PrettyCardsCreateBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *PrettyCardsCreateBuilder) Photo(v string) *PrettyCardsCreateBuilder {
	b.Params["photo"] = v
	return b
}

func (b *PrettyCardsCreateBuilder) Title(v string) *PrettyCardsCreateBuilder {
	b.Params["title"] = v
	return b
}

func (b *PrettyCardsCreateBuilder) Link(v string) *PrettyCardsCreateBuilder {
	b.Params["link"] = v
	return b
}

func (b *PrettyCardsCreateBuilder) Price(v string) *PrettyCardsCreateBuilder {
	b.Params["price"] = v
	return b
}

func (b *PrettyCardsCreateBuilder) PriceOld(v string) *PrettyCardsCreateBuilder {
	b.Params["price_old"] = v
	return b
}

func (b *PrettyCardsCreateBuilder) Button(v string) *PrettyCardsCreateBuilder {
	b.Params["button"] = v
	return b
}

// PrettyCardsDeleteBuilder builder.
//
// https://vk.com/dev/prettyCards.delete
type PrettyCardsDeleteBuilder struct {
	api.Params
}

// PrettyCardsDeleteBuilder func.
func NewPrettyCardsDeleteBuilder() *PrettyCardsDeleteBuilder {
	return &PrettyCardsDeleteBuilder{api.Params{}}
}

func (b *PrettyCardsDeleteBuilder) OwnerID(v int64) *PrettyCardsDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *PrettyCardsDeleteBuilder) CardID(v int64) *PrettyCardsDeleteBuilder {
	b.Params["card_id"] = v
	return b
}

// PrettyCardsEditBuilder builder.
//
// https://vk.com/dev/prettyCards.edit
type PrettyCardsEditBuilder struct {
	api.Params
}

// PrettyCardsEditBuilder func.
func NewPrettyCardsEditBuilder() *PrettyCardsEditBuilder {
	return &PrettyCardsEditBuilder{api.Params{}}
}

func (b *PrettyCardsEditBuilder) OwnerID(v int64) *PrettyCardsEditBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *PrettyCardsEditBuilder) CardID(v int64) *PrettyCardsEditBuilder {
	b.Params["card_id"] = v
	return b
}

func (b *PrettyCardsEditBuilder) Photo(v string) *PrettyCardsEditBuilder {
	b.Params["photo"] = v
	return b
}

func (b *PrettyCardsEditBuilder) Title(v string) *PrettyCardsEditBuilder {
	b.Params["title"] = v
	return b
}

func (b *PrettyCardsEditBuilder) Link(v string) *PrettyCardsEditBuilder {
	b.Params["link"] = v
	return b
}

func (b *PrettyCardsEditBuilder) Price(v string) *PrettyCardsEditBuilder {
	b.Params["price"] = v
	return b
}

func (b *PrettyCardsEditBuilder) PriceOld(v string) *PrettyCardsEditBuilder {
	b.Params["price_old"] = v
	return b
}

func (b *PrettyCardsEditBuilder) Button(v string) *PrettyCardsEditBuilder {
	b.Params["button"] = v
	return b
}

// PrettyCardsGetBuilder builder.
//
// https://vk.com/dev/prettyCards.get
type PrettyCardsGetBuilder struct {
	api.Params
}

// PrettyCardsGetBuilder func.
func NewPrettyCardsGetBuilder() *PrettyCardsGetBuilder {
	return &PrettyCardsGetBuilder{api.Params{}}
}

func (b *PrettyCardsGetBuilder) OwnerID(v int64) *PrettyCardsGetBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *PrettyCardsGetBuilder) Offset(v int64) *PrettyCardsGetBuilder {
	b.Params["offset"] = v
	return b
}

func (b *PrettyCardsGetBuilder) Count(v int64) *PrettyCardsGetBuilder {
	b.Params["count"] = v
	return b
}

// PrettyCardsGetByIDBuilder builder.
//
// https://vk.com/dev/prettyCards.getById
type PrettyCardsGetByIDBuilder struct {
	api.Params
}

// PrettyCardsGetByIDBuilder func.
func NewPrettyCardsGetByIDBuilder() *PrettyCardsGetByIDBuilder {
	return &PrettyCardsGetByIDBuilder{api.Params{}}
}

func (b *PrettyCardsGetByIDBuilder) OwnerID(v int64) *PrettyCardsGetByIDBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *PrettyCardsGetByIDBuilder) CardIDs(v []int64) *PrettyCardsGetByIDBuilder {
	b.Params["card_ids"] = v
	return b
}

// PrettyCardsGetUploadURLBuilder builder.
//
// https://vk.com/dev/prettyCards.getUploadURL
type PrettyCardsGetUploadURLBuilder struct {
	api.Params
}

// PrettyCardsGetUploadURLBuilder func.
func NewPrettyCardsGetUploadURLBuilder() *PrettyCardsGetUploadURLBuilder {
	return &PrettyCardsGetUploadURLBuilder{api.Params{}}
}

// SearchGetHintsBuilder builder.
//
// Allows the programmer to do a quick search for any substring.
//
// https://vk.com/dev/search.getHints
type SearchGetHintsBuilder struct {
	api.Params
}

// SearchGetHintsBuilder func.
func NewSearchGetHintsBuilder() *SearchGetHintsBuilder {
	return &SearchGetHintsBuilder{api.Params{}}
}

// Search query string.
func (b *SearchGetHintsBuilder) Q(v string) *SearchGetHintsBuilder {
	b.Params["q"] = v
	return b
}

// Offset for querying specific result subset
func (b *SearchGetHintsBuilder) Offset(v int64) *SearchGetHintsBuilder {
	b.Params["offset"] = v
	return b
}

// Maximum number of results to return.
func (b *SearchGetHintsBuilder) Limit(v int64) *SearchGetHintsBuilder {
	b.Params["limit"] = v
	return b
}

func (b *SearchGetHintsBuilder) Filters(v []string) *SearchGetHintsBuilder {
	b.Params["filters"] = v
	return b
}

func (b *SearchGetHintsBuilder) Fields(v []string) *SearchGetHintsBuilder {
	b.Params["fields"] = v
	return b
}

func (b *SearchGetHintsBuilder) SearchGlobal(v bool) *SearchGetHintsBuilder {
	b.Params["search_global"] = v
	return b
}

// SecureAddAppEventBuilder builder.
//
// Adds user activity information to an application
//
// https://vk.com/dev/secure.addAppEvent
type SecureAddAppEventBuilder struct {
	api.Params
}

// SecureAddAppEventBuilder func.
func NewSecureAddAppEventBuilder() *SecureAddAppEventBuilder {
	return &SecureAddAppEventBuilder{api.Params{}}
}

// ID of a user to save the data
func (b *SecureAddAppEventBuilder) UserID(v int64) *SecureAddAppEventBuilder {
	b.Params["user_id"] = v
	return b
}

// there are 2 default activities: , * 1 – level. Works similar to ,, * 2 – points, saves points amount, Any other value is for saving completed missions
func (b *SecureAddAppEventBuilder) ActivityID(v int64) *SecureAddAppEventBuilder {
	b.Params["activity_id"] = v
	return b
}

// depends on activity_id: * 1 – number, current level number,, * 2 – number, current user's points amount, , Any other value is ignored
func (b *SecureAddAppEventBuilder) Value(v int64) *SecureAddAppEventBuilder {
	b.Params["value"] = v
	return b
}

// SecureCheckTokenBuilder builder.
//
// Checks the user authentication in 'IFrame' and 'Flash' apps using the 'access_token' parameter.
//
// https://vk.com/dev/secure.checkToken
type SecureCheckTokenBuilder struct {
	api.Params
}

// SecureCheckTokenBuilder func.
func NewSecureCheckTokenBuilder() *SecureCheckTokenBuilder {
	return &SecureCheckTokenBuilder{api.Params{}}
}

// client 'access_token'
func (b *SecureCheckTokenBuilder) Token(v string) *SecureCheckTokenBuilder {
	b.Params["token"] = v
	return b
}

// user 'ip address'. Note that user may access using the 'ipv6' address, in this case it is required to transmit the 'ipv6' address. If not transmitted, the address will not be checked.
func (b *SecureCheckTokenBuilder) Ip(v string) *SecureCheckTokenBuilder {
	b.Params["ip"] = v
	return b
}

// SecureGetAppBalanceBuilder builder.
//
// Returns payment balance of the application in hundredth of a vote.
//
// https://vk.com/dev/secure.getAppBalance
type SecureGetAppBalanceBuilder struct {
	api.Params
}

// SecureGetAppBalanceBuilder func.
func NewSecureGetAppBalanceBuilder() *SecureGetAppBalanceBuilder {
	return &SecureGetAppBalanceBuilder{api.Params{}}
}

// SecureGetSMSHistoryBuilder builder.
//
// Shows a list of SMS notifications sent by the application using [vk.com/dev/secure.sendSMSNotification|secure.sendSMSNotification] method.
//
// https://vk.com/dev/secure.getSMSHistory
type SecureGetSMSHistoryBuilder struct {
	api.Params
}

// SecureGetSMSHistoryBuilder func.
func NewSecureGetSMSHistoryBuilder() *SecureGetSMSHistoryBuilder {
	return &SecureGetSMSHistoryBuilder{api.Params{}}
}

func (b *SecureGetSMSHistoryBuilder) UserID(v int64) *SecureGetSMSHistoryBuilder {
	b.Params["user_id"] = v
	return b
}

// filter by start date. It is set as UNIX-time.
func (b *SecureGetSMSHistoryBuilder) DateFrom(v int64) *SecureGetSMSHistoryBuilder {
	b.Params["date_from"] = v
	return b
}

// filter by end date. It is set as UNIX-time.
func (b *SecureGetSMSHistoryBuilder) DateTo(v int64) *SecureGetSMSHistoryBuilder {
	b.Params["date_to"] = v
	return b
}

// number of returned posts. By default — 1000.
func (b *SecureGetSMSHistoryBuilder) Limit(v int64) *SecureGetSMSHistoryBuilder {
	b.Params["limit"] = v
	return b
}

// SecureGetTransactionsHistoryBuilder builder.
//
// Shows history of votes transaction between users and the application.
//
// https://vk.com/dev/secure.getTransactionsHistory
type SecureGetTransactionsHistoryBuilder struct {
	api.Params
}

// SecureGetTransactionsHistoryBuilder func.
func NewSecureGetTransactionsHistoryBuilder() *SecureGetTransactionsHistoryBuilder {
	return &SecureGetTransactionsHistoryBuilder{api.Params{}}
}

func (b *SecureGetTransactionsHistoryBuilder) Type(v int64) *SecureGetTransactionsHistoryBuilder {
	b.Params["type"] = v
	return b
}

func (b *SecureGetTransactionsHistoryBuilder) UidFrom(v int64) *SecureGetTransactionsHistoryBuilder {
	b.Params["uid_from"] = v
	return b
}

func (b *SecureGetTransactionsHistoryBuilder) UidTo(v int64) *SecureGetTransactionsHistoryBuilder {
	b.Params["uid_to"] = v
	return b
}

func (b *SecureGetTransactionsHistoryBuilder) DateFrom(v int64) *SecureGetTransactionsHistoryBuilder {
	b.Params["date_from"] = v
	return b
}

func (b *SecureGetTransactionsHistoryBuilder) DateTo(v int64) *SecureGetTransactionsHistoryBuilder {
	b.Params["date_to"] = v
	return b
}

func (b *SecureGetTransactionsHistoryBuilder) Limit(v int64) *SecureGetTransactionsHistoryBuilder {
	b.Params["limit"] = v
	return b
}

// SecureGetUserLevelBuilder builder.
//
// Returns one of the previously set game levels of one or more users in the application.
//
// https://vk.com/dev/secure.getUserLevel
type SecureGetUserLevelBuilder struct {
	api.Params
}

// SecureGetUserLevelBuilder func.
func NewSecureGetUserLevelBuilder() *SecureGetUserLevelBuilder {
	return &SecureGetUserLevelBuilder{api.Params{}}
}

func (b *SecureGetUserLevelBuilder) UserIDs(v []int64) *SecureGetUserLevelBuilder {
	b.Params["user_ids"] = v
	return b
}

// SecureGiveEventStickerBuilder builder.
//
// Opens the game achievement and gives the user a sticker
//
// https://vk.com/dev/secure.giveEventSticker
type SecureGiveEventStickerBuilder struct {
	api.Params
}

// SecureGiveEventStickerBuilder func.
func NewSecureGiveEventStickerBuilder() *SecureGiveEventStickerBuilder {
	return &SecureGiveEventStickerBuilder{api.Params{}}
}

func (b *SecureGiveEventStickerBuilder) UserIDs(v []int64) *SecureGiveEventStickerBuilder {
	b.Params["user_ids"] = v
	return b
}

func (b *SecureGiveEventStickerBuilder) AchievementID(v int64) *SecureGiveEventStickerBuilder {
	b.Params["achievement_id"] = v
	return b
}

// SecureSendNotificationBuilder builder.
//
// Sends notification to the user.
//
// https://vk.com/dev/secure.sendNotification
type SecureSendNotificationBuilder struct {
	api.Params
}

// SecureSendNotificationBuilder func.
func NewSecureSendNotificationBuilder() *SecureSendNotificationBuilder {
	return &SecureSendNotificationBuilder{api.Params{}}
}

func (b *SecureSendNotificationBuilder) UserIDs(v []int64) *SecureSendNotificationBuilder {
	b.Params["user_ids"] = v
	return b
}

func (b *SecureSendNotificationBuilder) UserID(v int64) *SecureSendNotificationBuilder {
	b.Params["user_id"] = v
	return b
}

// notification text which should be sent in 'UTF-8' encoding ('254' characters maximum).
func (b *SecureSendNotificationBuilder) Message(v string) *SecureSendNotificationBuilder {
	b.Params["message"] = v
	return b
}

// SecureSendSMSNotificationBuilder builder.
//
// Sends 'SMS' notification to a user's mobile device.
//
// https://vk.com/dev/secure.sendSMSNotification
type SecureSendSMSNotificationBuilder struct {
	api.Params
}

// SecureSendSMSNotificationBuilder func.
func NewSecureSendSMSNotificationBuilder() *SecureSendSMSNotificationBuilder {
	return &SecureSendSMSNotificationBuilder{api.Params{}}
}

// ID of the user to whom SMS notification is sent. The user shall allow the application to send him/her notifications (, +1).
func (b *SecureSendSMSNotificationBuilder) UserID(v int64) *SecureSendSMSNotificationBuilder {
	b.Params["user_id"] = v
	return b
}

// 'SMS' text to be sent in 'UTF-8' encoding. Only Latin letters and numbers are allowed. Maximum size is '160' characters.
func (b *SecureSendSMSNotificationBuilder) Message(v string) *SecureSendSMSNotificationBuilder {
	b.Params["message"] = v
	return b
}

// SecureSetCounterBuilder builder.
//
// Sets a counter which is shown to the user in bold in the left menu.
//
// https://vk.com/dev/secure.setCounter
type SecureSetCounterBuilder struct {
	api.Params
}

// SecureSetCounterBuilder func.
func NewSecureSetCounterBuilder() *SecureSetCounterBuilder {
	return &SecureSetCounterBuilder{api.Params{}}
}

func (b *SecureSetCounterBuilder) Counters(v []string) *SecureSetCounterBuilder {
	b.Params["counters"] = v
	return b
}

func (b *SecureSetCounterBuilder) UserID(v int64) *SecureSetCounterBuilder {
	b.Params["user_id"] = v
	return b
}

// counter value.
func (b *SecureSetCounterBuilder) Counter(v int64) *SecureSetCounterBuilder {
	b.Params["counter"] = v
	return b
}

func (b *SecureSetCounterBuilder) Increment(v bool) *SecureSetCounterBuilder {
	b.Params["increment"] = v
	return b
}

// StatsGetBuilder builder.
//
// Returns statistics of a community or an application.
//
// https://vk.com/dev/stats.get
type StatsGetBuilder struct {
	api.Params
}

// StatsGetBuilder func.
func NewStatsGetBuilder() *StatsGetBuilder {
	return &StatsGetBuilder{api.Params{}}
}

// Community ID.
func (b *StatsGetBuilder) GroupID(v int64) *StatsGetBuilder {
	b.Params["group_id"] = v
	return b
}

// Application ID.
func (b *StatsGetBuilder) AppID(v int64) *StatsGetBuilder {
	b.Params["app_id"] = v
	return b
}

func (b *StatsGetBuilder) TimestampFrom(v int64) *StatsGetBuilder {
	b.Params["timestamp_from"] = v
	return b
}

func (b *StatsGetBuilder) TimestampTo(v int64) *StatsGetBuilder {
	b.Params["timestamp_to"] = v
	return b
}

func (b *StatsGetBuilder) Interval(v string) *StatsGetBuilder {
	b.Params["interval"] = v
	return b
}

func (b *StatsGetBuilder) IntervalsCount(v int64) *StatsGetBuilder {
	b.Params["intervals_count"] = v
	return b
}

func (b *StatsGetBuilder) Filters(v []string) *StatsGetBuilder {
	b.Params["filters"] = v
	return b
}

func (b *StatsGetBuilder) StatsGroups(v []string) *StatsGetBuilder {
	b.Params["stats_groups"] = v
	return b
}

func (b *StatsGetBuilder) Extended(v bool) *StatsGetBuilder {
	b.Params["extended"] = v
	return b
}

// StatsGetPostReachBuilder builder.
//
// Returns stats for a wall post.
//
// https://vk.com/dev/stats.getPostReach
type StatsGetPostReachBuilder struct {
	api.Params
}

// StatsGetPostReachBuilder func.
func NewStatsGetPostReachBuilder() *StatsGetPostReachBuilder {
	return &StatsGetPostReachBuilder{api.Params{}}
}

// post owner community id. Specify with "-" sign.
func (b *StatsGetPostReachBuilder) OwnerID(v string) *StatsGetPostReachBuilder {
	b.Params["owner_id"] = v
	return b
}

// wall posts id
func (b *StatsGetPostReachBuilder) PostIDs(v []int64) *StatsGetPostReachBuilder {
	b.Params["post_ids"] = v
	return b
}

// StatsTrackVisitorBuilder builder.
//
// https://vk.com/dev/stats.trackVisitor
type StatsTrackVisitorBuilder struct {
	api.Params
}

// StatsTrackVisitorBuilder func.
func NewStatsTrackVisitorBuilder() *StatsTrackVisitorBuilder {
	return &StatsTrackVisitorBuilder{api.Params{}}
}

func (b *StatsTrackVisitorBuilder) ID(v string) *StatsTrackVisitorBuilder {
	b.Params["id"] = v
	return b
}

// StatusGetBuilder builder.
//
// Returns data required to show the status of a user or community.
//
// https://vk.com/dev/status.get
type StatusGetBuilder struct {
	api.Params
}

// StatusGetBuilder func.
func NewStatusGetBuilder() *StatusGetBuilder {
	return &StatusGetBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *StatusGetBuilder) UserID(v int64) *StatusGetBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *StatusGetBuilder) GroupID(v int64) *StatusGetBuilder {
	b.Params["group_id"] = v
	return b
}

// StatusSetBuilder builder.
//
// Sets a new status for the current user.
//
// https://vk.com/dev/status.set
type StatusSetBuilder struct {
	api.Params
}

// StatusSetBuilder func.
func NewStatusSetBuilder() *StatusSetBuilder {
	return &StatusSetBuilder{api.Params{}}
}

// Text of the new status.
func (b *StatusSetBuilder) Text(v string) *StatusSetBuilder {
	b.Params["text"] = v
	return b
}

// Identifier of a community to set a status in. If left blank the status is set to current user.
func (b *StatusSetBuilder) GroupID(v int64) *StatusSetBuilder {
	b.Params["group_id"] = v
	return b
}

// StorageGetBuilder builder.
//
// Returns a value of variable with the name set by key parameter.
//
// https://vk.com/dev/storage.get
type StorageGetBuilder struct {
	api.Params
}

// StorageGetBuilder func.
func NewStorageGetBuilder() *StorageGetBuilder {
	return &StorageGetBuilder{api.Params{}}
}

func (b *StorageGetBuilder) Key(v string) *StorageGetBuilder {
	b.Params["key"] = v
	return b
}

func (b *StorageGetBuilder) Keys(v []string) *StorageGetBuilder {
	b.Params["keys"] = v
	return b
}

func (b *StorageGetBuilder) UserID(v int64) *StorageGetBuilder {
	b.Params["user_id"] = v
	return b
}

// StorageGetKeysBuilder builder.
//
// Returns the names of all variables.
//
// https://vk.com/dev/storage.getKeys
type StorageGetKeysBuilder struct {
	api.Params
}

// StorageGetKeysBuilder func.
func NewStorageGetKeysBuilder() *StorageGetKeysBuilder {
	return &StorageGetKeysBuilder{api.Params{}}
}

// user id, whose variables names are returned if they were requested with a server method.
func (b *StorageGetKeysBuilder) UserID(v int64) *StorageGetKeysBuilder {
	b.Params["user_id"] = v
	return b
}

func (b *StorageGetKeysBuilder) Offset(v int64) *StorageGetKeysBuilder {
	b.Params["offset"] = v
	return b
}

// amount of variable names the info needs to be collected from.
func (b *StorageGetKeysBuilder) Count(v int64) *StorageGetKeysBuilder {
	b.Params["count"] = v
	return b
}

// StorageSetBuilder builder.
//
// Saves a value of variable with the name set by 'key' parameter.
//
// https://vk.com/dev/storage.set
type StorageSetBuilder struct {
	api.Params
}

// StorageSetBuilder func.
func NewStorageSetBuilder() *StorageSetBuilder {
	return &StorageSetBuilder{api.Params{}}
}

func (b *StorageSetBuilder) Key(v string) *StorageSetBuilder {
	b.Params["key"] = v
	return b
}

func (b *StorageSetBuilder) Value(v string) *StorageSetBuilder {
	b.Params["value"] = v
	return b
}

func (b *StorageSetBuilder) UserID(v int64) *StorageSetBuilder {
	b.Params["user_id"] = v
	return b
}

// StoriesBanOwnerBuilder builder.
//
// Allows to hide stories from chosen sources from current user's feed.
//
// https://vk.com/dev/stories.banOwner
type StoriesBanOwnerBuilder struct {
	api.Params
}

// StoriesBanOwnerBuilder func.
func NewStoriesBanOwnerBuilder() *StoriesBanOwnerBuilder {
	return &StoriesBanOwnerBuilder{api.Params{}}
}

// List of sources IDs
func (b *StoriesBanOwnerBuilder) OwnersIDs(v []int64) *StoriesBanOwnerBuilder {
	b.Params["owners_ids"] = v
	return b
}

// StoriesDeleteBuilder builder.
//
// Allows to delete story.
//
// https://vk.com/dev/stories.delete
type StoriesDeleteBuilder struct {
	api.Params
}

// StoriesDeleteBuilder func.
func NewStoriesDeleteBuilder() *StoriesDeleteBuilder {
	return &StoriesDeleteBuilder{api.Params{}}
}

// Story owner's ID. Current user id is used by default.
func (b *StoriesDeleteBuilder) OwnerID(v int64) *StoriesDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

// Story ID.
func (b *StoriesDeleteBuilder) StoryID(v int64) *StoriesDeleteBuilder {
	b.Params["story_id"] = v
	return b
}

// StoriesGetBuilder builder.
//
// Returns stories available for current user.
//
// https://vk.com/dev/stories.get
type StoriesGetBuilder struct {
	api.Params
}

// StoriesGetBuilder func.
func NewStoriesGetBuilder() *StoriesGetBuilder {
	return &StoriesGetBuilder{api.Params{}}
}

// Owner ID.
func (b *StoriesGetBuilder) OwnerID(v int64) *StoriesGetBuilder {
	b.Params["owner_id"] = v
	return b
}

// '1' — to return additional fields for users and communities. Default value is 0.
func (b *StoriesGetBuilder) Extended(v bool) *StoriesGetBuilder {
	b.Params["extended"] = v
	return b
}

func (b *StoriesGetBuilder) Fields(v []BaseUserGroupFields) *StoriesGetBuilder {
	b.Params["fields"] = v
	return b
}

// StoriesGetBannedBuilder builder.
//
// Returns list of sources hidden from current user's feed.
//
// https://vk.com/dev/stories.getBanned
type StoriesGetBannedBuilder struct {
	api.Params
}

// StoriesGetBannedBuilder func.
func NewStoriesGetBannedBuilder() *StoriesGetBannedBuilder {
	return &StoriesGetBannedBuilder{api.Params{}}
}

// '1' — to return additional fields for users and communities. Default value is 0.
func (b *StoriesGetBannedBuilder) Extended(v bool) *StoriesGetBannedBuilder {
	b.Params["extended"] = v
	return b
}

// Additional fields to return
func (b *StoriesGetBannedBuilder) Fields(v []BaseUserGroupFields) *StoriesGetBannedBuilder {
	b.Params["fields"] = v
	return b
}

// StoriesGetByIDBuilder builder.
//
// Returns story by its ID.
//
// https://vk.com/dev/stories.getById
type StoriesGetByIDBuilder struct {
	api.Params
}

// StoriesGetByIDBuilder func.
func NewStoriesGetByIDBuilder() *StoriesGetByIDBuilder {
	return &StoriesGetByIDBuilder{api.Params{}}
}

// Stories IDs separated by commas. Use format {owner_id}+'_'+{story_id}, for example, 12345_54331.
func (b *StoriesGetByIDBuilder) Stories(v []string) *StoriesGetByIDBuilder {
	b.Params["stories"] = v
	return b
}

// '1' — to return additional fields for users and communities. Default value is 0.
func (b *StoriesGetByIDBuilder) Extended(v bool) *StoriesGetByIDBuilder {
	b.Params["extended"] = v
	return b
}

// Additional fields to return
func (b *StoriesGetByIDBuilder) Fields(v []BaseUserGroupFields) *StoriesGetByIDBuilder {
	b.Params["fields"] = v
	return b
}

// StoriesGetPhotoUploadServerBuilder builder.
//
// Returns URL for uploading a story with photo.
//
// https://vk.com/dev/stories.getPhotoUploadServer
type StoriesGetPhotoUploadServerBuilder struct {
	api.Params
}

// StoriesGetPhotoUploadServerBuilder func.
func NewStoriesGetPhotoUploadServerBuilder() *StoriesGetPhotoUploadServerBuilder {
	return &StoriesGetPhotoUploadServerBuilder{api.Params{}}
}

// 1 — to add the story to friend's feed.
func (b *StoriesGetPhotoUploadServerBuilder) AddToNews(v bool) *StoriesGetPhotoUploadServerBuilder {
	b.Params["add_to_news"] = v
	return b
}

// List of users IDs who can see the story.
func (b *StoriesGetPhotoUploadServerBuilder) UserIDs(v []int64) *StoriesGetPhotoUploadServerBuilder {
	b.Params["user_ids"] = v
	return b
}

// ID of the story to reply with the current.
func (b *StoriesGetPhotoUploadServerBuilder) ReplyToStory(v string) *StoriesGetPhotoUploadServerBuilder {
	b.Params["reply_to_story"] = v
	return b
}

// Link text (for community's stories only).
func (b *StoriesGetPhotoUploadServerBuilder) LinkText(v StoriesUploadLinkText) *StoriesGetPhotoUploadServerBuilder {
	b.Params["link_text"] = v
	return b
}

// Link URL. Internal links on https://vk.com only.
func (b *StoriesGetPhotoUploadServerBuilder) LinkURL(v string) *StoriesGetPhotoUploadServerBuilder {
	b.Params["link_url"] = v
	return b
}

// ID of the community to upload the story (should be verified or with the "fire" icon).
func (b *StoriesGetPhotoUploadServerBuilder) GroupID(v int64) *StoriesGetPhotoUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *StoriesGetPhotoUploadServerBuilder) ClickableStickers(v string) *StoriesGetPhotoUploadServerBuilder {
	b.Params["clickable_stickers"] = v
	return b
}

// StoriesGetRepliesBuilder builder.
//
// Returns replies to the story.
//
// https://vk.com/dev/stories.getReplies
type StoriesGetRepliesBuilder struct {
	api.Params
}

// StoriesGetRepliesBuilder func.
func NewStoriesGetRepliesBuilder() *StoriesGetRepliesBuilder {
	return &StoriesGetRepliesBuilder{api.Params{}}
}

// Story owner ID.
func (b *StoriesGetRepliesBuilder) OwnerID(v int64) *StoriesGetRepliesBuilder {
	b.Params["owner_id"] = v
	return b
}

// Story ID.
func (b *StoriesGetRepliesBuilder) StoryID(v int64) *StoriesGetRepliesBuilder {
	b.Params["story_id"] = v
	return b
}

// Access key for the private object.
func (b *StoriesGetRepliesBuilder) AccessKey(v string) *StoriesGetRepliesBuilder {
	b.Params["access_key"] = v
	return b
}

// '1' — to return additional fields for users and communities. Default value is 0.
func (b *StoriesGetRepliesBuilder) Extended(v bool) *StoriesGetRepliesBuilder {
	b.Params["extended"] = v
	return b
}

// Additional fields to return
func (b *StoriesGetRepliesBuilder) Fields(v []BaseUserGroupFields) *StoriesGetRepliesBuilder {
	b.Params["fields"] = v
	return b
}

// StoriesGetStatsBuilder builder.
//
// Returns stories available for current user.
//
// https://vk.com/dev/stories.getStats
type StoriesGetStatsBuilder struct {
	api.Params
}

// StoriesGetStatsBuilder func.
func NewStoriesGetStatsBuilder() *StoriesGetStatsBuilder {
	return &StoriesGetStatsBuilder{api.Params{}}
}

// Story owner ID.
func (b *StoriesGetStatsBuilder) OwnerID(v int64) *StoriesGetStatsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Story ID.
func (b *StoriesGetStatsBuilder) StoryID(v int64) *StoriesGetStatsBuilder {
	b.Params["story_id"] = v
	return b
}

// StoriesGetVideoUploadServerBuilder builder.
//
// Allows to receive URL for uploading story with video.
//
// https://vk.com/dev/stories.getVideoUploadServer
type StoriesGetVideoUploadServerBuilder struct {
	api.Params
}

// StoriesGetVideoUploadServerBuilder func.
func NewStoriesGetVideoUploadServerBuilder() *StoriesGetVideoUploadServerBuilder {
	return &StoriesGetVideoUploadServerBuilder{api.Params{}}
}

// 1 — to add the story to friend's feed.
func (b *StoriesGetVideoUploadServerBuilder) AddToNews(v bool) *StoriesGetVideoUploadServerBuilder {
	b.Params["add_to_news"] = v
	return b
}

// List of users IDs who can see the story.
func (b *StoriesGetVideoUploadServerBuilder) UserIDs(v []int64) *StoriesGetVideoUploadServerBuilder {
	b.Params["user_ids"] = v
	return b
}

// ID of the story to reply with the current.
func (b *StoriesGetVideoUploadServerBuilder) ReplyToStory(v string) *StoriesGetVideoUploadServerBuilder {
	b.Params["reply_to_story"] = v
	return b
}

// Link text (for community's stories only).
func (b *StoriesGetVideoUploadServerBuilder) LinkText(v StoriesUploadLinkText) *StoriesGetVideoUploadServerBuilder {
	b.Params["link_text"] = v
	return b
}

// Link URL. Internal links on https://vk.com only.
func (b *StoriesGetVideoUploadServerBuilder) LinkURL(v string) *StoriesGetVideoUploadServerBuilder {
	b.Params["link_url"] = v
	return b
}

// ID of the community to upload the story (should be verified or with the "fire" icon).
func (b *StoriesGetVideoUploadServerBuilder) GroupID(v int64) *StoriesGetVideoUploadServerBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *StoriesGetVideoUploadServerBuilder) ClickableStickers(v string) *StoriesGetVideoUploadServerBuilder {
	b.Params["clickable_stickers"] = v
	return b
}

// StoriesGetViewersBuilder builder.
//
// Returns a list of story viewers.
//
// https://vk.com/dev/stories.getViewers
type StoriesGetViewersBuilder struct {
	api.Params
}

// StoriesGetViewersBuilder func.
func NewStoriesGetViewersBuilder() *StoriesGetViewersBuilder {
	return &StoriesGetViewersBuilder{api.Params{}}
}

// Story owner ID.
func (b *StoriesGetViewersBuilder) OwnerID(v int64) *StoriesGetViewersBuilder {
	b.Params["owner_id"] = v
	return b
}

// Story ID.
func (b *StoriesGetViewersBuilder) StoryID(v int64) *StoriesGetViewersBuilder {
	b.Params["story_id"] = v
	return b
}

// Maximum number of results.
func (b *StoriesGetViewersBuilder) Count(v int64) *StoriesGetViewersBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of results.
func (b *StoriesGetViewersBuilder) Offset(v int64) *StoriesGetViewersBuilder {
	b.Params["offset"] = v
	return b
}

// '1' — to return detailed information about photos
func (b *StoriesGetViewersBuilder) Extended(v bool) *StoriesGetViewersBuilder {
	b.Params["extended"] = v
	return b
}

// StoriesHideAllRepliesBuilder builder.
//
// Hides all replies in the last 24 hours from the user to current user's stories.
//
// https://vk.com/dev/stories.hideAllReplies
type StoriesHideAllRepliesBuilder struct {
	api.Params
}

// StoriesHideAllRepliesBuilder func.
func NewStoriesHideAllRepliesBuilder() *StoriesHideAllRepliesBuilder {
	return &StoriesHideAllRepliesBuilder{api.Params{}}
}

// ID of the user whose replies should be hidden.
func (b *StoriesHideAllRepliesBuilder) OwnerID(v int64) *StoriesHideAllRepliesBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *StoriesHideAllRepliesBuilder) GroupID(v int64) *StoriesHideAllRepliesBuilder {
	b.Params["group_id"] = v
	return b
}

// StoriesHideReplyBuilder builder.
//
// Hides the reply to the current user's story.
//
// https://vk.com/dev/stories.hideReply
type StoriesHideReplyBuilder struct {
	api.Params
}

// StoriesHideReplyBuilder func.
func NewStoriesHideReplyBuilder() *StoriesHideReplyBuilder {
	return &StoriesHideReplyBuilder{api.Params{}}
}

// ID of the user whose replies should be hidden.
func (b *StoriesHideReplyBuilder) OwnerID(v int64) *StoriesHideReplyBuilder {
	b.Params["owner_id"] = v
	return b
}

// Story ID.
func (b *StoriesHideReplyBuilder) StoryID(v int64) *StoriesHideReplyBuilder {
	b.Params["story_id"] = v
	return b
}

// StoriesSearchBuilder builder.
//
// https://vk.com/dev/stories.search
type StoriesSearchBuilder struct {
	api.Params
}

// StoriesSearchBuilder func.
func NewStoriesSearchBuilder() *StoriesSearchBuilder {
	return &StoriesSearchBuilder{api.Params{}}
}

func (b *StoriesSearchBuilder) Q(v string) *StoriesSearchBuilder {
	b.Params["q"] = v
	return b
}

func (b *StoriesSearchBuilder) PlaceID(v int64) *StoriesSearchBuilder {
	b.Params["place_id"] = v
	return b
}

func (b *StoriesSearchBuilder) Latitude(v float64) *StoriesSearchBuilder {
	b.Params["latitude"] = v
	return b
}

func (b *StoriesSearchBuilder) Longitude(v float64) *StoriesSearchBuilder {
	b.Params["longitude"] = v
	return b
}

func (b *StoriesSearchBuilder) Radius(v int64) *StoriesSearchBuilder {
	b.Params["radius"] = v
	return b
}

func (b *StoriesSearchBuilder) MentionedID(v int64) *StoriesSearchBuilder {
	b.Params["mentioned_id"] = v
	return b
}

func (b *StoriesSearchBuilder) Count(v int64) *StoriesSearchBuilder {
	b.Params["count"] = v
	return b
}

func (b *StoriesSearchBuilder) Extended(v bool) *StoriesSearchBuilder {
	b.Params["extended"] = v
	return b
}

func (b *StoriesSearchBuilder) Fields(v []string) *StoriesSearchBuilder {
	b.Params["fields"] = v
	return b
}

// StoriesUnbanOwnerBuilder builder.
//
// Allows to show stories from hidden sources in current user's feed.
//
// https://vk.com/dev/stories.unbanOwner
type StoriesUnbanOwnerBuilder struct {
	api.Params
}

// StoriesUnbanOwnerBuilder func.
func NewStoriesUnbanOwnerBuilder() *StoriesUnbanOwnerBuilder {
	return &StoriesUnbanOwnerBuilder{api.Params{}}
}

// List of hidden sources to show stories from.
func (b *StoriesUnbanOwnerBuilder) OwnersIDs(v []int64) *StoriesUnbanOwnerBuilder {
	b.Params["owners_ids"] = v
	return b
}

// StreamingGetServerURLBuilder builder.
//
// Allows to receive data for the connection to Streaming API.
//
// https://vk.com/dev/streaming.getServerUrl
type StreamingGetServerURLBuilder struct {
	api.Params
}

// StreamingGetServerURLBuilder func.
func NewStreamingGetServerURLBuilder() *StreamingGetServerURLBuilder {
	return &StreamingGetServerURLBuilder{api.Params{}}
}

// StreamingSetSettingsBuilder builder.
//
// https://vk.com/dev/streaming.setSettings
type StreamingSetSettingsBuilder struct {
	api.Params
}

// StreamingSetSettingsBuilder func.
func NewStreamingSetSettingsBuilder() *StreamingSetSettingsBuilder {
	return &StreamingSetSettingsBuilder{api.Params{}}
}

func (b *StreamingSetSettingsBuilder) MonthlyTier(v string) *StreamingSetSettingsBuilder {
	b.Params["monthly_tier"] = v
	return b
}

// UsersGetBuilder builder.
//
// Returns detailed information on users.
//
// https://vk.com/dev/users.get
type UsersGetBuilder struct {
	api.Params
}

// UsersGetBuilder func.
func NewUsersGetBuilder() *UsersGetBuilder {
	return &UsersGetBuilder{api.Params{}}
}

// User IDs or screen names ('screen_name'). By default, current user ID.
func (b *UsersGetBuilder) UserIDs(v []string) *UsersGetBuilder {
	b.Params["user_ids"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'contacts', 'education', 'online', 'counters', 'relation', 'last_seen', 'activity', 'can_write_private_message', 'can_see_all_posts', 'can_post', 'universities', 'can_invite_to_chats'
func (b *UsersGetBuilder) Fields(v []UsersFields) *UsersGetBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *UsersGetBuilder) NameCase(v string) *UsersGetBuilder {
	b.Params["name_case"] = v
	return b
}

// UsersGetFollowersBuilder builder.
//
// Returns a list of IDs of followers of the user in question, sorted by date added, most recent first.
//
// https://vk.com/dev/users.getFollowers
type UsersGetFollowersBuilder struct {
	api.Params
}

// UsersGetFollowersBuilder func.
func NewUsersGetFollowersBuilder() *UsersGetFollowersBuilder {
	return &UsersGetFollowersBuilder{api.Params{}}
}

// User ID.
func (b *UsersGetFollowersBuilder) UserID(v int64) *UsersGetFollowersBuilder {
	b.Params["user_id"] = v
	return b
}

// Offset needed to return a specific subset of followers.
func (b *UsersGetFollowersBuilder) Offset(v int64) *UsersGetFollowersBuilder {
	b.Params["offset"] = v
	return b
}

// Number of followers to return.
func (b *UsersGetFollowersBuilder) Count(v int64) *UsersGetFollowersBuilder {
	b.Params["count"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online'.
func (b *UsersGetFollowersBuilder) Fields(v []UsersFields) *UsersGetFollowersBuilder {
	b.Params["fields"] = v
	return b
}

// Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional
func (b *UsersGetFollowersBuilder) NameCase(v string) *UsersGetFollowersBuilder {
	b.Params["name_case"] = v
	return b
}

// UsersGetSubscriptionsBuilder builder.
//
// Returns a list of IDs of users and communities followed by the user.
//
// https://vk.com/dev/users.getSubscriptions
type UsersGetSubscriptionsBuilder struct {
	api.Params
}

// UsersGetSubscriptionsBuilder func.
func NewUsersGetSubscriptionsBuilder() *UsersGetSubscriptionsBuilder {
	return &UsersGetSubscriptionsBuilder{api.Params{}}
}

// User ID.
func (b *UsersGetSubscriptionsBuilder) UserID(v int64) *UsersGetSubscriptionsBuilder {
	b.Params["user_id"] = v
	return b
}

// '1' — to return a combined list of users and communities, '0' — to return separate lists of users and communities (default)
func (b *UsersGetSubscriptionsBuilder) Extended(v bool) *UsersGetSubscriptionsBuilder {
	b.Params["extended"] = v
	return b
}

// Offset needed to return a specific subset of subscriptions.
func (b *UsersGetSubscriptionsBuilder) Offset(v int64) *UsersGetSubscriptionsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of users and communities to return.
func (b *UsersGetSubscriptionsBuilder) Count(v int64) *UsersGetSubscriptionsBuilder {
	b.Params["count"] = v
	return b
}

func (b *UsersGetSubscriptionsBuilder) Fields(v []UsersFields) *UsersGetSubscriptionsBuilder {
	b.Params["fields"] = v
	return b
}

// UsersReportBuilder builder.
//
// Reports (submits a complain about) a user.
//
// https://vk.com/dev/users.report
type UsersReportBuilder struct {
	api.Params
}

// UsersReportBuilder func.
func NewUsersReportBuilder() *UsersReportBuilder {
	return &UsersReportBuilder{api.Params{}}
}

// ID of the user about whom a complaint is being made.
func (b *UsersReportBuilder) UserID(v int64) *UsersReportBuilder {
	b.Params["user_id"] = v
	return b
}

// Type of complaint: 'porn' – pornography, 'spam' – spamming, 'insult' – abusive behavior, 'advertisement' – disruptive advertisements
func (b *UsersReportBuilder) Type(v string) *UsersReportBuilder {
	b.Params["type"] = v
	return b
}

// Comment describing the complaint.
func (b *UsersReportBuilder) Comment(v string) *UsersReportBuilder {
	b.Params["comment"] = v
	return b
}

// UsersSearchBuilder builder.
//
// Returns a list of users matching the search criteria.
//
// https://vk.com/dev/users.search
type UsersSearchBuilder struct {
	api.Params
}

// UsersSearchBuilder func.
func NewUsersSearchBuilder() *UsersSearchBuilder {
	return &UsersSearchBuilder{api.Params{}}
}

// Search query string (e.g., 'Vasya Babich').
func (b *UsersSearchBuilder) Q(v string) *UsersSearchBuilder {
	b.Params["q"] = v
	return b
}

// Sort order: '1' — by date registered, '0' — by rating
func (b *UsersSearchBuilder) Sort(v int64) *UsersSearchBuilder {
	b.Params["sort"] = v
	return b
}

// Offset needed to return a specific subset of users.
func (b *UsersSearchBuilder) Offset(v int64) *UsersSearchBuilder {
	b.Params["offset"] = v
	return b
}

// Number of users to return.
func (b *UsersSearchBuilder) Count(v int64) *UsersSearchBuilder {
	b.Params["count"] = v
	return b
}

// Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online',
func (b *UsersSearchBuilder) Fields(v []UsersFields) *UsersSearchBuilder {
	b.Params["fields"] = v
	return b
}

// City ID.
func (b *UsersSearchBuilder) City(v int64) *UsersSearchBuilder {
	b.Params["city"] = v
	return b
}

// Country ID.
func (b *UsersSearchBuilder) Country(v int64) *UsersSearchBuilder {
	b.Params["country"] = v
	return b
}

// City name in a string.
func (b *UsersSearchBuilder) Hometown(v string) *UsersSearchBuilder {
	b.Params["hometown"] = v
	return b
}

// ID of the country where the user graduated.
func (b *UsersSearchBuilder) UniversityCountry(v int64) *UsersSearchBuilder {
	b.Params["university_country"] = v
	return b
}

// ID of the institution of higher education.
func (b *UsersSearchBuilder) University(v int64) *UsersSearchBuilder {
	b.Params["university"] = v
	return b
}

// Year of graduation from an institution of higher education.
func (b *UsersSearchBuilder) UniversityYear(v int64) *UsersSearchBuilder {
	b.Params["university_year"] = v
	return b
}

// Faculty ID.
func (b *UsersSearchBuilder) UniversityFaculty(v int64) *UsersSearchBuilder {
	b.Params["university_faculty"] = v
	return b
}

// Chair ID.
func (b *UsersSearchBuilder) UniversityChair(v int64) *UsersSearchBuilder {
	b.Params["university_chair"] = v
	return b
}

// '1' — female, '2' — male, '0' — any (default)
func (b *UsersSearchBuilder) Sex(v int64) *UsersSearchBuilder {
	b.Params["sex"] = v
	return b
}

// Relationship status: '1' — Not married, '2' — In a relationship, '3' — Engaged, '4' — Married, '5' — It's complicated, '6' — Actively searching, '7' — In love
func (b *UsersSearchBuilder) Status(v int64) *UsersSearchBuilder {
	b.Params["status"] = v
	return b
}

// Minimum age.
func (b *UsersSearchBuilder) AgeFrom(v int64) *UsersSearchBuilder {
	b.Params["age_from"] = v
	return b
}

// Maximum age.
func (b *UsersSearchBuilder) AgeTo(v int64) *UsersSearchBuilder {
	b.Params["age_to"] = v
	return b
}

// Day of birth.
func (b *UsersSearchBuilder) BirthDay(v int64) *UsersSearchBuilder {
	b.Params["birth_day"] = v
	return b
}

// Month of birth.
func (b *UsersSearchBuilder) BirthMonth(v int64) *UsersSearchBuilder {
	b.Params["birth_month"] = v
	return b
}

// Year of birth.
func (b *UsersSearchBuilder) BirthYear(v int64) *UsersSearchBuilder {
	b.Params["birth_year"] = v
	return b
}

// '1' — online only, '0' — all users
func (b *UsersSearchBuilder) Online(v bool) *UsersSearchBuilder {
	b.Params["online"] = v
	return b
}

// '1' — with photo only, '0' — all users
func (b *UsersSearchBuilder) HasPhoto(v bool) *UsersSearchBuilder {
	b.Params["has_photo"] = v
	return b
}

// ID of the country where users finished school.
func (b *UsersSearchBuilder) SchoolCountry(v int64) *UsersSearchBuilder {
	b.Params["school_country"] = v
	return b
}

// ID of the city where users finished school.
func (b *UsersSearchBuilder) SchoolCity(v int64) *UsersSearchBuilder {
	b.Params["school_city"] = v
	return b
}

func (b *UsersSearchBuilder) SchoolClass(v int64) *UsersSearchBuilder {
	b.Params["school_class"] = v
	return b
}

// ID of the school.
func (b *UsersSearchBuilder) School(v int64) *UsersSearchBuilder {
	b.Params["school"] = v
	return b
}

// School graduation year.
func (b *UsersSearchBuilder) SchoolYear(v int64) *UsersSearchBuilder {
	b.Params["school_year"] = v
	return b
}

// Users' religious affiliation.
func (b *UsersSearchBuilder) Religion(v string) *UsersSearchBuilder {
	b.Params["religion"] = v
	return b
}

// Name of the company where users work.
func (b *UsersSearchBuilder) Company(v string) *UsersSearchBuilder {
	b.Params["company"] = v
	return b
}

// Job position.
func (b *UsersSearchBuilder) Position(v string) *UsersSearchBuilder {
	b.Params["position"] = v
	return b
}

// ID of a community to search in communities.
func (b *UsersSearchBuilder) GroupID(v int64) *UsersSearchBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *UsersSearchBuilder) FromList(v []string) *UsersSearchBuilder {
	b.Params["from_list"] = v
	return b
}

// UtilsCheckLinkBuilder builder.
//
// Checks whether a link is blocked in VK.
//
// https://vk.com/dev/utils.checkLink
type UtilsCheckLinkBuilder struct {
	api.Params
}

// UtilsCheckLinkBuilder func.
func NewUtilsCheckLinkBuilder() *UtilsCheckLinkBuilder {
	return &UtilsCheckLinkBuilder{api.Params{}}
}

// Link to check (e.g., 'http://google.com').
func (b *UtilsCheckLinkBuilder) URL(v string) *UtilsCheckLinkBuilder {
	b.Params["url"] = v
	return b
}

// UtilsDeleteFromLastShortenedBuilder builder.
//
// Deletes shortened link from user's list.
//
// https://vk.com/dev/utils.deleteFromLastShortened
type UtilsDeleteFromLastShortenedBuilder struct {
	api.Params
}

// UtilsDeleteFromLastShortenedBuilder func.
func NewUtilsDeleteFromLastShortenedBuilder() *UtilsDeleteFromLastShortenedBuilder {
	return &UtilsDeleteFromLastShortenedBuilder{api.Params{}}
}

// Link key (characters after vk.cc/).
func (b *UtilsDeleteFromLastShortenedBuilder) Key(v string) *UtilsDeleteFromLastShortenedBuilder {
	b.Params["key"] = v
	return b
}

// UtilsGetLastShortenedLinksBuilder builder.
//
// Returns a list of user's shortened links.
//
// https://vk.com/dev/utils.getLastShortenedLinks
type UtilsGetLastShortenedLinksBuilder struct {
	api.Params
}

// UtilsGetLastShortenedLinksBuilder func.
func NewUtilsGetLastShortenedLinksBuilder() *UtilsGetLastShortenedLinksBuilder {
	return &UtilsGetLastShortenedLinksBuilder{api.Params{}}
}

// Number of links to return.
func (b *UtilsGetLastShortenedLinksBuilder) Count(v int64) *UtilsGetLastShortenedLinksBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of links.
func (b *UtilsGetLastShortenedLinksBuilder) Offset(v int64) *UtilsGetLastShortenedLinksBuilder {
	b.Params["offset"] = v
	return b
}

// UtilsGetLinkStatsBuilder builder.
//
// Returns stats data for shortened link.
//
// https://vk.com/dev/utils.getLinkStats
type UtilsGetLinkStatsBuilder struct {
	api.Params
}

// UtilsGetLinkStatsBuilder func.
func NewUtilsGetLinkStatsBuilder() *UtilsGetLinkStatsBuilder {
	return &UtilsGetLinkStatsBuilder{api.Params{}}
}

// Link key (characters after vk.cc/).
func (b *UtilsGetLinkStatsBuilder) Key(v string) *UtilsGetLinkStatsBuilder {
	b.Params["key"] = v
	return b
}

// Source of scope
func (b *UtilsGetLinkStatsBuilder) Source(v string) *UtilsGetLinkStatsBuilder {
	b.Params["source"] = v
	return b
}

// Access key for private link stats.
func (b *UtilsGetLinkStatsBuilder) AccessKey(v string) *UtilsGetLinkStatsBuilder {
	b.Params["access_key"] = v
	return b
}

// Interval.
func (b *UtilsGetLinkStatsBuilder) Interval(v string) *UtilsGetLinkStatsBuilder {
	b.Params["interval"] = v
	return b
}

// Number of intervals to return.
func (b *UtilsGetLinkStatsBuilder) IntervalsCount(v int64) *UtilsGetLinkStatsBuilder {
	b.Params["intervals_count"] = v
	return b
}

// 1 — to return extended stats data (sex, age, geo). 0 — to return views number only.
func (b *UtilsGetLinkStatsBuilder) Extended(v bool) *UtilsGetLinkStatsBuilder {
	b.Params["extended"] = v
	return b
}

// UtilsGetServerTimeBuilder builder.
//
// Returns the current time of the VK server.
//
// https://vk.com/dev/utils.getServerTime
type UtilsGetServerTimeBuilder struct {
	api.Params
}

// UtilsGetServerTimeBuilder func.
func NewUtilsGetServerTimeBuilder() *UtilsGetServerTimeBuilder {
	return &UtilsGetServerTimeBuilder{api.Params{}}
}

// UtilsGetShortLinkBuilder builder.
//
// Allows to receive a link shortened via vk.cc.
//
// https://vk.com/dev/utils.getShortLink
type UtilsGetShortLinkBuilder struct {
	api.Params
}

// UtilsGetShortLinkBuilder func.
func NewUtilsGetShortLinkBuilder() *UtilsGetShortLinkBuilder {
	return &UtilsGetShortLinkBuilder{api.Params{}}
}

// URL to be shortened.
func (b *UtilsGetShortLinkBuilder) URL(v string) *UtilsGetShortLinkBuilder {
	b.Params["url"] = v
	return b
}

// 1 — private stats, 0 — public stats.
func (b *UtilsGetShortLinkBuilder) Private(v bool) *UtilsGetShortLinkBuilder {
	b.Params["private"] = v
	return b
}

// UtilsResolveScreenNameBuilder builder.
//
// Detects a type of object (e.g., user, community, application) and its ID by screen name.
//
// https://vk.com/dev/utils.resolveScreenName
type UtilsResolveScreenNameBuilder struct {
	api.Params
}

// UtilsResolveScreenNameBuilder func.
func NewUtilsResolveScreenNameBuilder() *UtilsResolveScreenNameBuilder {
	return &UtilsResolveScreenNameBuilder{api.Params{}}
}

// Screen name of the user, community (e.g., 'apiclub,' 'andrew', or 'rules_of_war'), or application.
func (b *UtilsResolveScreenNameBuilder) ScreenName(v string) *UtilsResolveScreenNameBuilder {
	b.Params["screen_name"] = v
	return b
}

// VideoAddBuilder builder.
//
// Adds a video to a user or community page.
//
// https://vk.com/dev/video.add
type VideoAddBuilder struct {
	api.Params
}

// VideoAddBuilder func.
func NewVideoAddBuilder() *VideoAddBuilder {
	return &VideoAddBuilder{api.Params{}}
}

// identifier of a user or community to add a video to. Use a negative value to designate a community ID.
func (b *VideoAddBuilder) TargetID(v int64) *VideoAddBuilder {
	b.Params["target_id"] = v
	return b
}

// Video ID.
func (b *VideoAddBuilder) VideoID(v int64) *VideoAddBuilder {
	b.Params["video_id"] = v
	return b
}

// ID of the user or community that owns the video. Use a negative value to designate a community ID.
func (b *VideoAddBuilder) OwnerID(v int64) *VideoAddBuilder {
	b.Params["owner_id"] = v
	return b
}

// VideoAddAlbumBuilder builder.
//
// Creates an empty album for videos.
//
// https://vk.com/dev/video.addAlbum
type VideoAddAlbumBuilder struct {
	api.Params
}

// VideoAddAlbumBuilder func.
func NewVideoAddAlbumBuilder() *VideoAddAlbumBuilder {
	return &VideoAddAlbumBuilder{api.Params{}}
}

// Community ID (if the album will be created in a community).
func (b *VideoAddAlbumBuilder) GroupID(v int64) *VideoAddAlbumBuilder {
	b.Params["group_id"] = v
	return b
}

// Album title.
func (b *VideoAddAlbumBuilder) Title(v string) *VideoAddAlbumBuilder {
	b.Params["title"] = v
	return b
}

// new access permissions for the album. Possible values: , *'0' – all users,, *'1' – friends only,, *'2' – friends and friends of friends,, *'3' – "only me".
func (b *VideoAddAlbumBuilder) Privacy(v []string) *VideoAddAlbumBuilder {
	b.Params["privacy"] = v
	return b
}

// VideoAddToAlbumBuilder builder.
//
// https://vk.com/dev/video.addToAlbum
type VideoAddToAlbumBuilder struct {
	api.Params
}

// VideoAddToAlbumBuilder func.
func NewVideoAddToAlbumBuilder() *VideoAddToAlbumBuilder {
	return &VideoAddToAlbumBuilder{api.Params{}}
}

func (b *VideoAddToAlbumBuilder) TargetID(v int64) *VideoAddToAlbumBuilder {
	b.Params["target_id"] = v
	return b
}

func (b *VideoAddToAlbumBuilder) AlbumID(v int64) *VideoAddToAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

func (b *VideoAddToAlbumBuilder) AlbumIDs(v []int64) *VideoAddToAlbumBuilder {
	b.Params["album_ids"] = v
	return b
}

func (b *VideoAddToAlbumBuilder) OwnerID(v int64) *VideoAddToAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *VideoAddToAlbumBuilder) VideoID(v int64) *VideoAddToAlbumBuilder {
	b.Params["video_id"] = v
	return b
}

// VideoCreateCommentBuilder builder.
//
// Adds a new comment on a video.
//
// https://vk.com/dev/video.createComment
type VideoCreateCommentBuilder struct {
	api.Params
}

// VideoCreateCommentBuilder func.
func NewVideoCreateCommentBuilder() *VideoCreateCommentBuilder {
	return &VideoCreateCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoCreateCommentBuilder) OwnerID(v int64) *VideoCreateCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Video ID.
func (b *VideoCreateCommentBuilder) VideoID(v int64) *VideoCreateCommentBuilder {
	b.Params["video_id"] = v
	return b
}

// New comment text.
func (b *VideoCreateCommentBuilder) Message(v string) *VideoCreateCommentBuilder {
	b.Params["message"] = v
	return b
}

// List of objects attached to the comment, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. Example: "photo100172_166443618,photo66748_265827614"
func (b *VideoCreateCommentBuilder) Attachments(v []string) *VideoCreateCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// '1' — to post the comment from a community name (only if 'owner_id'<0)
func (b *VideoCreateCommentBuilder) FromGroup(v bool) *VideoCreateCommentBuilder {
	b.Params["from_group"] = v
	return b
}

func (b *VideoCreateCommentBuilder) ReplyToComment(v int64) *VideoCreateCommentBuilder {
	b.Params["reply_to_comment"] = v
	return b
}

func (b *VideoCreateCommentBuilder) StickerID(v int64) *VideoCreateCommentBuilder {
	b.Params["sticker_id"] = v
	return b
}

func (b *VideoCreateCommentBuilder) Guid(v string) *VideoCreateCommentBuilder {
	b.Params["guid"] = v
	return b
}

// VideoDeleteBuilder builder.
//
// Deletes a video from a user or community page.
//
// https://vk.com/dev/video.delete
type VideoDeleteBuilder struct {
	api.Params
}

// VideoDeleteBuilder func.
func NewVideoDeleteBuilder() *VideoDeleteBuilder {
	return &VideoDeleteBuilder{api.Params{}}
}

// Video ID.
func (b *VideoDeleteBuilder) VideoID(v int64) *VideoDeleteBuilder {
	b.Params["video_id"] = v
	return b
}

// ID of the user or community that owns the video.
func (b *VideoDeleteBuilder) OwnerID(v int64) *VideoDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *VideoDeleteBuilder) TargetID(v int64) *VideoDeleteBuilder {
	b.Params["target_id"] = v
	return b
}

// VideoDeleteAlbumBuilder builder.
//
// Deletes a video album.
//
// https://vk.com/dev/video.deleteAlbum
type VideoDeleteAlbumBuilder struct {
	api.Params
}

// VideoDeleteAlbumBuilder func.
func NewVideoDeleteAlbumBuilder() *VideoDeleteAlbumBuilder {
	return &VideoDeleteAlbumBuilder{api.Params{}}
}

// Community ID (if the album is owned by a community).
func (b *VideoDeleteAlbumBuilder) GroupID(v int64) *VideoDeleteAlbumBuilder {
	b.Params["group_id"] = v
	return b
}

// Album ID.
func (b *VideoDeleteAlbumBuilder) AlbumID(v int64) *VideoDeleteAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

// VideoDeleteCommentBuilder builder.
//
// Deletes a comment on a video.
//
// https://vk.com/dev/video.deleteComment
type VideoDeleteCommentBuilder struct {
	api.Params
}

// VideoDeleteCommentBuilder func.
func NewVideoDeleteCommentBuilder() *VideoDeleteCommentBuilder {
	return &VideoDeleteCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoDeleteCommentBuilder) OwnerID(v int64) *VideoDeleteCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the comment to be deleted.
func (b *VideoDeleteCommentBuilder) CommentID(v int64) *VideoDeleteCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// VideoEditBuilder builder.
//
// Edits information about a video on a user or community page.
//
// https://vk.com/dev/video.edit
type VideoEditBuilder struct {
	api.Params
}

// VideoEditBuilder func.
func NewVideoEditBuilder() *VideoEditBuilder {
	return &VideoEditBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoEditBuilder) OwnerID(v int64) *VideoEditBuilder {
	b.Params["owner_id"] = v
	return b
}

// Video ID.
func (b *VideoEditBuilder) VideoID(v int64) *VideoEditBuilder {
	b.Params["video_id"] = v
	return b
}

// New video title.
func (b *VideoEditBuilder) Name(v string) *VideoEditBuilder {
	b.Params["name"] = v
	return b
}

// New video description.
func (b *VideoEditBuilder) Desc(v string) *VideoEditBuilder {
	b.Params["desc"] = v
	return b
}

// Privacy settings in a [vk.com/dev/privacy_setting|special format]. Privacy setting is available for videos uploaded to own profile by user.
func (b *VideoEditBuilder) PrivacyView(v []string) *VideoEditBuilder {
	b.Params["privacy_view"] = v
	return b
}

// Privacy settings for comments in a [vk.com/dev/privacy_setting|special format].
func (b *VideoEditBuilder) PrivacyComment(v []string) *VideoEditBuilder {
	b.Params["privacy_comment"] = v
	return b
}

// Disable comments for the group video.
func (b *VideoEditBuilder) NoComments(v bool) *VideoEditBuilder {
	b.Params["no_comments"] = v
	return b
}

// '1' — to repeat the playback of the video, '0' — to play the video once,
func (b *VideoEditBuilder) Repeat(v bool) *VideoEditBuilder {
	b.Params["repeat"] = v
	return b
}

// VideoEditAlbumBuilder builder.
//
// Edits the title of a video album.
//
// https://vk.com/dev/video.editAlbum
type VideoEditAlbumBuilder struct {
	api.Params
}

// VideoEditAlbumBuilder func.
func NewVideoEditAlbumBuilder() *VideoEditAlbumBuilder {
	return &VideoEditAlbumBuilder{api.Params{}}
}

// Community ID (if the album edited is owned by a community).
func (b *VideoEditAlbumBuilder) GroupID(v int64) *VideoEditAlbumBuilder {
	b.Params["group_id"] = v
	return b
}

// Album ID.
func (b *VideoEditAlbumBuilder) AlbumID(v int64) *VideoEditAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

// New album title.
func (b *VideoEditAlbumBuilder) Title(v string) *VideoEditAlbumBuilder {
	b.Params["title"] = v
	return b
}

// new access permissions for the album. Possible values: , *'0' – all users,, *'1' – friends only,, *'2' – friends and friends of friends,, *'3' – "only me".
func (b *VideoEditAlbumBuilder) Privacy(v []string) *VideoEditAlbumBuilder {
	b.Params["privacy"] = v
	return b
}

// VideoEditCommentBuilder builder.
//
// Edits the text of a comment on a video.
//
// https://vk.com/dev/video.editComment
type VideoEditCommentBuilder struct {
	api.Params
}

// VideoEditCommentBuilder func.
func NewVideoEditCommentBuilder() *VideoEditCommentBuilder {
	return &VideoEditCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoEditCommentBuilder) OwnerID(v int64) *VideoEditCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *VideoEditCommentBuilder) CommentID(v int64) *VideoEditCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// New comment text.
func (b *VideoEditCommentBuilder) Message(v string) *VideoEditCommentBuilder {
	b.Params["message"] = v
	return b
}

// List of objects attached to the comment, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. Example: "photo100172_166443618,photo66748_265827614"
func (b *VideoEditCommentBuilder) Attachments(v []string) *VideoEditCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// VideoGetBuilder builder.
//
// Returns detailed information about videos.
//
// https://vk.com/dev/video.get
type VideoGetBuilder struct {
	api.Params
}

// VideoGetBuilder func.
func NewVideoGetBuilder() *VideoGetBuilder {
	return &VideoGetBuilder{api.Params{}}
}

// ID of the user or community that owns the video(s).
func (b *VideoGetBuilder) OwnerID(v int64) *VideoGetBuilder {
	b.Params["owner_id"] = v
	return b
}

// Video IDs, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", Use a negative value to designate a community ID. Example: "-4363_136089719,13245770_137352259"
func (b *VideoGetBuilder) Videos(v []string) *VideoGetBuilder {
	b.Params["videos"] = v
	return b
}

// ID of the album containing the video(s).
func (b *VideoGetBuilder) AlbumID(v int64) *VideoGetBuilder {
	b.Params["album_id"] = v
	return b
}

// Number of videos to return.
func (b *VideoGetBuilder) Count(v int64) *VideoGetBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of videos.
func (b *VideoGetBuilder) Offset(v int64) *VideoGetBuilder {
	b.Params["offset"] = v
	return b
}

// '1' — to return an extended response with additional fields
func (b *VideoGetBuilder) Extended(v bool) *VideoGetBuilder {
	b.Params["extended"] = v
	return b
}

// VideoGetAlbumByIDBuilder builder.
//
// Returns video album info
//
// https://vk.com/dev/video.getAlbumById
type VideoGetAlbumByIDBuilder struct {
	api.Params
}

// VideoGetAlbumByIDBuilder func.
func NewVideoGetAlbumByIDBuilder() *VideoGetAlbumByIDBuilder {
	return &VideoGetAlbumByIDBuilder{api.Params{}}
}

// identifier of a user or community to add a video to. Use a negative value to designate a community ID.
func (b *VideoGetAlbumByIDBuilder) OwnerID(v int64) *VideoGetAlbumByIDBuilder {
	b.Params["owner_id"] = v
	return b
}

// Album ID.
func (b *VideoGetAlbumByIDBuilder) AlbumID(v int64) *VideoGetAlbumByIDBuilder {
	b.Params["album_id"] = v
	return b
}

// VideoGetAlbumsBuilder builder.
//
// Returns a list of video albums owned by a user or community.
//
// https://vk.com/dev/video.getAlbums
type VideoGetAlbumsBuilder struct {
	api.Params
}

// VideoGetAlbumsBuilder func.
func NewVideoGetAlbumsBuilder() *VideoGetAlbumsBuilder {
	return &VideoGetAlbumsBuilder{api.Params{}}
}

// ID of the user or community that owns the video album(s).
func (b *VideoGetAlbumsBuilder) OwnerID(v int64) *VideoGetAlbumsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Offset needed to return a specific subset of video albums.
func (b *VideoGetAlbumsBuilder) Offset(v int64) *VideoGetAlbumsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of video albums to return.
func (b *VideoGetAlbumsBuilder) Count(v int64) *VideoGetAlbumsBuilder {
	b.Params["count"] = v
	return b
}

// '1' — to return additional information about album privacy settings for the current user
func (b *VideoGetAlbumsBuilder) Extended(v bool) *VideoGetAlbumsBuilder {
	b.Params["extended"] = v
	return b
}

func (b *VideoGetAlbumsBuilder) NeedSystem(v bool) *VideoGetAlbumsBuilder {
	b.Params["need_system"] = v
	return b
}

// VideoGetAlbumsByVideoBuilder builder.
//
// https://vk.com/dev/video.getAlbumsByVideo
type VideoGetAlbumsByVideoBuilder struct {
	api.Params
}

// VideoGetAlbumsByVideoBuilder func.
func NewVideoGetAlbumsByVideoBuilder() *VideoGetAlbumsByVideoBuilder {
	return &VideoGetAlbumsByVideoBuilder{api.Params{}}
}

func (b *VideoGetAlbumsByVideoBuilder) TargetID(v int64) *VideoGetAlbumsByVideoBuilder {
	b.Params["target_id"] = v
	return b
}

func (b *VideoGetAlbumsByVideoBuilder) OwnerID(v int64) *VideoGetAlbumsByVideoBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *VideoGetAlbumsByVideoBuilder) VideoID(v int64) *VideoGetAlbumsByVideoBuilder {
	b.Params["video_id"] = v
	return b
}

func (b *VideoGetAlbumsByVideoBuilder) Extended(v bool) *VideoGetAlbumsByVideoBuilder {
	b.Params["extended"] = v
	return b
}

// VideoGetCommentsBuilder builder.
//
// Returns a list of comments on a video.
//
// https://vk.com/dev/video.getComments
type VideoGetCommentsBuilder struct {
	api.Params
}

// VideoGetCommentsBuilder func.
func NewVideoGetCommentsBuilder() *VideoGetCommentsBuilder {
	return &VideoGetCommentsBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoGetCommentsBuilder) OwnerID(v int64) *VideoGetCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Video ID.
func (b *VideoGetCommentsBuilder) VideoID(v int64) *VideoGetCommentsBuilder {
	b.Params["video_id"] = v
	return b
}

// '1' — to return an additional 'likes' field
func (b *VideoGetCommentsBuilder) NeedLikes(v bool) *VideoGetCommentsBuilder {
	b.Params["need_likes"] = v
	return b
}

func (b *VideoGetCommentsBuilder) StartCommentID(v int64) *VideoGetCommentsBuilder {
	b.Params["start_comment_id"] = v
	return b
}

// Offset needed to return a specific subset of comments.
func (b *VideoGetCommentsBuilder) Offset(v int64) *VideoGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of comments to return.
func (b *VideoGetCommentsBuilder) Count(v int64) *VideoGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// Sort order: 'asc' — oldest comment first, 'desc' — newest comment first
func (b *VideoGetCommentsBuilder) Sort(v string) *VideoGetCommentsBuilder {
	b.Params["sort"] = v
	return b
}

func (b *VideoGetCommentsBuilder) Extended(v bool) *VideoGetCommentsBuilder {
	b.Params["extended"] = v
	return b
}

func (b *VideoGetCommentsBuilder) Fields(v []string) *VideoGetCommentsBuilder {
	b.Params["fields"] = v
	return b
}

// VideoRemoveFromAlbumBuilder builder.
//
// https://vk.com/dev/video.removeFromAlbum
type VideoRemoveFromAlbumBuilder struct {
	api.Params
}

// VideoRemoveFromAlbumBuilder func.
func NewVideoRemoveFromAlbumBuilder() *VideoRemoveFromAlbumBuilder {
	return &VideoRemoveFromAlbumBuilder{api.Params{}}
}

func (b *VideoRemoveFromAlbumBuilder) TargetID(v int64) *VideoRemoveFromAlbumBuilder {
	b.Params["target_id"] = v
	return b
}

func (b *VideoRemoveFromAlbumBuilder) AlbumID(v int64) *VideoRemoveFromAlbumBuilder {
	b.Params["album_id"] = v
	return b
}

func (b *VideoRemoveFromAlbumBuilder) AlbumIDs(v []int64) *VideoRemoveFromAlbumBuilder {
	b.Params["album_ids"] = v
	return b
}

func (b *VideoRemoveFromAlbumBuilder) OwnerID(v int64) *VideoRemoveFromAlbumBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *VideoRemoveFromAlbumBuilder) VideoID(v int64) *VideoRemoveFromAlbumBuilder {
	b.Params["video_id"] = v
	return b
}

// VideoReorderAlbumsBuilder builder.
//
// Reorders the album in the list of user video albums.
//
// https://vk.com/dev/video.reorderAlbums
type VideoReorderAlbumsBuilder struct {
	api.Params
}

// VideoReorderAlbumsBuilder func.
func NewVideoReorderAlbumsBuilder() *VideoReorderAlbumsBuilder {
	return &VideoReorderAlbumsBuilder{api.Params{}}
}

// ID of the user or community that owns the albums..
func (b *VideoReorderAlbumsBuilder) OwnerID(v int64) *VideoReorderAlbumsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Album ID.
func (b *VideoReorderAlbumsBuilder) AlbumID(v int64) *VideoReorderAlbumsBuilder {
	b.Params["album_id"] = v
	return b
}

// ID of the album before which the album in question shall be placed.
func (b *VideoReorderAlbumsBuilder) Before(v int64) *VideoReorderAlbumsBuilder {
	b.Params["before"] = v
	return b
}

// ID of the album after which the album in question shall be placed.
func (b *VideoReorderAlbumsBuilder) After(v int64) *VideoReorderAlbumsBuilder {
	b.Params["after"] = v
	return b
}

// VideoReorderVideosBuilder builder.
//
// Reorders the video in the video album.
//
// https://vk.com/dev/video.reorderVideos
type VideoReorderVideosBuilder struct {
	api.Params
}

// VideoReorderVideosBuilder func.
func NewVideoReorderVideosBuilder() *VideoReorderVideosBuilder {
	return &VideoReorderVideosBuilder{api.Params{}}
}

// ID of the user or community that owns the album with videos.
func (b *VideoReorderVideosBuilder) TargetID(v int64) *VideoReorderVideosBuilder {
	b.Params["target_id"] = v
	return b
}

// ID of the video album.
func (b *VideoReorderVideosBuilder) AlbumID(v int64) *VideoReorderVideosBuilder {
	b.Params["album_id"] = v
	return b
}

// ID of the user or community that owns the video.
func (b *VideoReorderVideosBuilder) OwnerID(v int64) *VideoReorderVideosBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the video.
func (b *VideoReorderVideosBuilder) VideoID(v int64) *VideoReorderVideosBuilder {
	b.Params["video_id"] = v
	return b
}

// ID of the user or community that owns the video before which the video in question shall be placed.
func (b *VideoReorderVideosBuilder) BeforeOwnerID(v int64) *VideoReorderVideosBuilder {
	b.Params["before_owner_id"] = v
	return b
}

// ID of the video before which the video in question shall be placed.
func (b *VideoReorderVideosBuilder) BeforeVideoID(v int64) *VideoReorderVideosBuilder {
	b.Params["before_video_id"] = v
	return b
}

// ID of the user or community that owns the video after which the photo in question shall be placed.
func (b *VideoReorderVideosBuilder) AfterOwnerID(v int64) *VideoReorderVideosBuilder {
	b.Params["after_owner_id"] = v
	return b
}

// ID of the video after which the photo in question shall be placed.
func (b *VideoReorderVideosBuilder) AfterVideoID(v int64) *VideoReorderVideosBuilder {
	b.Params["after_video_id"] = v
	return b
}

// VideoReportBuilder builder.
//
// Reports (submits a complaint about) a video.
//
// https://vk.com/dev/video.report
type VideoReportBuilder struct {
	api.Params
}

// VideoReportBuilder func.
func NewVideoReportBuilder() *VideoReportBuilder {
	return &VideoReportBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoReportBuilder) OwnerID(v int64) *VideoReportBuilder {
	b.Params["owner_id"] = v
	return b
}

// Video ID.
func (b *VideoReportBuilder) VideoID(v int64) *VideoReportBuilder {
	b.Params["video_id"] = v
	return b
}

// Reason for the complaint: '0' – spam, '1' – child pornography, '2' – extremism, '3' – violence, '4' – drug propaganda, '5' – adult material, '6' – insult, abuse
func (b *VideoReportBuilder) Reason(v int64) *VideoReportBuilder {
	b.Params["reason"] = v
	return b
}

// Comment describing the complaint.
func (b *VideoReportBuilder) Comment(v string) *VideoReportBuilder {
	b.Params["comment"] = v
	return b
}

// (If the video was found in search results.) Search query string.
func (b *VideoReportBuilder) SearchQuery(v string) *VideoReportBuilder {
	b.Params["search_query"] = v
	return b
}

// VideoReportCommentBuilder builder.
//
// Reports (submits a complaint about) a comment on a video.
//
// https://vk.com/dev/video.reportComment
type VideoReportCommentBuilder struct {
	api.Params
}

// VideoReportCommentBuilder func.
func NewVideoReportCommentBuilder() *VideoReportCommentBuilder {
	return &VideoReportCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoReportCommentBuilder) OwnerID(v int64) *VideoReportCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the comment being reported.
func (b *VideoReportCommentBuilder) CommentID(v int64) *VideoReportCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Reason for the complaint: , 0 – spam , 1 – child pornography , 2 – extremism , 3 – violence , 4 – drug propaganda , 5 – adult material , 6 – insult, abuse
func (b *VideoReportCommentBuilder) Reason(v int64) *VideoReportCommentBuilder {
	b.Params["reason"] = v
	return b
}

// VideoRestoreBuilder builder.
//
// Restores a previously deleted video.
//
// https://vk.com/dev/video.restore
type VideoRestoreBuilder struct {
	api.Params
}

// VideoRestoreBuilder func.
func NewVideoRestoreBuilder() *VideoRestoreBuilder {
	return &VideoRestoreBuilder{api.Params{}}
}

// Video ID.
func (b *VideoRestoreBuilder) VideoID(v int64) *VideoRestoreBuilder {
	b.Params["video_id"] = v
	return b
}

// ID of the user or community that owns the video.
func (b *VideoRestoreBuilder) OwnerID(v int64) *VideoRestoreBuilder {
	b.Params["owner_id"] = v
	return b
}

// VideoRestoreCommentBuilder builder.
//
// Restores a previously deleted comment on a video.
//
// https://vk.com/dev/video.restoreComment
type VideoRestoreCommentBuilder struct {
	api.Params
}

// VideoRestoreCommentBuilder func.
func NewVideoRestoreCommentBuilder() *VideoRestoreCommentBuilder {
	return &VideoRestoreCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the video.
func (b *VideoRestoreCommentBuilder) OwnerID(v int64) *VideoRestoreCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the deleted comment.
func (b *VideoRestoreCommentBuilder) CommentID(v int64) *VideoRestoreCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// VideoSaveBuilder builder.
//
// Returns a server address (required for upload) and video data.
//
// https://vk.com/dev/video.save
type VideoSaveBuilder struct {
	api.Params
}

// VideoSaveBuilder func.
func NewVideoSaveBuilder() *VideoSaveBuilder {
	return &VideoSaveBuilder{api.Params{}}
}

// Name of the video.
func (b *VideoSaveBuilder) Name(v string) *VideoSaveBuilder {
	b.Params["name"] = v
	return b
}

// Description of the video.
func (b *VideoSaveBuilder) Description(v string) *VideoSaveBuilder {
	b.Params["description"] = v
	return b
}

// '1' — to designate the video as private (send it via a private message), the video will not appear on the user's video list and will not be available by ID for other users, '0' — not to designate the video as private
func (b *VideoSaveBuilder) IsPrivate(v bool) *VideoSaveBuilder {
	b.Params["is_private"] = v
	return b
}

// '1' — to post the saved video on a user's wall, '0' — not to post the saved video on a user's wall
func (b *VideoSaveBuilder) Wallpost(v bool) *VideoSaveBuilder {
	b.Params["wallpost"] = v
	return b
}

// URL for embedding the video from an external website.
func (b *VideoSaveBuilder) Link(v string) *VideoSaveBuilder {
	b.Params["link"] = v
	return b
}

// ID of the community in which the video will be saved. By default, the current user's page.
func (b *VideoSaveBuilder) GroupID(v int64) *VideoSaveBuilder {
	b.Params["group_id"] = v
	return b
}

// ID of the album to which the saved video will be added.
func (b *VideoSaveBuilder) AlbumID(v int64) *VideoSaveBuilder {
	b.Params["album_id"] = v
	return b
}

func (b *VideoSaveBuilder) PrivacyView(v []string) *VideoSaveBuilder {
	b.Params["privacy_view"] = v
	return b
}

func (b *VideoSaveBuilder) PrivacyComment(v []string) *VideoSaveBuilder {
	b.Params["privacy_comment"] = v
	return b
}

func (b *VideoSaveBuilder) NoComments(v bool) *VideoSaveBuilder {
	b.Params["no_comments"] = v
	return b
}

// '1' — to repeat the playback of the video, '0' — to play the video once,
func (b *VideoSaveBuilder) Repeat(v bool) *VideoSaveBuilder {
	b.Params["repeat"] = v
	return b
}

func (b *VideoSaveBuilder) Compression(v bool) *VideoSaveBuilder {
	b.Params["compression"] = v
	return b
}

// VideoSearchBuilder builder.
//
// Returns a list of videos under the set search criterion.
//
// https://vk.com/dev/video.search
type VideoSearchBuilder struct {
	api.Params
}

// VideoSearchBuilder func.
func NewVideoSearchBuilder() *VideoSearchBuilder {
	return &VideoSearchBuilder{api.Params{}}
}

// Search query string (e.g., 'The Beatles').
func (b *VideoSearchBuilder) Q(v string) *VideoSearchBuilder {
	b.Params["q"] = v
	return b
}

// Sort order: '1' — by duration, '2' — by relevance, '0' — by date added
func (b *VideoSearchBuilder) Sort(v int64) *VideoSearchBuilder {
	b.Params["sort"] = v
	return b
}

// If not null, only searches for high-definition videos.
func (b *VideoSearchBuilder) Hd(v int64) *VideoSearchBuilder {
	b.Params["hd"] = v
	return b
}

// '1' — to disable the Safe Search filter, '0' — to enable the Safe Search filter
func (b *VideoSearchBuilder) Adult(v bool) *VideoSearchBuilder {
	b.Params["adult"] = v
	return b
}

// Filters to apply: 'youtube' — return YouTube videos only, 'vimeo' — return Vimeo videos only, 'short' — return short videos only, 'long' — return long videos only
func (b *VideoSearchBuilder) Filters(v []string) *VideoSearchBuilder {
	b.Params["filters"] = v
	return b
}

func (b *VideoSearchBuilder) SearchOwn(v bool) *VideoSearchBuilder {
	b.Params["search_own"] = v
	return b
}

// Offset needed to return a specific subset of videos.
func (b *VideoSearchBuilder) Offset(v int64) *VideoSearchBuilder {
	b.Params["offset"] = v
	return b
}

func (b *VideoSearchBuilder) Longer(v int64) *VideoSearchBuilder {
	b.Params["longer"] = v
	return b
}

func (b *VideoSearchBuilder) Shorter(v int64) *VideoSearchBuilder {
	b.Params["shorter"] = v
	return b
}

// Number of videos to return.
func (b *VideoSearchBuilder) Count(v int64) *VideoSearchBuilder {
	b.Params["count"] = v
	return b
}

func (b *VideoSearchBuilder) Extended(v bool) *VideoSearchBuilder {
	b.Params["extended"] = v
	return b
}

// WallCloseCommentsBuilder builder.
//
// https://vk.com/dev/wall.closeComments
type WallCloseCommentsBuilder struct {
	api.Params
}

// WallCloseCommentsBuilder func.
func NewWallCloseCommentsBuilder() *WallCloseCommentsBuilder {
	return &WallCloseCommentsBuilder{api.Params{}}
}

func (b *WallCloseCommentsBuilder) OwnerID(v int64) *WallCloseCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *WallCloseCommentsBuilder) PostID(v int64) *WallCloseCommentsBuilder {
	b.Params["post_id"] = v
	return b
}

// WallCreateCommentBuilder builder.
//
// Adds a comment to a post on a user wall or community wall.
//
// https://vk.com/dev/wall.createComment
type WallCreateCommentBuilder struct {
	api.Params
}

// WallCreateCommentBuilder func.
func NewWallCreateCommentBuilder() *WallCreateCommentBuilder {
	return &WallCreateCommentBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallCreateCommentBuilder) OwnerID(v int64) *WallCreateCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID.
func (b *WallCreateCommentBuilder) PostID(v int64) *WallCreateCommentBuilder {
	b.Params["post_id"] = v
	return b
}

// Group ID.
func (b *WallCreateCommentBuilder) FromGroup(v int64) *WallCreateCommentBuilder {
	b.Params["from_group"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the comment.
func (b *WallCreateCommentBuilder) Message(v string) *WallCreateCommentBuilder {
	b.Params["message"] = v
	return b
}

// ID of comment to reply.
func (b *WallCreateCommentBuilder) ReplyToComment(v int64) *WallCreateCommentBuilder {
	b.Params["reply_to_comment"] = v
	return b
}

// (Required if 'message' is not set.) List of media objects attached to the comment, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media ojbect: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. For example: "photo100172_166443618,photo66748_265827614"
func (b *WallCreateCommentBuilder) Attachments(v []string) *WallCreateCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// Sticker ID.
func (b *WallCreateCommentBuilder) StickerID(v int64) *WallCreateCommentBuilder {
	b.Params["sticker_id"] = v
	return b
}

// Unique identifier to avoid repeated comments.
func (b *WallCreateCommentBuilder) Guid(v string) *WallCreateCommentBuilder {
	b.Params["guid"] = v
	return b
}

// WallDeleteBuilder builder.
//
// Deletes a post from a user wall or community wall.
//
// https://vk.com/dev/wall.delete
type WallDeleteBuilder struct {
	api.Params
}

// WallDeleteBuilder func.
func NewWallDeleteBuilder() *WallDeleteBuilder {
	return &WallDeleteBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallDeleteBuilder) OwnerID(v int64) *WallDeleteBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the post to be deleted.
func (b *WallDeleteBuilder) PostID(v int64) *WallDeleteBuilder {
	b.Params["post_id"] = v
	return b
}

// WallDeleteCommentBuilder builder.
//
// Deletes a comment on a post on a user wall or community wall.
//
// https://vk.com/dev/wall.deleteComment
type WallDeleteCommentBuilder struct {
	api.Params
}

// WallDeleteCommentBuilder func.
func NewWallDeleteCommentBuilder() *WallDeleteCommentBuilder {
	return &WallDeleteCommentBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallDeleteCommentBuilder) OwnerID(v int64) *WallDeleteCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *WallDeleteCommentBuilder) CommentID(v int64) *WallDeleteCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// WallEditBuilder builder.
//
// Edits a post on a user wall or community wall.
//
// https://vk.com/dev/wall.edit
type WallEditBuilder struct {
	api.Params
}

// WallEditBuilder func.
func NewWallEditBuilder() *WallEditBuilder {
	return &WallEditBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallEditBuilder) OwnerID(v int64) *WallEditBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *WallEditBuilder) PostID(v int64) *WallEditBuilder {
	b.Params["post_id"] = v
	return b
}

func (b *WallEditBuilder) FriendsOnly(v bool) *WallEditBuilder {
	b.Params["friends_only"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the post.
func (b *WallEditBuilder) Message(v string) *WallEditBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the post, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: "photo100172_166443618,photo66748_265827614", May contain a link to an external page to include in the post. Example: "photo66748_265827614,http://habrahabr.ru", "NOTE: If more than one link is being attached, an error is thrown."
func (b *WallEditBuilder) Attachments(v []string) *WallEditBuilder {
	b.Params["attachments"] = v
	return b
}

func (b *WallEditBuilder) Services(v string) *WallEditBuilder {
	b.Params["services"] = v
	return b
}

func (b *WallEditBuilder) Signed(v bool) *WallEditBuilder {
	b.Params["signed"] = v
	return b
}

func (b *WallEditBuilder) PublishDate(v int64) *WallEditBuilder {
	b.Params["publish_date"] = v
	return b
}

func (b *WallEditBuilder) Lat(v float64) *WallEditBuilder {
	b.Params["lat"] = v
	return b
}

func (b *WallEditBuilder) Long(v float64) *WallEditBuilder {
	b.Params["long"] = v
	return b
}

func (b *WallEditBuilder) PlaceID(v int64) *WallEditBuilder {
	b.Params["place_id"] = v
	return b
}

func (b *WallEditBuilder) MarkAsAds(v bool) *WallEditBuilder {
	b.Params["mark_as_ads"] = v
	return b
}

func (b *WallEditBuilder) CloseComments(v bool) *WallEditBuilder {
	b.Params["close_comments"] = v
	return b
}

func (b *WallEditBuilder) PosterBkgID(v int64) *WallEditBuilder {
	b.Params["poster_bkg_id"] = v
	return b
}

func (b *WallEditBuilder) PosterBkgOwnerID(v int64) *WallEditBuilder {
	b.Params["poster_bkg_owner_id"] = v
	return b
}

func (b *WallEditBuilder) PosterBkgAccessHash(v string) *WallEditBuilder {
	b.Params["poster_bkg_access_hash"] = v
	return b
}

func (b *WallEditBuilder) Copyright(v string) *WallEditBuilder {
	b.Params["copyright"] = v
	return b
}

// WallEditAdsStealthBuilder builder.
//
// Allows to edit hidden post.
//
// https://vk.com/dev/wall.editAdsStealth
type WallEditAdsStealthBuilder struct {
	api.Params
}

// WallEditAdsStealthBuilder func.
func NewWallEditAdsStealthBuilder() *WallEditAdsStealthBuilder {
	return &WallEditAdsStealthBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallEditAdsStealthBuilder) OwnerID(v int64) *WallEditAdsStealthBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID. Used for publishing of scheduled and suggested posts.
func (b *WallEditAdsStealthBuilder) PostID(v int64) *WallEditAdsStealthBuilder {
	b.Params["post_id"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the post.
func (b *WallEditAdsStealthBuilder) Message(v string) *WallEditAdsStealthBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the post, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: "photo100172_166443618,photo66748_265827614", May contain a link to an external page to include in the post. Example: "photo66748_265827614,http://habrahabr.ru", "NOTE: If more than one link is being attached, an error will be thrown."
func (b *WallEditAdsStealthBuilder) Attachments(v []string) *WallEditAdsStealthBuilder {
	b.Params["attachments"] = v
	return b
}

// Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)
func (b *WallEditAdsStealthBuilder) Signed(v bool) *WallEditAdsStealthBuilder {
	b.Params["signed"] = v
	return b
}

// Geographical latitude of a check-in, in degrees (from -90 to 90).
func (b *WallEditAdsStealthBuilder) Lat(v float64) *WallEditAdsStealthBuilder {
	b.Params["lat"] = v
	return b
}

// Geographical longitude of a check-in, in degrees (from -180 to 180).
func (b *WallEditAdsStealthBuilder) Long(v float64) *WallEditAdsStealthBuilder {
	b.Params["long"] = v
	return b
}

// ID of the location where the user was tagged.
func (b *WallEditAdsStealthBuilder) PlaceID(v int64) *WallEditAdsStealthBuilder {
	b.Params["place_id"] = v
	return b
}

// Link button ID
func (b *WallEditAdsStealthBuilder) LinkButton(v string) *WallEditAdsStealthBuilder {
	b.Params["link_button"] = v
	return b
}

// Link title
func (b *WallEditAdsStealthBuilder) LinkTitle(v string) *WallEditAdsStealthBuilder {
	b.Params["link_title"] = v
	return b
}

// Link image url
func (b *WallEditAdsStealthBuilder) LinkImage(v string) *WallEditAdsStealthBuilder {
	b.Params["link_image"] = v
	return b
}

// Link video ID in format "<owner_id>_<media_id>"
func (b *WallEditAdsStealthBuilder) LinkVideo(v string) *WallEditAdsStealthBuilder {
	b.Params["link_video"] = v
	return b
}

// WallEditCommentBuilder builder.
//
// Edits a comment on a user wall or community wall.
//
// https://vk.com/dev/wall.editComment
type WallEditCommentBuilder struct {
	api.Params
}

// WallEditCommentBuilder func.
func NewWallEditCommentBuilder() *WallEditCommentBuilder {
	return &WallEditCommentBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallEditCommentBuilder) OwnerID(v int64) *WallEditCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *WallEditCommentBuilder) CommentID(v int64) *WallEditCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// New comment text.
func (b *WallEditCommentBuilder) Message(v string) *WallEditCommentBuilder {
	b.Params["message"] = v
	return b
}

// List of objects attached to the comment, in the following format: , "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. For example: "photo100172_166443618,photo66748_265827614"
func (b *WallEditCommentBuilder) Attachments(v []string) *WallEditCommentBuilder {
	b.Params["attachments"] = v
	return b
}

// WallGetBuilder builder.
//
// Returns a list of posts on a user wall or community wall.
//
// https://vk.com/dev/wall.get
type WallGetBuilder struct {
	api.Params
}

// WallGetBuilder func.
func NewWallGetBuilder() *WallGetBuilder {
	return &WallGetBuilder{api.Params{}}
}

// ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.
func (b *WallGetBuilder) OwnerID(v int64) *WallGetBuilder {
	b.Params["owner_id"] = v
	return b
}

// User or community short address.
func (b *WallGetBuilder) Domain(v string) *WallGetBuilder {
	b.Params["domain"] = v
	return b
}

// Offset needed to return a specific subset of posts.
func (b *WallGetBuilder) Offset(v int64) *WallGetBuilder {
	b.Params["offset"] = v
	return b
}

// Number of posts to return (maximum 100).
func (b *WallGetBuilder) Count(v int64) *WallGetBuilder {
	b.Params["count"] = v
	return b
}

// Filter to apply: 'owner' — posts by the wall owner, 'others' — posts by someone else, 'all' — posts by the wall owner and others (default), 'postponed' — timed posts (only available for calls with an 'access_token'), 'suggests' — suggested posts on a community wall
func (b *WallGetBuilder) Filter(v string) *WallGetBuilder {
	b.Params["filter"] = v
	return b
}

// '1' — to return 'wall', 'profiles', and 'groups' fields, '0' — to return no additional fields (default)
func (b *WallGetBuilder) Extended(v bool) *WallGetBuilder {
	b.Params["extended"] = v
	return b
}

func (b *WallGetBuilder) Fields(v []BaseUserGroupFields) *WallGetBuilder {
	b.Params["fields"] = v
	return b
}

// WallGetByIDBuilder builder.
//
// Returns a list of posts from user or community walls by their IDs.
//
// https://vk.com/dev/wall.getById
type WallGetByIDBuilder struct {
	api.Params
}

// WallGetByIDBuilder func.
func NewWallGetByIDBuilder() *WallGetByIDBuilder {
	return &WallGetByIDBuilder{api.Params{}}
}

// User or community IDs and post IDs, separated by underscores. Use a negative value to designate a community ID. Example: "93388_21539,93388_20904,2943_4276,-1_1"
func (b *WallGetByIDBuilder) Posts(v []string) *WallGetByIDBuilder {
	b.Params["posts"] = v
	return b
}

// '1' — to return user and community objects needed to display posts, '0' — no additional fields are returned (default)
func (b *WallGetByIDBuilder) Extended(v bool) *WallGetByIDBuilder {
	b.Params["extended"] = v
	return b
}

// Sets the number of parent elements to include in the array 'copy_history' that is returned if the post is a repost from another wall.
func (b *WallGetByIDBuilder) CopyHistoryDepth(v int64) *WallGetByIDBuilder {
	b.Params["copy_history_depth"] = v
	return b
}

func (b *WallGetByIDBuilder) Fields(v []BaseUserGroupFields) *WallGetByIDBuilder {
	b.Params["fields"] = v
	return b
}

// WallGetCommentBuilder builder.
//
// Returns a comment on a post on a user wall or community wall.
//
// https://vk.com/dev/wall.getComment
type WallGetCommentBuilder struct {
	api.Params
}

// WallGetCommentBuilder func.
func NewWallGetCommentBuilder() *WallGetCommentBuilder {
	return &WallGetCommentBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallGetCommentBuilder) OwnerID(v int64) *WallGetCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *WallGetCommentBuilder) CommentID(v int64) *WallGetCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

func (b *WallGetCommentBuilder) Extended(v bool) *WallGetCommentBuilder {
	b.Params["extended"] = v
	return b
}

func (b *WallGetCommentBuilder) Fields(v []BaseUserGroupFields) *WallGetCommentBuilder {
	b.Params["fields"] = v
	return b
}

// WallGetCommentsBuilder builder.
//
// Returns a list of comments on a post on a user wall or community wall.
//
// https://vk.com/dev/wall.getComments
type WallGetCommentsBuilder struct {
	api.Params
}

// WallGetCommentsBuilder func.
func NewWallGetCommentsBuilder() *WallGetCommentsBuilder {
	return &WallGetCommentsBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallGetCommentsBuilder) OwnerID(v int64) *WallGetCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID.
func (b *WallGetCommentsBuilder) PostID(v int64) *WallGetCommentsBuilder {
	b.Params["post_id"] = v
	return b
}

// '1' — to return the 'likes' field, '0' — not to return the 'likes' field (default)
func (b *WallGetCommentsBuilder) NeedLikes(v bool) *WallGetCommentsBuilder {
	b.Params["need_likes"] = v
	return b
}

func (b *WallGetCommentsBuilder) StartCommentID(v int64) *WallGetCommentsBuilder {
	b.Params["start_comment_id"] = v
	return b
}

// Offset needed to return a specific subset of comments.
func (b *WallGetCommentsBuilder) Offset(v int64) *WallGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of comments to return (maximum 100).
func (b *WallGetCommentsBuilder) Count(v int64) *WallGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// Sort order: 'asc' — chronological, 'desc' — reverse chronological
func (b *WallGetCommentsBuilder) Sort(v string) *WallGetCommentsBuilder {
	b.Params["sort"] = v
	return b
}

// Number of characters at which to truncate comments when previewed. By default, '90'. Specify '0' if you do not want to truncate comments.
func (b *WallGetCommentsBuilder) PreviewLength(v int64) *WallGetCommentsBuilder {
	b.Params["preview_length"] = v
	return b
}

func (b *WallGetCommentsBuilder) Extended(v bool) *WallGetCommentsBuilder {
	b.Params["extended"] = v
	return b
}

func (b *WallGetCommentsBuilder) Fields(v []BaseUserGroupFields) *WallGetCommentsBuilder {
	b.Params["fields"] = v
	return b
}

// Comment ID.
func (b *WallGetCommentsBuilder) CommentID(v int64) *WallGetCommentsBuilder {
	b.Params["comment_id"] = v
	return b
}

// Count items in threads.
func (b *WallGetCommentsBuilder) ThreadItemsCount(v int64) *WallGetCommentsBuilder {
	b.Params["thread_items_count"] = v
	return b
}

// WallGetRepostsBuilder builder.
//
// Returns information about reposts of a post on user wall or community wall.
//
// https://vk.com/dev/wall.getReposts
type WallGetRepostsBuilder struct {
	api.Params
}

// WallGetRepostsBuilder func.
func NewWallGetRepostsBuilder() *WallGetRepostsBuilder {
	return &WallGetRepostsBuilder{api.Params{}}
}

// User ID or community ID. By default, current user ID. Use a negative value to designate a community ID.
func (b *WallGetRepostsBuilder) OwnerID(v int64) *WallGetRepostsBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID.
func (b *WallGetRepostsBuilder) PostID(v int64) *WallGetRepostsBuilder {
	b.Params["post_id"] = v
	return b
}

// Offset needed to return a specific subset of reposts.
func (b *WallGetRepostsBuilder) Offset(v int64) *WallGetRepostsBuilder {
	b.Params["offset"] = v
	return b
}

// Number of reposts to return.
func (b *WallGetRepostsBuilder) Count(v int64) *WallGetRepostsBuilder {
	b.Params["count"] = v
	return b
}

// WallOpenCommentsBuilder builder.
//
// https://vk.com/dev/wall.openComments
type WallOpenCommentsBuilder struct {
	api.Params
}

// WallOpenCommentsBuilder func.
func NewWallOpenCommentsBuilder() *WallOpenCommentsBuilder {
	return &WallOpenCommentsBuilder{api.Params{}}
}

func (b *WallOpenCommentsBuilder) OwnerID(v int64) *WallOpenCommentsBuilder {
	b.Params["owner_id"] = v
	return b
}

func (b *WallOpenCommentsBuilder) PostID(v int64) *WallOpenCommentsBuilder {
	b.Params["post_id"] = v
	return b
}

// WallPinBuilder builder.
//
// Pins the post on wall.
//
// https://vk.com/dev/wall.pin
type WallPinBuilder struct {
	api.Params
}

// WallPinBuilder func.
func NewWallPinBuilder() *WallPinBuilder {
	return &WallPinBuilder{api.Params{}}
}

// ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.
func (b *WallPinBuilder) OwnerID(v int64) *WallPinBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID.
func (b *WallPinBuilder) PostID(v int64) *WallPinBuilder {
	b.Params["post_id"] = v
	return b
}

// WallPostBuilder builder.
//
// Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.
//
// https://vk.com/dev/wall.post
type WallPostBuilder struct {
	api.Params
}

// WallPostBuilder func.
func NewWallPostBuilder() *WallPostBuilder {
	return &WallPostBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallPostBuilder) OwnerID(v int64) *WallPostBuilder {
	b.Params["owner_id"] = v
	return b
}

// '1' — post will be available to friends only, '0' — post will be available to all users (default)
func (b *WallPostBuilder) FriendsOnly(v bool) *WallPostBuilder {
	b.Params["friends_only"] = v
	return b
}

// For a community: '1' — post will be published by the community, '0' — post will be published by the user (default)
func (b *WallPostBuilder) FromGroup(v bool) *WallPostBuilder {
	b.Params["from_group"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the post.
func (b *WallPostBuilder) Message(v string) *WallPostBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the post, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: "photo100172_166443618,photo66748_265827614", May contain a link to an external page to include in the post. Example: "photo66748_265827614,http://habrahabr.ru", "NOTE: If more than one link is being attached, an error will be thrown."
func (b *WallPostBuilder) Attachments(v []string) *WallPostBuilder {
	b.Params["attachments"] = v
	return b
}

// List of services or websites the update will be exported to, if the user has so requested. Sample values: 'twitter', 'facebook'.
func (b *WallPostBuilder) Services(v string) *WallPostBuilder {
	b.Params["services"] = v
	return b
}

// Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)
func (b *WallPostBuilder) Signed(v bool) *WallPostBuilder {
	b.Params["signed"] = v
	return b
}

// Publication date (in Unix time). If used, posting will be delayed until the set time.
func (b *WallPostBuilder) PublishDate(v int64) *WallPostBuilder {
	b.Params["publish_date"] = v
	return b
}

// Geographical latitude of a check-in, in degrees (from -90 to 90).
func (b *WallPostBuilder) Lat(v float64) *WallPostBuilder {
	b.Params["lat"] = v
	return b
}

// Geographical longitude of a check-in, in degrees (from -180 to 180).
func (b *WallPostBuilder) Long(v float64) *WallPostBuilder {
	b.Params["long"] = v
	return b
}

// ID of the location where the user was tagged.
func (b *WallPostBuilder) PlaceID(v int64) *WallPostBuilder {
	b.Params["place_id"] = v
	return b
}

// Post ID. Used for publishing of scheduled and suggested posts.
func (b *WallPostBuilder) PostID(v int64) *WallPostBuilder {
	b.Params["post_id"] = v
	return b
}

func (b *WallPostBuilder) Guid(v string) *WallPostBuilder {
	b.Params["guid"] = v
	return b
}

func (b *WallPostBuilder) MarkAsAds(v bool) *WallPostBuilder {
	b.Params["mark_as_ads"] = v
	return b
}

func (b *WallPostBuilder) CloseComments(v bool) *WallPostBuilder {
	b.Params["close_comments"] = v
	return b
}

func (b *WallPostBuilder) MuteNotifications(v bool) *WallPostBuilder {
	b.Params["mute_notifications"] = v
	return b
}

func (b *WallPostBuilder) Copyright(v string) *WallPostBuilder {
	b.Params["copyright"] = v
	return b
}

// WallPostAdsStealthBuilder builder.
//
// Allows to create hidden post which will not be shown on the community's wall and can be used for creating an ad with type "Community post".
//
// https://vk.com/dev/wall.postAdsStealth
type WallPostAdsStealthBuilder struct {
	api.Params
}

// WallPostAdsStealthBuilder func.
func NewWallPostAdsStealthBuilder() *WallPostAdsStealthBuilder {
	return &WallPostAdsStealthBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallPostAdsStealthBuilder) OwnerID(v int64) *WallPostAdsStealthBuilder {
	b.Params["owner_id"] = v
	return b
}

// (Required if 'attachments' is not set.) Text of the post.
func (b *WallPostAdsStealthBuilder) Message(v string) *WallPostAdsStealthBuilder {
	b.Params["message"] = v
	return b
}

// (Required if 'message' is not set.) List of objects attached to the post, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: "photo100172_166443618,photo66748_265827614", May contain a link to an external page to include in the post. Example: "photo66748_265827614,http://habrahabr.ru", "NOTE: If more than one link is being attached, an error will be thrown."
func (b *WallPostAdsStealthBuilder) Attachments(v []string) *WallPostAdsStealthBuilder {
	b.Params["attachments"] = v
	return b
}

// Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)
func (b *WallPostAdsStealthBuilder) Signed(v bool) *WallPostAdsStealthBuilder {
	b.Params["signed"] = v
	return b
}

// Geographical latitude of a check-in, in degrees (from -90 to 90).
func (b *WallPostAdsStealthBuilder) Lat(v float64) *WallPostAdsStealthBuilder {
	b.Params["lat"] = v
	return b
}

// Geographical longitude of a check-in, in degrees (from -180 to 180).
func (b *WallPostAdsStealthBuilder) Long(v float64) *WallPostAdsStealthBuilder {
	b.Params["long"] = v
	return b
}

// ID of the location where the user was tagged.
func (b *WallPostAdsStealthBuilder) PlaceID(v int64) *WallPostAdsStealthBuilder {
	b.Params["place_id"] = v
	return b
}

// Unique identifier to avoid duplication the same post.
func (b *WallPostAdsStealthBuilder) Guid(v string) *WallPostAdsStealthBuilder {
	b.Params["guid"] = v
	return b
}

// Link button ID
func (b *WallPostAdsStealthBuilder) LinkButton(v string) *WallPostAdsStealthBuilder {
	b.Params["link_button"] = v
	return b
}

// Link title
func (b *WallPostAdsStealthBuilder) LinkTitle(v string) *WallPostAdsStealthBuilder {
	b.Params["link_title"] = v
	return b
}

// Link image url
func (b *WallPostAdsStealthBuilder) LinkImage(v string) *WallPostAdsStealthBuilder {
	b.Params["link_image"] = v
	return b
}

// Link video ID in format "<owner_id>_<media_id>"
func (b *WallPostAdsStealthBuilder) LinkVideo(v string) *WallPostAdsStealthBuilder {
	b.Params["link_video"] = v
	return b
}

// WallReportCommentBuilder builder.
//
// Reports (submits a complaint about) a comment on a post on a user wall or community wall.
//
// https://vk.com/dev/wall.reportComment
type WallReportCommentBuilder struct {
	api.Params
}

// WallReportCommentBuilder func.
func NewWallReportCommentBuilder() *WallReportCommentBuilder {
	return &WallReportCommentBuilder{api.Params{}}
}

// ID of the user or community that owns the wall.
func (b *WallReportCommentBuilder) OwnerID(v int64) *WallReportCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *WallReportCommentBuilder) CommentID(v int64) *WallReportCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// Reason for the complaint: '0' – spam, '1' – child pornography, '2' – extremism, '3' – violence, '4' – drug propaganda, '5' – adult material, '6' – insult, abuse
func (b *WallReportCommentBuilder) Reason(v int64) *WallReportCommentBuilder {
	b.Params["reason"] = v
	return b
}

// WallReportPostBuilder builder.
//
// Reports (submits a complaint about) a post on a user wall or community wall.
//
// https://vk.com/dev/wall.reportPost
type WallReportPostBuilder struct {
	api.Params
}

// WallReportPostBuilder func.
func NewWallReportPostBuilder() *WallReportPostBuilder {
	return &WallReportPostBuilder{api.Params{}}
}

// ID of the user or community that owns the wall.
func (b *WallReportPostBuilder) OwnerID(v int64) *WallReportPostBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID.
func (b *WallReportPostBuilder) PostID(v int64) *WallReportPostBuilder {
	b.Params["post_id"] = v
	return b
}

// Reason for the complaint: '0' – spam, '1' – child pornography, '2' – extremism, '3' – violence, '4' – drug propaganda, '5' – adult material, '6' – insult, abuse
func (b *WallReportPostBuilder) Reason(v int64) *WallReportPostBuilder {
	b.Params["reason"] = v
	return b
}

// WallRepostBuilder builder.
//
// Reposts (copies) an object to a user wall or community wall.
//
// https://vk.com/dev/wall.repost
type WallRepostBuilder struct {
	api.Params
}

// WallRepostBuilder func.
func NewWallRepostBuilder() *WallRepostBuilder {
	return &WallRepostBuilder{api.Params{}}
}

// ID of the object to be reposted on the wall. Example: "wall66748_3675"
func (b *WallRepostBuilder) Object(v string) *WallRepostBuilder {
	b.Params["object"] = v
	return b
}

// Comment to be added along with the reposted object.
func (b *WallRepostBuilder) Message(v string) *WallRepostBuilder {
	b.Params["message"] = v
	return b
}

// Target community ID when reposting to a community.
func (b *WallRepostBuilder) GroupID(v int64) *WallRepostBuilder {
	b.Params["group_id"] = v
	return b
}

func (b *WallRepostBuilder) MarkAsAds(v bool) *WallRepostBuilder {
	b.Params["mark_as_ads"] = v
	return b
}

func (b *WallRepostBuilder) MuteNotifications(v bool) *WallRepostBuilder {
	b.Params["mute_notifications"] = v
	return b
}

// WallRestoreBuilder builder.
//
// Restores a post deleted from a user wall or community wall.
//
// https://vk.com/dev/wall.restore
type WallRestoreBuilder struct {
	api.Params
}

// WallRestoreBuilder func.
func NewWallRestoreBuilder() *WallRestoreBuilder {
	return &WallRestoreBuilder{api.Params{}}
}

// User ID or community ID from whose wall the post was deleted. Use a negative value to designate a community ID.
func (b *WallRestoreBuilder) OwnerID(v int64) *WallRestoreBuilder {
	b.Params["owner_id"] = v
	return b
}

// ID of the post to be restored.
func (b *WallRestoreBuilder) PostID(v int64) *WallRestoreBuilder {
	b.Params["post_id"] = v
	return b
}

// WallRestoreCommentBuilder builder.
//
// Restores a comment deleted from a user wall or community wall.
//
// https://vk.com/dev/wall.restoreComment
type WallRestoreCommentBuilder struct {
	api.Params
}

// WallRestoreCommentBuilder func.
func NewWallRestoreCommentBuilder() *WallRestoreCommentBuilder {
	return &WallRestoreCommentBuilder{api.Params{}}
}

// User ID or community ID. Use a negative value to designate a community ID.
func (b *WallRestoreCommentBuilder) OwnerID(v int64) *WallRestoreCommentBuilder {
	b.Params["owner_id"] = v
	return b
}

// Comment ID.
func (b *WallRestoreCommentBuilder) CommentID(v int64) *WallRestoreCommentBuilder {
	b.Params["comment_id"] = v
	return b
}

// WallSearchBuilder builder.
//
// Allows to search posts on user or community walls.
//
// https://vk.com/dev/wall.search
type WallSearchBuilder struct {
	api.Params
}

// WallSearchBuilder func.
func NewWallSearchBuilder() *WallSearchBuilder {
	return &WallSearchBuilder{api.Params{}}
}

// user or community id. "Remember that for a community 'owner_id' must be negative."
func (b *WallSearchBuilder) OwnerID(v int64) *WallSearchBuilder {
	b.Params["owner_id"] = v
	return b
}

// user or community screen name.
func (b *WallSearchBuilder) Domain(v string) *WallSearchBuilder {
	b.Params["domain"] = v
	return b
}

// search query string.
func (b *WallSearchBuilder) Query(v string) *WallSearchBuilder {
	b.Params["query"] = v
	return b
}

// '1' – returns only page owner's posts.
func (b *WallSearchBuilder) OwnersOnly(v bool) *WallSearchBuilder {
	b.Params["owners_only"] = v
	return b
}

// count of posts to return.
func (b *WallSearchBuilder) Count(v int64) *WallSearchBuilder {
	b.Params["count"] = v
	return b
}

// Offset needed to return a specific subset of posts.
func (b *WallSearchBuilder) Offset(v int64) *WallSearchBuilder {
	b.Params["offset"] = v
	return b
}

// show extended post info.
func (b *WallSearchBuilder) Extended(v bool) *WallSearchBuilder {
	b.Params["extended"] = v
	return b
}

func (b *WallSearchBuilder) Fields(v []BaseUserGroupFields) *WallSearchBuilder {
	b.Params["fields"] = v
	return b
}

// WallUnpinBuilder builder.
//
// Unpins the post on wall.
//
// https://vk.com/dev/wall.unpin
type WallUnpinBuilder struct {
	api.Params
}

// WallUnpinBuilder func.
func NewWallUnpinBuilder() *WallUnpinBuilder {
	return &WallUnpinBuilder{api.Params{}}
}

// ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.
func (b *WallUnpinBuilder) OwnerID(v int64) *WallUnpinBuilder {
	b.Params["owner_id"] = v
	return b
}

// Post ID.
func (b *WallUnpinBuilder) PostID(v int64) *WallUnpinBuilder {
	b.Params["post_id"] = v
	return b
}

// WidgetsGetCommentsBuilder builder.
//
// Gets a list of comments for the page added through the [vk.com/dev/Comments|Comments widget].
//
// https://vk.com/dev/widgets.getComments
type WidgetsGetCommentsBuilder struct {
	api.Params
}

// WidgetsGetCommentsBuilder func.
func NewWidgetsGetCommentsBuilder() *WidgetsGetCommentsBuilder {
	return &WidgetsGetCommentsBuilder{api.Params{}}
}

func (b *WidgetsGetCommentsBuilder) WidgetApiID(v int64) *WidgetsGetCommentsBuilder {
	b.Params["widget_api_id"] = v
	return b
}

func (b *WidgetsGetCommentsBuilder) URL(v string) *WidgetsGetCommentsBuilder {
	b.Params["url"] = v
	return b
}

func (b *WidgetsGetCommentsBuilder) PageID(v string) *WidgetsGetCommentsBuilder {
	b.Params["page_id"] = v
	return b
}

func (b *WidgetsGetCommentsBuilder) Order(v string) *WidgetsGetCommentsBuilder {
	b.Params["order"] = v
	return b
}

func (b *WidgetsGetCommentsBuilder) Fields(v []UsersFields) *WidgetsGetCommentsBuilder {
	b.Params["fields"] = v
	return b
}

func (b *WidgetsGetCommentsBuilder) Offset(v int64) *WidgetsGetCommentsBuilder {
	b.Params["offset"] = v
	return b
}

func (b *WidgetsGetCommentsBuilder) Count(v int64) *WidgetsGetCommentsBuilder {
	b.Params["count"] = v
	return b
}

// WidgetsGetPagesBuilder builder.
//
// Gets a list of application/site pages where the [vk.com/dev/Comments|Comments widget] or [vk.com/dev/Like|Like widget] is installed.
//
// https://vk.com/dev/widgets.getPages
type WidgetsGetPagesBuilder struct {
	api.Params
}

// WidgetsGetPagesBuilder func.
func NewWidgetsGetPagesBuilder() *WidgetsGetPagesBuilder {
	return &WidgetsGetPagesBuilder{api.Params{}}
}

func (b *WidgetsGetPagesBuilder) WidgetApiID(v int64) *WidgetsGetPagesBuilder {
	b.Params["widget_api_id"] = v
	return b
}

func (b *WidgetsGetPagesBuilder) Order(v string) *WidgetsGetPagesBuilder {
	b.Params["order"] = v
	return b
}

func (b *WidgetsGetPagesBuilder) Period(v string) *WidgetsGetPagesBuilder {
	b.Params["period"] = v
	return b
}

func (b *WidgetsGetPagesBuilder) Offset(v int64) *WidgetsGetPagesBuilder {
	b.Params["offset"] = v
	return b
}

func (b *WidgetsGetPagesBuilder) Count(v int64) *WidgetsGetPagesBuilder {
	b.Params["count"] = v
	return b
}
