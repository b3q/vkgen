// Code generated by vkgen; DO NOT EDIT.

package generated

func (vk *VK) AccountBanSafe(req AccountBan) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.ban", req.params(), &response)
	return
}

// Changes a user password after access is successfully restored with the [vk.com/dev/auth.restore|auth.restore] method.
func (vk *VK) AccountChangePasswordSafe(req AccountChangePassword) (response AccountChangePasswordResponse, err error) {
	err = vk.RequestUnmarshal("account.changePassword", req.params(), &response)
	return
}

// Returns a list of active ads (offers) which executed by the user will bring him/her respective number of votes to his balance in the application.
func (vk *VK) AccountGetActiveOffersSafe(req AccountGetActiveOffers) (response AccountGetActiveOffersResponse, err error) {
	err = vk.RequestUnmarshal("account.getActiveOffers", req.params(), &response)
	return
}

// Gets settings of the user in this application.
func (vk *VK) AccountGetAppPermissionsSafe(req AccountGetAppPermissions) (response AccountGetAppPermissionsResponse, err error) {
	err = vk.RequestUnmarshal("account.getAppPermissions", req.params(), &response)
	return
}

// Returns a user's blacklist.
func (vk *VK) AccountGetBannedSafe(req AccountGetBanned) (response AccountGetBannedResponse, err error) {
	err = vk.RequestUnmarshal("account.getBanned", req.params(), &response)
	return
}

// Returns non-null values of user counters.
func (vk *VK) AccountGetCountersSafe(req AccountGetCounters) (response AccountGetCountersResponse, err error) {
	err = vk.RequestUnmarshal("account.getCounters", req.params(), &response)
	return
}

// Returns current account info.
func (vk *VK) AccountGetInfoSafe(req AccountGetInfo) (response AccountGetInfoResponse, err error) {
	err = vk.RequestUnmarshal("account.getInfo", req.params(), &response)
	return
}

// Returns the current account info.
func (vk *VK) AccountGetProfileInfoSafe(req AccountGetProfileInfo) (response AccountGetProfileInfoResponse, err error) {
	err = vk.RequestUnmarshal("account.getProfileInfo", req.params(), &response)
	return
}

// Gets settings of push notifications.
func (vk *VK) AccountGetPushSettingsSafe(req AccountGetPushSettings) (response AccountGetPushSettingsResponse, err error) {
	err = vk.RequestUnmarshal("account.getPushSettings", req.params(), &response)
	return
}

// Subscribes an iOS/Android/Windows Phone-based device to receive push notifications
func (vk *VK) AccountRegisterDeviceSafe(req AccountRegisterDevice) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.registerDevice", req.params(), &response)
	return
}

// Edits current profile info.
func (vk *VK) AccountSaveProfileInfoSafe(req AccountSaveProfileInfo) (response AccountSaveProfileInfoResponse, err error) {
	err = vk.RequestUnmarshal("account.saveProfileInfo", req.params(), &response)
	return
}

// Allows to edit the current account info.
func (vk *VK) AccountSetInfoSafe(req AccountSetInfo) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setInfo", req.params(), &response)
	return
}

// Sets an application screen name (up to 17 characters), that is shown to the user in the left menu.
func (vk *VK) AccountSetNameInMenuSafe(req AccountSetNameInMenu) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setNameInMenu", req.params(), &response)
	return
}

// Marks a current user as offline.
func (vk *VK) AccountSetOfflineSafe(req AccountSetOffline) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setOffline", req.params(), &response)
	return
}

// Marks the current user as online for 15 minutes.
func (vk *VK) AccountSetOnlineSafe(req AccountSetOnline) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setOnline", req.params(), &response)
	return
}

// Change push settings.
func (vk *VK) AccountSetPushSettingsSafe(req AccountSetPushSettings) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setPushSettings", req.params(), &response)
	return
}

// Mutes push notifications for the set period of time.
func (vk *VK) AccountSetSilenceModeSafe(req AccountSetSilenceMode) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.setSilenceMode", req.params(), &response)
	return
}

func (vk *VK) AccountUnbanSafe(req AccountUnban) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.unban", req.params(), &response)
	return
}

// Unsubscribes a device from push notifications.
func (vk *VK) AccountUnregisterDeviceSafe(req AccountUnregisterDevice) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("account.unregisterDevice", req.params(), &response)
	return
}

// Adds managers and/or supervisors to advertising account.
func (vk *VK) AdsAddOfficeUsersSafe(req AdsAddOfficeUsers) (response AdsAddOfficeUsersResponse, err error) {
	err = vk.RequestUnmarshal("ads.addOfficeUsers", req.params(), &response)
	return
}

// Allows to check the ad link.
func (vk *VK) AdsCheckLinkSafe(req AdsCheckLink) (response AdsCheckLinkResponse, err error) {
	err = vk.RequestUnmarshal("ads.checkLink", req.params(), &response)
	return
}

// Creates ads.
func (vk *VK) AdsCreateAdsSafe(req AdsCreateAds) (response AdsCreateAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.createAds", req.params(), &response)
	return
}

// Creates advertising campaigns.
func (vk *VK) AdsCreateCampaignsSafe(req AdsCreateCampaigns) (response AdsCreateCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.createCampaigns", req.params(), &response)
	return
}

// Creates clients of an advertising agency.
func (vk *VK) AdsCreateClientsSafe(req AdsCreateClients) (response AdsCreateClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.createClients", req.params(), &response)
	return
}

// Creates a group to re-target ads for users who visited advertiser's site (viewed information about the product, registered, etc.).
func (vk *VK) AdsCreateTargetGroupSafe(req AdsCreateTargetGroup) (response AdsCreateTargetGroupResponse, err error) {
	err = vk.RequestUnmarshal("ads.createTargetGroup", req.params(), &response)
	return
}

// Archives ads.
func (vk *VK) AdsDeleteAdsSafe(req AdsDeleteAds) (response AdsDeleteAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteAds", req.params(), &response)
	return
}

// Archives advertising campaigns.
func (vk *VK) AdsDeleteCampaignsSafe(req AdsDeleteCampaigns) (response AdsDeleteCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteCampaigns", req.params(), &response)
	return
}

// Archives clients of an advertising agency.
func (vk *VK) AdsDeleteClientsSafe(req AdsDeleteClients) (response AdsDeleteClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteClients", req.params(), &response)
	return
}

// Deletes a retarget group.
func (vk *VK) AdsDeleteTargetGroupSafe(req AdsDeleteTargetGroup) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("ads.deleteTargetGroup", req.params(), &response)
	return
}

// Returns a list of advertising accounts.
func (vk *VK) AdsGetAccountsSafe(req AdsGetAccounts) (response AdsGetAccountsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAccounts", req.params(), &response)
	return
}

// Returns number of ads.
func (vk *VK) AdsGetAdsSafe(req AdsGetAds) (response AdsGetAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAds", req.params(), &response)
	return
}

// Returns descriptions of ad layouts.
func (vk *VK) AdsGetAdsLayoutSafe(req AdsGetAdsLayout) (response AdsGetAdsLayoutResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAdsLayout", req.params(), &response)
	return
}

// Returns ad targeting parameters.
func (vk *VK) AdsGetAdsTargetingSafe(req AdsGetAdsTargeting) (response AdsGetAdsTargetingResponse, err error) {
	err = vk.RequestUnmarshal("ads.getAdsTargeting", req.params(), &response)
	return
}

// Returns current budget of the advertising account.
func (vk *VK) AdsGetBudgetSafe(req AdsGetBudget) (response AdsGetBudgetResponse, err error) {
	err = vk.RequestUnmarshal("ads.getBudget", req.params(), &response)
	return
}

// Returns a list of campaigns in an advertising account.
func (vk *VK) AdsGetCampaignsSafe(req AdsGetCampaigns) (response AdsGetCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getCampaigns", req.params(), &response)
	return
}

// Returns a list of possible ad categories.
func (vk *VK) AdsGetCategoriesSafe(req AdsGetCategories) (response AdsGetCategoriesResponse, err error) {
	err = vk.RequestUnmarshal("ads.getCategories", req.params(), &response)
	return
}

// Returns a list of advertising agency's clients.
func (vk *VK) AdsGetClientsSafe(req AdsGetClients) (response AdsGetClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getClients", req.params(), &response)
	return
}

// Returns demographics for ads or campaigns.
func (vk *VK) AdsGetDemographicsSafe(req AdsGetDemographics) (response AdsGetDemographicsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getDemographics", req.params(), &response)
	return
}

// Returns information about current state of a counter â€” number of remaining runs of methods and time to the next counter nulling in seconds.
func (vk *VK) AdsGetFloodStatsSafe(req AdsGetFloodStats) (response AdsGetFloodStatsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getFloodStats", req.params(), &response)
	return
}

func (vk *VK) AdsGetLookalikeRequestsSafe(req AdsGetLookalikeRequests) (response AdsGetLookalikeRequestsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getLookalikeRequests", req.params(), &response)
	return
}

func (vk *VK) AdsGetMusiciansSafe(req AdsGetMusicians) (response AdsGetMusiciansResponse, err error) {
	err = vk.RequestUnmarshal("ads.getMusicians", req.params(), &response)
	return
}

// Returns a list of managers and supervisors of advertising account.
func (vk *VK) AdsGetOfficeUsersSafe(req AdsGetOfficeUsers) (response AdsGetOfficeUsersResponse, err error) {
	err = vk.RequestUnmarshal("ads.getOfficeUsers", req.params(), &response)
	return
}

// Returns detailed statistics of promoted posts reach from campaigns and ads.
func (vk *VK) AdsGetPostsReachSafe(req AdsGetPostsReach) (response AdsGetPostsReachResponse, err error) {
	err = vk.RequestUnmarshal("ads.getPostsReach", req.params(), &response)
	return
}

// Returns a reason of ad rejection for pre-moderation.
func (vk *VK) AdsGetRejectionReasonSafe(req AdsGetRejectionReason) (response AdsGetRejectionReasonResponse, err error) {
	err = vk.RequestUnmarshal("ads.getRejectionReason", req.params(), &response)
	return
}

// Returns statistics of performance indicators for ads, campaigns, clients or the whole account.
func (vk *VK) AdsGetStatisticsSafe(req AdsGetStatistics) (response AdsGetStatisticsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getStatistics", req.params(), &response)
	return
}

// Returns a set of auto-suggestions for various targeting parameters.
func (vk *VK) AdsGetSuggestionsSafe(req AdsGetSuggestions) (response AdsGetSuggestionsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getSuggestions", req.params(), &response)
	return
}

// Returns a set of auto-suggestions for various targeting parameters.
func (vk *VK) AdsGetSuggestionsRegionsSafe(req AdsGetSuggestions) (response AdsGetSuggestionsRegionsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getSuggestions", req.params(), &response)
	return
}

// Returns a set of auto-suggestions for various targeting parameters.
func (vk *VK) AdsGetSuggestionsCitiesSafe(req AdsGetSuggestions) (response AdsGetSuggestionsCitiesResponse, err error) {
	err = vk.RequestUnmarshal("ads.getSuggestions", req.params(), &response)
	return
}

// Returns a set of auto-suggestions for various targeting parameters.
func (vk *VK) AdsGetSuggestionsSchoolsSafe(req AdsGetSuggestions) (response AdsGetSuggestionsSchoolsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getSuggestions", req.params(), &response)
	return
}

// Returns a list of target groups.
func (vk *VK) AdsGetTargetGroupsSafe(req AdsGetTargetGroups) (response AdsGetTargetGroupsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getTargetGroups", req.params(), &response)
	return
}

// Returns the size of targeting audience, and also recommended values for CPC and CPM.
func (vk *VK) AdsGetTargetingStatsSafe(req AdsGetTargetingStats) (response AdsGetTargetingStatsResponse, err error) {
	err = vk.RequestUnmarshal("ads.getTargetingStats", req.params(), &response)
	return
}

// Returns URL to upload an ad photo to.
func (vk *VK) AdsGetUploadURLSafe(req AdsGetUploadURL) (response AdsGetUploadURLResponse, err error) {
	err = vk.RequestUnmarshal("ads.getUploadURL", req.params(), &response)
	return
}

// Returns URL to upload an ad video to.
func (vk *VK) AdsGetVideoUploadURLSafe(req AdsGetVideoUploadURL) (response AdsGetVideoUploadURLResponse, err error) {
	err = vk.RequestUnmarshal("ads.getVideoUploadURL", req.params(), &response)
	return
}

// Imports a list of advertiser's contacts to count VK registered users against the target group.
func (vk *VK) AdsImportTargetContactsSafe(req AdsImportTargetContacts) (response AdsImportTargetContactsResponse, err error) {
	err = vk.RequestUnmarshal("ads.importTargetContacts", req.params(), &response)
	return
}

// Removes managers and/or supervisors from advertising account.
func (vk *VK) AdsRemoveOfficeUsersSafe(req AdsRemoveOfficeUsers) (response AdsRemoveOfficeUsersResponse, err error) {
	err = vk.RequestUnmarshal("ads.removeOfficeUsers", req.params(), &response)
	return
}

// Edits ads.
func (vk *VK) AdsUpdateAdsSafe(req AdsUpdateAds) (response AdsUpdateAdsResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateAds", req.params(), &response)
	return
}

// Edits advertising campaigns.
func (vk *VK) AdsUpdateCampaignsSafe(req AdsUpdateCampaigns) (response AdsUpdateCampaignsResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateCampaigns", req.params(), &response)
	return
}

// Edits clients of an advertising agency.
func (vk *VK) AdsUpdateClientsSafe(req AdsUpdateClients) (response AdsUpdateClientsResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateClients", req.params(), &response)
	return
}

// Edits a retarget group.
func (vk *VK) AdsUpdateTargetGroupSafe(req AdsUpdateTargetGroup) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("ads.updateTargetGroup", req.params(), &response)
	return
}

// Allows to update community app widget
func (vk *VK) AppWidgetsUpdateSafe(req AppWidgetsUpdate) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("appWidgets.update", req.params(), &response)
	return
}

// Deletes all request notifications from the current app.
func (vk *VK) AppsDeleteAppRequestsSafe(req AppsDeleteAppRequests) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("apps.deleteAppRequests", req.params(), &response)
	return
}

// Returns applications data.
func (vk *VK) AppsGetSafe(req AppsGet) (response AppsGetResponse, err error) {
	err = vk.RequestUnmarshal("apps.get", req.params(), &response)
	return
}

// Returns a list of applications (apps) available to users in the App Catalog.
func (vk *VK) AppsGetCatalogSafe(req AppsGetCatalog) (response AppsGetCatalogResponse, err error) {
	err = vk.RequestUnmarshal("apps.getCatalog", req.params(), &response)
	return
}

// Creates friends list for requests and invites in current app.
func (vk *VK) AppsGetFriendsListSafe(req AppsGetFriendsList) (response AppsGetFriendsListResponse, err error) {
	err = vk.RequestUnmarshal("apps.getFriendsList", req.params(), &response)
	return
}

// Returns players rating in the game.
func (vk *VK) AppsGetLeaderboardSafe(req AppsGetLeaderboard) (response AppsGetLeaderboardResponse, err error) {
	err = vk.RequestUnmarshal("apps.getLeaderboard", req.params(), &response)
	return
}

// Returns players rating in the game.
func (vk *VK) AppsGetLeaderboardExtendedSafe(req AppsGetLeaderboard) (response AppsGetLeaderboardExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("apps.getLeaderboard", params, &response)
	return
}

// Returns scopes for auth
func (vk *VK) AppsGetScopesSafe(req AppsGetScopes) (response AppsGetScopesResponse, err error) {
	err = vk.RequestUnmarshal("apps.getScopes", req.params(), &response)
	return
}

// Returns user score in app
func (vk *VK) AppsGetScoreSafe(req AppsGetScore) (response AppsGetScoreResponse, err error) {
	err = vk.RequestUnmarshal("apps.getScore", req.params(), &response)
	return
}

func (vk *VK) AppsPromoHasActiveGiftSafe(req AppsPromoHasActiveGift) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("apps.promoHasActiveGift", req.params(), &response)
	return
}

func (vk *VK) AppsPromoUseGiftSafe(req AppsPromoUseGift) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("apps.promoUseGift", req.params(), &response)
	return
}

// Sends a request to another user in an app that uses VK authorization.
func (vk *VK) AppsSendRequestSafe(req AppsSendRequest) (response AppsSendRequestResponse, err error) {
	err = vk.RequestUnmarshal("apps.sendRequest", req.params(), &response)
	return
}

// Checks a user's phone number for correctness.
func (vk *VK) AuthCheckPhoneSafe(req AuthCheckPhone) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("auth.checkPhone", req.params(), &response)
	return
}

// Allows to restore account access using a code received via SMS. " This method is only available for apps with [vk.com/dev/auth_direct|Direct authorization] access. "
func (vk *VK) AuthRestoreSafe(req AuthRestore) (response AuthRestoreResponse, err error) {
	err = vk.RequestUnmarshal("auth.restore", req.params(), &response)
	return
}

// Creates a new topic on a community's discussion board.
func (vk *VK) BoardAddTopicSafe(req BoardAddTopic) (response BoardAddTopicResponse, err error) {
	err = vk.RequestUnmarshal("board.addTopic", req.params(), &response)
	return
}

// Closes a topic on a community's discussion board so that comments cannot be posted.
func (vk *VK) BoardCloseTopicSafe(req BoardCloseTopic) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.closeTopic", req.params(), &response)
	return
}

// Adds a comment on a topic on a community's discussion board.
func (vk *VK) BoardCreateCommentSafe(req BoardCreateComment) (response BoardCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("board.createComment", req.params(), &response)
	return
}

// Deletes a comment on a topic on a community's discussion board.
func (vk *VK) BoardDeleteCommentSafe(req BoardDeleteComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.deleteComment", req.params(), &response)
	return
}

// Deletes a topic from a community's discussion board.
func (vk *VK) BoardDeleteTopicSafe(req BoardDeleteTopic) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.deleteTopic", req.params(), &response)
	return
}

// Edits a comment on a topic on a community's discussion board.
func (vk *VK) BoardEditCommentSafe(req BoardEditComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.editComment", req.params(), &response)
	return
}

// Edits the title of a topic on a community's discussion board.
func (vk *VK) BoardEditTopicSafe(req BoardEditTopic) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.editTopic", req.params(), &response)
	return
}

// Pins a topic (fixes its place) to the top of a community's discussion board.
func (vk *VK) BoardFixTopicSafe(req BoardFixTopic) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.fixTopic", req.params(), &response)
	return
}

// Returns a list of comments on a topic on a community's discussion board.
func (vk *VK) BoardGetCommentsSafe(req BoardGetComments) (response BoardGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("board.getComments", req.params(), &response)
	return
}

// Returns a list of comments on a topic on a community's discussion board.
func (vk *VK) BoardGetCommentsExtendedSafe(req BoardGetComments) (response BoardGetCommentsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("board.getComments", params, &response)
	return
}

// Returns a list of topics on a community's discussion board.
func (vk *VK) BoardGetTopicsSafe(req BoardGetTopics) (response BoardGetTopicsResponse, err error) {
	err = vk.RequestUnmarshal("board.getTopics", req.params(), &response)
	return
}

// Returns a list of topics on a community's discussion board.
func (vk *VK) BoardGetTopicsExtendedSafe(req BoardGetTopics) (response BoardGetTopicsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("board.getTopics", params, &response)
	return
}

// Re-opens a previously closed topic on a community's discussion board.
func (vk *VK) BoardOpenTopicSafe(req BoardOpenTopic) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.openTopic", req.params(), &response)
	return
}

// Restores a comment deleted from a topic on a community's discussion board.
func (vk *VK) BoardRestoreCommentSafe(req BoardRestoreComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.restoreComment", req.params(), &response)
	return
}

// Unpins a pinned topic from the top of a community's discussion board.
func (vk *VK) BoardUnfixTopicSafe(req BoardUnfixTopic) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("board.unfixTopic", req.params(), &response)
	return
}

// Returns list of chairs on a specified faculty.
func (vk *VK) DatabaseGetChairsSafe(req DatabaseGetChairs) (response DatabaseGetChairsResponse, err error) {
	err = vk.RequestUnmarshal("database.getChairs", req.params(), &response)
	return
}

// Returns a list of cities.
func (vk *VK) DatabaseGetCitiesSafe(req DatabaseGetCities) (response DatabaseGetCitiesResponse, err error) {
	err = vk.RequestUnmarshal("database.getCities", req.params(), &response)
	return
}

// Returns information about cities by their IDs.
func (vk *VK) DatabaseGetCitiesByIDSafe(req DatabaseGetCitiesByID) (response DatabaseGetCitiesByIDResponse, err error) {
	err = vk.RequestUnmarshal("database.getCitiesById", req.params(), &response)
	return
}

// Returns a list of countries.
func (vk *VK) DatabaseGetCountriesSafe(req DatabaseGetCountries) (response DatabaseGetCountriesResponse, err error) {
	err = vk.RequestUnmarshal("database.getCountries", req.params(), &response)
	return
}

// Returns information about countries by their IDs.
func (vk *VK) DatabaseGetCountriesByIDSafe(req DatabaseGetCountriesByID) (response DatabaseGetCountriesByIDResponse, err error) {
	err = vk.RequestUnmarshal("database.getCountriesById", req.params(), &response)
	return
}

// Returns a list of faculties (i.e., university departments).
func (vk *VK) DatabaseGetFacultiesSafe(req DatabaseGetFaculties) (response DatabaseGetFacultiesResponse, err error) {
	err = vk.RequestUnmarshal("database.getFaculties", req.params(), &response)
	return
}

// Get metro stations by city
func (vk *VK) DatabaseGetMetroStationsSafe(req DatabaseGetMetroStations) (response DatabaseGetMetroStationsResponse, err error) {
	err = vk.RequestUnmarshal("database.getMetroStations", req.params(), &response)
	return
}

// Get metro station by his id
func (vk *VK) DatabaseGetMetroStationsByIDSafe(req DatabaseGetMetroStationsByID) (response DatabaseGetMetroStationsByIDResponse, err error) {
	err = vk.RequestUnmarshal("database.getMetroStationsById", req.params(), &response)
	return
}

// Returns a list of regions.
func (vk *VK) DatabaseGetRegionsSafe(req DatabaseGetRegions) (response DatabaseGetRegionsResponse, err error) {
	err = vk.RequestUnmarshal("database.getRegions", req.params(), &response)
	return
}

// Returns a list of school classes specified for the country.
func (vk *VK) DatabaseGetSchoolClassesSafe(req DatabaseGetSchoolClasses) (response DatabaseGetSchoolClassesResponse, err error) {
	err = vk.RequestUnmarshal("database.getSchoolClasses", req.params(), &response)
	return
}

// Returns a list of schools.
func (vk *VK) DatabaseGetSchoolsSafe(req DatabaseGetSchools) (response DatabaseGetSchoolsResponse, err error) {
	err = vk.RequestUnmarshal("database.getSchools", req.params(), &response)
	return
}

// Returns a list of higher education institutions.
func (vk *VK) DatabaseGetUniversitiesSafe(req DatabaseGetUniversities) (response DatabaseGetUniversitiesResponse, err error) {
	err = vk.RequestUnmarshal("database.getUniversities", req.params(), &response)
	return
}

// Copies a document to a user's or community's document list.
func (vk *VK) DocsAddSafe(req DocsAdd) (response DocsAddResponse, err error) {
	err = vk.RequestUnmarshal("docs.add", req.params(), &response)
	return
}

// Deletes a user or community document.
func (vk *VK) DocsDeleteSafe(req DocsDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("docs.delete", req.params(), &response)
	return
}

// Edits a document.
func (vk *VK) DocsEditSafe(req DocsEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("docs.edit", req.params(), &response)
	return
}

// Returns detailed information about user or community documents.
func (vk *VK) DocsGetSafe(req DocsGet) (response DocsGetResponse, err error) {
	err = vk.RequestUnmarshal("docs.get", req.params(), &response)
	return
}

// Returns information about documents by their IDs.
func (vk *VK) DocsGetByIDSafe(req DocsGetByID) (response DocsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("docs.getById", req.params(), &response)
	return
}

// Returns the server address for document upload.
func (vk *VK) DocsGetMessagesUploadServerSafe(req DocsGetMessagesUploadServer) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("docs.getMessagesUploadServer", req.params(), &response)
	return
}

// Returns documents types available for current user.
func (vk *VK) DocsGetTypesSafe(req DocsGetTypes) (response DocsGetTypesResponse, err error) {
	err = vk.RequestUnmarshal("docs.getTypes", req.params(), &response)
	return
}

// Returns the server address for document upload.
func (vk *VK) DocsGetUploadServerSafe(req DocsGetUploadServer) (response DocsGetUploadServer, err error) {
	err = vk.RequestUnmarshal("docs.getUploadServer", req.params(), &response)
	return
}

// Returns the server address for document upload onto a user's or community's wall.
func (vk *VK) DocsGetWallUploadServerSafe(req DocsGetWallUploadServer) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("docs.getWallUploadServer", req.params(), &response)
	return
}

// Saves a document after [vk.com/dev/upload_files_2|uploading it to a server].
func (vk *VK) DocsSaveSafe(req DocsSave) (response DocsSaveResponse, err error) {
	err = vk.RequestUnmarshal("docs.save", req.params(), &response)
	return
}

// Returns a list of documents matching the search criteria.
func (vk *VK) DocsSearchSafe(req DocsSearch) (response DocsSearchResponse, err error) {
	err = vk.RequestUnmarshal("docs.search", req.params(), &response)
	return
}

func (vk *VK) DownloadedGamesGetPaidStatusSafe(req DownloadedGamesGetPaidStatus) (response DownloadedGamesPaidStatusResponse, err error) {
	err = vk.RequestUnmarshal("downloadedGames.getPaidStatus", req.params(), &response)
	return
}

func (vk *VK) FaveAddArticleSafe(req FaveAddArticle) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addArticle", req.params(), &response)
	return
}

// Adds a link to user faves.
func (vk *VK) FaveAddLinkSafe(req FaveAddLink) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addLink", req.params(), &response)
	return
}

func (vk *VK) FaveAddPageSafe(req FaveAddPage) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addPage", req.params(), &response)
	return
}

func (vk *VK) FaveAddPostSafe(req FaveAddPost) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addPost", req.params(), &response)
	return
}

func (vk *VK) FaveAddProductSafe(req FaveAddProduct) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addProduct", req.params(), &response)
	return
}

func (vk *VK) FaveAddTagSafe(req FaveAddTag) (response FaveAddTagResponse, err error) {
	err = vk.RequestUnmarshal("fave.addTag", req.params(), &response)
	return
}

func (vk *VK) FaveAddVideoSafe(req FaveAddVideo) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.addVideo", req.params(), &response)
	return
}

func (vk *VK) FaveEditTagSafe(req FaveEditTag) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.editTag", req.params(), &response)
	return
}

func (vk *VK) FaveGetSafe(req FaveGet) (response FaveGetResponse, err error) {
	err = vk.RequestUnmarshal("fave.get", req.params(), &response)
	return
}

func (vk *VK) FaveGetExtendedSafe(req FaveGet) (response FaveGetExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("fave.get", params, &response)
	return
}

func (vk *VK) FaveGetPagesSafe(req FaveGetPages) (response FaveGetPagesResponse, err error) {
	err = vk.RequestUnmarshal("fave.getPages", req.params(), &response)
	return
}

func (vk *VK) FaveGetTagsSafe(req FaveGetTags) (response FaveGetTagsResponse, err error) {
	err = vk.RequestUnmarshal("fave.getTags", req.params(), &response)
	return
}

func (vk *VK) FaveMarkSeenSafe(req FaveMarkSeen) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("fave.markSeen", req.params(), &response)
	return
}

func (vk *VK) FaveRemoveArticleSafe(req FaveRemoveArticle) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeArticle", req.params(), &response)
	return
}

// Removes link from the user's faves.
func (vk *VK) FaveRemoveLinkSafe(req FaveRemoveLink) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeLink", req.params(), &response)
	return
}

func (vk *VK) FaveRemovePageSafe(req FaveRemovePage) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removePage", req.params(), &response)
	return
}

func (vk *VK) FaveRemovePostSafe(req FaveRemovePost) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removePost", req.params(), &response)
	return
}

func (vk *VK) FaveRemoveProductSafe(req FaveRemoveProduct) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeProduct", req.params(), &response)
	return
}

func (vk *VK) FaveRemoveTagSafe(req FaveRemoveTag) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.removeTag", req.params(), &response)
	return
}

func (vk *VK) FaveReorderTagsSafe(req FaveReorderTags) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.reorderTags", req.params(), &response)
	return
}

func (vk *VK) FaveSetPageTagsSafe(req FaveSetPageTags) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.setPageTags", req.params(), &response)
	return
}

func (vk *VK) FaveSetTagsSafe(req FaveSetTags) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.setTags", req.params(), &response)
	return
}

func (vk *VK) FaveTrackPageInteractionSafe(req FaveTrackPageInteraction) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("fave.trackPageInteraction", req.params(), &response)
	return
}

// Approves or creates a friend request.
func (vk *VK) FriendsAddSafe(req FriendsAdd) (response FriendsAddResponse, err error) {
	err = vk.RequestUnmarshal("friends.add", req.params(), &response)
	return
}

// Creates a new friend list for the current user.
func (vk *VK) FriendsAddListSafe(req FriendsAddList) (response FriendsAddListResponse, err error) {
	err = vk.RequestUnmarshal("friends.addList", req.params(), &response)
	return
}

// Checks the current user's friendship status with other specified users.
func (vk *VK) FriendsAreFriendsSafe(req FriendsAreFriends) (response FriendsAreFriendsResponse, err error) {
	err = vk.RequestUnmarshal("friends.areFriends", req.params(), &response)
	return
}

// Checks the current user's friendship status with other specified users.
func (vk *VK) FriendsAreFriendsExtendedSafe(req FriendsAreFriends) (response FriendsAreFriendsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("friends.areFriends", params, &response)
	return
}

// Declines a friend request or deletes a user from the current user's friend list.
func (vk *VK) FriendsDeleteSafe(req FriendsDelete) (response FriendsDeleteResponse, err error) {
	err = vk.RequestUnmarshal("friends.delete", req.params(), &response)
	return
}

// Marks all incoming friend requests as viewed.
func (vk *VK) FriendsDeleteAllRequestsSafe(req FriendsDeleteAllRequests) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.deleteAllRequests", req.params(), &response)
	return
}

// Deletes a friend list of the current user.
func (vk *VK) FriendsDeleteListSafe(req FriendsDeleteList) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.deleteList", req.params(), &response)
	return
}

// Edits the friend lists of the selected user.
func (vk *VK) FriendsEditSafe(req FriendsEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.edit", req.params(), &response)
	return
}

// Edits a friend list of the current user.
func (vk *VK) FriendsEditListSafe(req FriendsEditList) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("friends.editList", req.params(), &response)
	return
}

// Returns a list of user IDs or detailed information about a user's friends.
func (vk *VK) FriendsGetSafe(req FriendsGet) (response FriendsGetResponse, err error) {
	err = vk.RequestUnmarshal("friends.get", req.params(), &response)
	return
}

// Returns a list of user IDs or detailed information about a user's friends.
func (vk *VK) FriendsGetFieldsSafe(req FriendsGet) (response FriendsGetFieldsResponse, err error) {
	err = vk.RequestUnmarshal("friends.get", req.params(), &response)
	return
}

// Returns a list of IDs of the current user's friends who installed the application.
func (vk *VK) FriendsGetAppUsersSafe(req FriendsGetAppUsers) (response FriendsGetAppUsersResponse, err error) {
	err = vk.RequestUnmarshal("friends.getAppUsers", req.params(), &response)
	return
}

// Returns a list of the current user's friends whose phone numbers, validated or specified in a profile, are in a given list.
func (vk *VK) FriendsGetByPhonesSafe(req FriendsGetByPhones) (response FriendsGetByPhonesResponse, err error) {
	err = vk.RequestUnmarshal("friends.getByPhones", req.params(), &response)
	return
}

// Returns a list of the user's friend lists.
func (vk *VK) FriendsGetListsSafe(req FriendsGetLists) (response FriendsGetListsResponse, err error) {
	err = vk.RequestUnmarshal("friends.getLists", req.params(), &response)
	return
}

// Returns a list of user IDs of the mutual friends of two users.
func (vk *VK) FriendsGetMutualSafe(req FriendsGetMutual) (response FriendsGetMutualResponse, err error) {
	err = vk.RequestUnmarshal("friends.getMutual", req.params(), &response)
	return
}

// Returns a list of user IDs of the mutual friends of two users.
func (vk *VK) FriendsGetMutualTargetUidsSafe(req FriendsGetMutual) (response FriendsGetMutualTargetUidsResponse, err error) {
	err = vk.RequestUnmarshal("friends.getMutual", req.params(), &response)
	return
}

// Returns a list of user IDs of a user's friends who are online.
func (vk *VK) FriendsGetOnlineSafe(req FriendsGetOnline) (response FriendsGetOnlineResponse, err error) {
	err = vk.RequestUnmarshal("friends.getOnline", req.params(), &response)
	return
}

// Returns a list of user IDs of a user's friends who are online.
func (vk *VK) FriendsGetOnlineOnlineMobileSafe(req FriendsGetOnline) (response FriendsGetOnlineOnlineMobileResponse, err error) {
	err = vk.RequestUnmarshal("friends.getOnline", req.params(), &response)
	return
}

// Returns a list of user IDs of the current user's recently added friends.
func (vk *VK) FriendsGetRecentSafe(req FriendsGetRecent) (response FriendsGetRecentResponse, err error) {
	err = vk.RequestUnmarshal("friends.getRecent", req.params(), &response)
	return
}

// Returns information about the current user's incoming and outgoing friend requests.
func (vk *VK) FriendsGetRequestsSafe(req FriendsGetRequests) (response FriendsGetRequestsResponse, err error) {
	err = vk.RequestUnmarshal("friends.getRequests", req.params(), &response)
	return
}

// Returns information about the current user's incoming and outgoing friend requests.
func (vk *VK) FriendsGetRequestsNeedMutualSafe(req FriendsGetRequests) (response FriendsGetRequestsNeedMutualResponse, err error) {
	err = vk.RequestUnmarshal("friends.getRequests", req.params(), &response)
	return
}

// Returns information about the current user's incoming and outgoing friend requests.
func (vk *VK) FriendsGetRequestsExtendedSafe(req FriendsGetRequests) (response FriendsGetRequestsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("friends.getRequests", params, &response)
	return
}

// Returns a list of profiles of users whom the current user may know.
func (vk *VK) FriendsGetSuggestionsSafe(req FriendsGetSuggestions) (response FriendsGetSuggestionsResponse, err error) {
	err = vk.RequestUnmarshal("friends.getSuggestions", req.params(), &response)
	return
}

// Returns a list of friends matching the search criteria.
func (vk *VK) FriendsSearchSafe(req FriendsSearch) (response FriendsSearchResponse, err error) {
	err = vk.RequestUnmarshal("friends.search", req.params(), &response)
	return
}

// Returns a list of user gifts.
func (vk *VK) GiftsGetSafe(req GiftsGet) (response GiftsGetResponse, err error) {
	err = vk.RequestUnmarshal("gifts.get", req.params(), &response)
	return
}

func (vk *VK) GroupsAddAddressSafe(req GroupsAddAddress) (response GroupsAddAddressResponse, err error) {
	err = vk.RequestUnmarshal("groups.addAddress", req.params(), &response)
	return
}

func (vk *VK) GroupsAddCallbackServerSafe(req GroupsAddCallbackServer) (response GroupsAddCallbackServerResponse, err error) {
	err = vk.RequestUnmarshal("groups.addCallbackServer", req.params(), &response)
	return
}

// Allows to add a link to the community.
func (vk *VK) GroupsAddLinkSafe(req GroupsAddLink) (response GroupsAddLinkResponse, err error) {
	err = vk.RequestUnmarshal("groups.addLink", req.params(), &response)
	return
}

// Allows to approve join request to the community.
func (vk *VK) GroupsApproveRequestSafe(req GroupsApproveRequest) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.approveRequest", req.params(), &response)
	return
}

func (vk *VK) GroupsBanSafe(req GroupsBan) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.ban", req.params(), &response)
	return
}

// Creates a new community.
func (vk *VK) GroupsCreateSafe(req GroupsCreate) (response GroupsCreateResponse, err error) {
	err = vk.RequestUnmarshal("groups.create", req.params(), &response)
	return
}

func (vk *VK) GroupsDeleteCallbackServerSafe(req GroupsDeleteCallbackServer) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.deleteCallbackServer", req.params(), &response)
	return
}

// Allows to delete a link from the community.
func (vk *VK) GroupsDeleteLinkSafe(req GroupsDeleteLink) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.deleteLink", req.params(), &response)
	return
}

func (vk *VK) GroupsDisableOnlineSafe(req GroupsDisableOnline) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.disableOnline", req.params(), &response)
	return
}

// Edits a community.
func (vk *VK) GroupsEditSafe(req GroupsEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.edit", req.params(), &response)
	return
}

func (vk *VK) GroupsEditAddressSafe(req GroupsEditAddress) (response GroupsEditAddressResponse, err error) {
	err = vk.RequestUnmarshal("groups.editAddress", req.params(), &response)
	return
}

func (vk *VK) GroupsEditCallbackServerSafe(req GroupsEditCallbackServer) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.editCallbackServer", req.params(), &response)
	return
}

// Allows to edit a link in the community.
func (vk *VK) GroupsEditLinkSafe(req GroupsEditLink) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.editLink", req.params(), &response)
	return
}

// Allows to add, remove or edit the community manager.
func (vk *VK) GroupsEditManagerSafe(req GroupsEditManager) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.editManager", req.params(), &response)
	return
}

func (vk *VK) GroupsEnableOnlineSafe(req GroupsEnableOnline) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.enableOnline", req.params(), &response)
	return
}

// Returns a list of the communities to which a user belongs.
func (vk *VK) GroupsGetSafe(req GroupsGet) (response GroupsGetResponse, err error) {
	err = vk.RequestUnmarshal("groups.get", req.params(), &response)
	return
}

// Returns a list of the communities to which a user belongs.
func (vk *VK) GroupsGetExtendedSafe(req GroupsGet) (response GroupsGetExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("groups.get", params, &response)
	return
}

// Returns a list of community addresses.
func (vk *VK) GroupsGetAddressesSafe(req GroupsGetAddresses) (response GroupsGetAddressesResponse, err error) {
	err = vk.RequestUnmarshal("groups.getAddresses", req.params(), &response)
	return
}

// Returns a list of users on a community blacklist.
func (vk *VK) GroupsGetBannedSafe(req GroupsGetBanned) (response GroupsGetBannedResponse, err error) {
	err = vk.RequestUnmarshal("groups.getBanned", req.params(), &response)
	return
}

// Returns information about communities by their IDs.
func (vk *VK) GroupsGetByIDSafe(req GroupsGetByID) (response GroupsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("groups.getById", req.params(), &response)
	return
}

// Returns Callback API confirmation code for the community.
func (vk *VK) GroupsGetCallbackConfirmationCodeSafe(req GroupsGetCallbackConfirmationCode) (response GroupsGetCallbackConfirmationCodeResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCallbackConfirmationCode", req.params(), &response)
	return
}

func (vk *VK) GroupsGetCallbackServersSafe(req GroupsGetCallbackServers) (response GroupsGetCallbackServersResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCallbackServers", req.params(), &response)
	return
}

// Returns [vk.com/dev/callback_api|Callback API] notifications settings.
func (vk *VK) GroupsGetCallbackSettingsSafe(req GroupsGetCallbackSettings) (response GroupsGetCallbackSettingsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCallbackSettings", req.params(), &response)
	return
}

// Returns communities list for a catalog category.
func (vk *VK) GroupsGetCatalogSafe(req GroupsGetCatalog) (response GroupsGetCatalogResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCatalog", req.params(), &response)
	return
}

// Returns categories list for communities catalog
func (vk *VK) GroupsGetCatalogInfoSafe(req GroupsGetCatalogInfo) (response GroupsGetCatalogInfoResponse, err error) {
	err = vk.RequestUnmarshal("groups.getCatalogInfo", req.params(), &response)
	return
}

// Returns categories list for communities catalog
func (vk *VK) GroupsGetCatalogInfoExtendedSafe(req GroupsGetCatalogInfo) (response GroupsGetCatalogInfoExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("groups.getCatalogInfo", params, &response)
	return
}

// Returns invited users list of a community
func (vk *VK) GroupsGetInvitedUsersSafe(req GroupsGetInvitedUsers) (response GroupsGetInvitedUsersResponse, err error) {
	err = vk.RequestUnmarshal("groups.getInvitedUsers", req.params(), &response)
	return
}

// Returns a list of invitations to join communities and events.
func (vk *VK) GroupsGetInvitesSafe(req GroupsGetInvites) (response GroupsGetInvitesResponse, err error) {
	err = vk.RequestUnmarshal("groups.getInvites", req.params(), &response)
	return
}

// Returns a list of invitations to join communities and events.
func (vk *VK) GroupsGetInvitesExtendedSafe(req GroupsGetInvites) (response GroupsGetInvitesExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("groups.getInvites", params, &response)
	return
}

// Returns the data needed to query a Long Poll server for events
func (vk *VK) GroupsGetLongPollServerSafe(req GroupsGetLongPollServer) (response GroupsGetLongPollServerResponse, err error) {
	err = vk.RequestUnmarshal("groups.getLongPollServer", req.params(), &response)
	return
}

// Returns Long Poll notification settings
func (vk *VK) GroupsGetLongPollSettingsSafe(req GroupsGetLongPollSettings) (response GroupsGetLongPollSettingsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getLongPollSettings", req.params(), &response)
	return
}

// Returns a list of community members.
func (vk *VK) GroupsGetMembersSafe(req GroupsGetMembers) (response GroupsGetMembersResponse, err error) {
	err = vk.RequestUnmarshal("groups.getMembers", req.params(), &response)
	return
}

// Returns a list of community members.
func (vk *VK) GroupsGetMembersFieldsSafe(req GroupsGetMembers) (response GroupsGetMembersFieldsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getMembers", req.params(), &response)
	return
}

// Returns a list of community members.
func (vk *VK) GroupsGetMembersFilterSafe(req GroupsGetMembers) (response GroupsGetMembersFilterResponse, err error) {
	err = vk.RequestUnmarshal("groups.getMembers", req.params(), &response)
	return
}

// Returns a list of requests to the community.
func (vk *VK) GroupsGetRequestsSafe(req GroupsGetRequests) (response GroupsGetRequestsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getRequests", req.params(), &response)
	return
}

// Returns a list of requests to the community.
func (vk *VK) GroupsGetRequestsFieldsSafe(req GroupsGetRequests) (response GroupsGetRequestsFieldsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getRequests", req.params(), &response)
	return
}

// Returns community settings.
func (vk *VK) GroupsGetSettingsSafe(req GroupsGetSettings) (response GroupsGetSettingsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getSettings", req.params(), &response)
	return
}

func (vk *VK) GroupsGetTokenPermissionsSafe(req GroupsGetTokenPermissions) (response GroupsGetTokenPermissionsResponse, err error) {
	err = vk.RequestUnmarshal("groups.getTokenPermissions", req.params(), &response)
	return
}

// Allows to invite friends to the community.
func (vk *VK) GroupsInviteSafe(req GroupsInvite) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.invite", req.params(), &response)
	return
}

// Returns information specifying whether a user is a member of a community.
func (vk *VK) GroupsIsMemberSafe(req GroupsIsMember) (response GroupsIsMemberResponse, err error) {
	err = vk.RequestUnmarshal("groups.isMember", req.params(), &response)
	return
}

// Returns information specifying whether a user is a member of a community.
func (vk *VK) GroupsIsMemberUserIDsSafe(req GroupsIsMember) (response GroupsIsMemberUserIDsResponse, err error) {
	err = vk.RequestUnmarshal("groups.isMember", req.params(), &response)
	return
}

// Returns information specifying whether a user is a member of a community.
func (vk *VK) GroupsIsMemberExtendedSafe(req GroupsIsMember) (response GroupsIsMemberExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("groups.isMember", params, &response)
	return
}

// Returns information specifying whether a user is a member of a community.
func (vk *VK) GroupsIsMemberUserIDsExtendedSafe(req GroupsIsMember) (response GroupsIsMemberUserIDsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("groups.isMember", params, &response)
	return
}

// With this method you can join the group or public page, and also confirm your participation in an event.
func (vk *VK) GroupsJoinSafe(req GroupsJoin) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.join", req.params(), &response)
	return
}

// With this method you can leave a group, public page, or event.
func (vk *VK) GroupsLeaveSafe(req GroupsLeave) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.leave", req.params(), &response)
	return
}

// Removes a user from the community.
func (vk *VK) GroupsRemoveUserSafe(req GroupsRemoveUser) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.removeUser", req.params(), &response)
	return
}

// Allows to reorder links in the community.
func (vk *VK) GroupsReorderLinkSafe(req GroupsReorderLink) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.reorderLink", req.params(), &response)
	return
}

// Returns a list of communities matching the search criteria.
func (vk *VK) GroupsSearchSafe(req GroupsSearch) (response GroupsSearchResponse, err error) {
	err = vk.RequestUnmarshal("groups.search", req.params(), &response)
	return
}

// Allow to set notifications settings for group.
func (vk *VK) GroupsSetCallbackSettingsSafe(req GroupsSetCallbackSettings) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.setCallbackSettings", req.params(), &response)
	return
}

// Sets Long Poll notification settings
func (vk *VK) GroupsSetLongPollSettingsSafe(req GroupsSetLongPollSettings) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.setLongPollSettings", req.params(), &response)
	return
}

func (vk *VK) GroupsUnbanSafe(req GroupsUnban) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("groups.unban", req.params(), &response)
	return
}

// Checks if the user can start the lead.
func (vk *VK) LeadsCheckUserSafe(req LeadsCheckUser) (response LeadsCheckUserResponse, err error) {
	err = vk.RequestUnmarshal("leads.checkUser", req.params(), &response)
	return
}

// Completes the lead started by user.
func (vk *VK) LeadsCompleteSafe(req LeadsComplete) (response LeadsCompleteResponse, err error) {
	err = vk.RequestUnmarshal("leads.complete", req.params(), &response)
	return
}

// Returns lead stats data.
func (vk *VK) LeadsGetStatsSafe(req LeadsGetStats) (response LeadsGetStatsResponse, err error) {
	err = vk.RequestUnmarshal("leads.getStats", req.params(), &response)
	return
}

// Returns a list of last user actions for the offer.
func (vk *VK) LeadsGetUsersSafe(req LeadsGetUsers) (response LeadsGetUsersResponse, err error) {
	err = vk.RequestUnmarshal("leads.getUsers", req.params(), &response)
	return
}

// Counts the metric event.
func (vk *VK) LeadsMetricHitSafe(req LeadsMetricHit) (response LeadsMetricHitResponse, err error) {
	err = vk.RequestUnmarshal("leads.metricHit", req.params(), &response)
	return
}

// Creates new session for the user passing the offer.
func (vk *VK) LeadsStartSafe(req LeadsStart) (response LeadsStartResponse, err error) {
	err = vk.RequestUnmarshal("leads.start", req.params(), &response)
	return
}

// Adds the specified object to the 'Likes' list of the current user.
func (vk *VK) LikesAddSafe(req LikesAdd) (response LikesAddResponse, err error) {
	err = vk.RequestUnmarshal("likes.add", req.params(), &response)
	return
}

// Deletes the specified object from the 'Likes' list of the current user.
func (vk *VK) LikesDeleteSafe(req LikesDelete) (response LikesDeleteResponse, err error) {
	err = vk.RequestUnmarshal("likes.delete", req.params(), &response)
	return
}

// Returns a list of IDs of users who added the specified object to their 'Likes' list.
func (vk *VK) LikesGetListSafe(req LikesGetList) (response LikesGetListResponse, err error) {
	err = vk.RequestUnmarshal("likes.getList", req.params(), &response)
	return
}

// Returns a list of IDs of users who added the specified object to their 'Likes' list.
func (vk *VK) LikesGetListExtendedSafe(req LikesGetList) (response LikesGetListExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("likes.getList", params, &response)
	return
}

// Checks for the object in the 'Likes' list of the specified user.
func (vk *VK) LikesIsLikedSafe(req LikesIsLiked) (response LikesIsLikedResponse, err error) {
	err = vk.RequestUnmarshal("likes.isLiked", req.params(), &response)
	return
}

// Ads a new item to the market.
func (vk *VK) MarketAddSafe(req MarketAdd) (response MarketAddResponse, err error) {
	err = vk.RequestUnmarshal("market.add", req.params(), &response)
	return
}

// Creates new collection of items
func (vk *VK) MarketAddAlbumSafe(req MarketAddAlbum) (response MarketAddAlbumResponse, err error) {
	err = vk.RequestUnmarshal("market.addAlbum", req.params(), &response)
	return
}

// Adds an item to one or multiple collections.
func (vk *VK) MarketAddToAlbumSafe(req MarketAddToAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.addToAlbum", req.params(), &response)
	return
}

// Creates a new comment for an item.
func (vk *VK) MarketCreateCommentSafe(req MarketCreateComment) (response MarketCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("market.createComment", req.params(), &response)
	return
}

// Deletes an item.
func (vk *VK) MarketDeleteSafe(req MarketDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.delete", req.params(), &response)
	return
}

// Deletes a collection of items.
func (vk *VK) MarketDeleteAlbumSafe(req MarketDeleteAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.deleteAlbum", req.params(), &response)
	return
}

// Deletes an item's comment
func (vk *VK) MarketDeleteCommentSafe(req MarketDeleteComment) (response MarketDeleteCommentResponse, err error) {
	err = vk.RequestUnmarshal("market.deleteComment", req.params(), &response)
	return
}

// Edits an item.
func (vk *VK) MarketEditSafe(req MarketEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.edit", req.params(), &response)
	return
}

// Edits a collection of items
func (vk *VK) MarketEditAlbumSafe(req MarketEditAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.editAlbum", req.params(), &response)
	return
}

// Chages item comment's text
func (vk *VK) MarketEditCommentSafe(req MarketEditComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.editComment", req.params(), &response)
	return
}

// Returns items list for a community.
func (vk *VK) MarketGetSafe(req MarketGet) (response MarketGetResponse, err error) {
	err = vk.RequestUnmarshal("market.get", req.params(), &response)
	return
}

// Returns items list for a community.
func (vk *VK) MarketGetExtendedSafe(req MarketGet) (response MarketGetExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("market.get", params, &response)
	return
}

// Returns items album's data
func (vk *VK) MarketGetAlbumByIDSafe(req MarketGetAlbumByID) (response MarketGetAlbumByIDResponse, err error) {
	err = vk.RequestUnmarshal("market.getAlbumById", req.params(), &response)
	return
}

// Returns community's collections list.
func (vk *VK) MarketGetAlbumsSafe(req MarketGetAlbums) (response MarketGetAlbumsResponse, err error) {
	err = vk.RequestUnmarshal("market.getAlbums", req.params(), &response)
	return
}

// Returns information about market items by their ids.
func (vk *VK) MarketGetByIDSafe(req MarketGetByID) (response MarketGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("market.getById", req.params(), &response)
	return
}

// Returns information about market items by their ids.
func (vk *VK) MarketGetByIDExtendedSafe(req MarketGetByID) (response MarketGetByIDExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("market.getById", params, &response)
	return
}

// Returns a list of market categories.
func (vk *VK) MarketGetCategoriesSafe(req MarketGetCategories) (response MarketGetCategoriesResponse, err error) {
	err = vk.RequestUnmarshal("market.getCategories", req.params(), &response)
	return
}

// Returns comments list for an item.
func (vk *VK) MarketGetCommentsSafe(req MarketGetComments) (response MarketGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("market.getComments", req.params(), &response)
	return
}

// Removes an item from one or multiple collections.
func (vk *VK) MarketRemoveFromAlbumSafe(req MarketRemoveFromAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.removeFromAlbum", req.params(), &response)
	return
}

// Reorders the collections list.
func (vk *VK) MarketReorderAlbumsSafe(req MarketReorderAlbums) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.reorderAlbums", req.params(), &response)
	return
}

// Changes item place in a collection.
func (vk *VK) MarketReorderItemsSafe(req MarketReorderItems) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.reorderItems", req.params(), &response)
	return
}

// Sends a complaint to the item.
func (vk *VK) MarketReportSafe(req MarketReport) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.report", req.params(), &response)
	return
}

// Sends a complaint to the item's comment.
func (vk *VK) MarketReportCommentSafe(req MarketReportComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.reportComment", req.params(), &response)
	return
}

// Restores recently deleted item
func (vk *VK) MarketRestoreSafe(req MarketRestore) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("market.restore", req.params(), &response)
	return
}

// Restores a recently deleted comment
func (vk *VK) MarketRestoreCommentSafe(req MarketRestoreComment) (response MarketRestoreCommentResponse, err error) {
	err = vk.RequestUnmarshal("market.restoreComment", req.params(), &response)
	return
}

// Searches market items in a community's catalog
func (vk *VK) MarketSearchSafe(req MarketSearch) (response MarketSearchResponse, err error) {
	err = vk.RequestUnmarshal("market.search", req.params(), &response)
	return
}

// Searches market items in a community's catalog
func (vk *VK) MarketSearchExtendedSafe(req MarketSearch) (response MarketSearchExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("market.search", params, &response)
	return
}

// Adds a new user to a chat.
func (vk *VK) MessagesAddChatUserSafe(req MessagesAddChatUser) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.addChatUser", req.params(), &response)
	return
}

// Allows sending messages from community to the current user.
func (vk *VK) MessagesAllowMessagesFromGroupSafe(req MessagesAllowMessagesFromGroup) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.allowMessagesFromGroup", req.params(), &response)
	return
}

// Creates a chat with several participants.
func (vk *VK) MessagesCreateChatSafe(req MessagesCreateChat) (response MessagesCreateChatResponse, err error) {
	err = vk.RequestUnmarshal("messages.createChat", req.params(), &response)
	return
}

// Deletes one or more messages.
func (vk *VK) MessagesDeleteSafe(req MessagesDelete) (response MessagesDeleteResponse, err error) {
	err = vk.RequestUnmarshal("messages.delete", req.params(), &response)
	return
}

// Deletes a chat's cover picture.
func (vk *VK) MessagesDeleteChatPhotoSafe(req MessagesDeleteChatPhoto) (response MessagesDeleteChatPhotoResponse, err error) {
	err = vk.RequestUnmarshal("messages.deleteChatPhoto", req.params(), &response)
	return
}

// Deletes all private messages in a conversation.
func (vk *VK) MessagesDeleteConversationSafe(req MessagesDeleteConversation) (response MessagesDeleteConversationResponse, err error) {
	err = vk.RequestUnmarshal("messages.deleteConversation", req.params(), &response)
	return
}

// Denies sending message from community to the current user.
func (vk *VK) MessagesDenyMessagesFromGroupSafe(req MessagesDenyMessagesFromGroup) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.denyMessagesFromGroup", req.params(), &response)
	return
}

// Edits the message.
func (vk *VK) MessagesEditSafe(req MessagesEdit) (response MessagesEditResponse, err error) {
	err = vk.RequestUnmarshal("messages.edit", req.params(), &response)
	return
}

// Edits the title of a chat.
func (vk *VK) MessagesEditChatSafe(req MessagesEditChat) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.editChat", req.params(), &response)
	return
}

// Returns messages by their IDs within the conversation.
func (vk *VK) MessagesGetByConversationMessageIDSafe(req MessagesGetByConversationMessageID) (response MessagesGetByConversationMessageIDResponse, err error) {
	err = vk.RequestUnmarshal("messages.getByConversationMessageId", req.params(), &response)
	return
}

// Returns messages by their IDs.
func (vk *VK) MessagesGetByIDSafe(req MessagesGetByID) (response MessagesGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("messages.getById", req.params(), &response)
	return
}

// Returns messages by their IDs.
func (vk *VK) MessagesGetByIDExtendedSafe(req MessagesGetByID) (response MessagesGetByIDExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("messages.getById", params, &response)
	return
}

func (vk *VK) MessagesGetChatPreviewSafe(req MessagesGetChatPreview) (response MessagesGetChatPreviewResponse, err error) {
	err = vk.RequestUnmarshal("messages.getChatPreview", req.params(), &response)
	return
}

// Returns a list of IDs of users participating in a chat.
func (vk *VK) MessagesGetConversationMembersSafe(req MessagesGetConversationMembers) (response MessagesGetConversationMembersResponse, err error) {
	err = vk.RequestUnmarshal("messages.getConversationMembers", req.params(), &response)
	return
}

// Returns a list of the current user's conversations.
func (vk *VK) MessagesGetConversationsSafe(req MessagesGetConversations) (response MessagesGetConversationsResponse, err error) {
	err = vk.RequestUnmarshal("messages.getConversations", req.params(), &response)
	return
}

// Returns conversations by their IDs
func (vk *VK) MessagesGetConversationsByIDSafe(req MessagesGetConversationsByID) (response MessagesGetConversationsByIDResponse, err error) {
	err = vk.RequestUnmarshal("messages.getConversationsById", req.params(), &response)
	return
}

// Returns conversations by their IDs
func (vk *VK) MessagesGetConversationsByIDExtendedSafe(req MessagesGetConversationsByID) (response MessagesGetConversationsByIDExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("messages.getConversationsById", params, &response)
	return
}

// Returns message history for the specified user or group chat.
func (vk *VK) MessagesGetHistorySafe(req MessagesGetHistory) (response MessagesGetHistoryResponse, err error) {
	err = vk.RequestUnmarshal("messages.getHistory", req.params(), &response)
	return
}

// Returns media files from the dialog or group chat.
func (vk *VK) MessagesGetHistoryAttachmentsSafe(req MessagesGetHistoryAttachments) (response MessagesGetHistoryAttachmentsResponse, err error) {
	err = vk.RequestUnmarshal("messages.getHistoryAttachments", req.params(), &response)
	return
}

func (vk *VK) MessagesGetInviteLinkSafe(req MessagesGetInviteLink) (response MessagesGetInviteLinkResponse, err error) {
	err = vk.RequestUnmarshal("messages.getInviteLink", req.params(), &response)
	return
}

// Returns a user's current status and date of last activity.
func (vk *VK) MessagesGetLastActivitySafe(req MessagesGetLastActivity) (response MessagesGetLastActivityResponse, err error) {
	err = vk.RequestUnmarshal("messages.getLastActivity", req.params(), &response)
	return
}

// Returns updates in user's private messages.
func (vk *VK) MessagesGetLongPollHistorySafe(req MessagesGetLongPollHistory) (response MessagesGetLongPollHistoryResponse, err error) {
	err = vk.RequestUnmarshal("messages.getLongPollHistory", req.params(), &response)
	return
}

// Returns data required for connection to a Long Poll server.
func (vk *VK) MessagesGetLongPollServerSafe(req MessagesGetLongPollServer) (response MessagesGetLongPollServerResponse, err error) {
	err = vk.RequestUnmarshal("messages.getLongPollServer", req.params(), &response)
	return
}

// Returns information whether sending messages from the community to current user is allowed.
func (vk *VK) MessagesIsMessagesFromGroupAllowedSafe(req MessagesIsMessagesFromGroupAllowed) (response MessagesIsMessagesFromGroupAllowedResponse, err error) {
	err = vk.RequestUnmarshal("messages.isMessagesFromGroupAllowed", req.params(), &response)
	return
}

func (vk *VK) MessagesJoinChatByInviteLinkSafe(req MessagesJoinChatByInviteLink) (response MessagesJoinChatByInviteLinkResponse, err error) {
	err = vk.RequestUnmarshal("messages.joinChatByInviteLink", req.params(), &response)
	return
}

// Marks and unmarks conversations as unanswered.
func (vk *VK) MessagesMarkAsAnsweredConversationSafe(req MessagesMarkAsAnsweredConversation) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsAnsweredConversation", req.params(), &response)
	return
}

// Marks and unmarks messages as important (starred).
func (vk *VK) MessagesMarkAsImportantSafe(req MessagesMarkAsImportant) (response MessagesMarkAsImportantResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsImportant", req.params(), &response)
	return
}

// Marks and unmarks conversations as important.
func (vk *VK) MessagesMarkAsImportantConversationSafe(req MessagesMarkAsImportantConversation) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsImportantConversation", req.params(), &response)
	return
}

// Marks messages as read.
func (vk *VK) MessagesMarkAsReadSafe(req MessagesMarkAsRead) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.markAsRead", req.params(), &response)
	return
}

// Pin a message.
func (vk *VK) MessagesPinSafe(req MessagesPin) (response MessagesPinResponse, err error) {
	err = vk.RequestUnmarshal("messages.pin", req.params(), &response)
	return
}

// Allows the current user to leave a chat or, if the current user started the chat, allows the user to remove another user from the chat.
func (vk *VK) MessagesRemoveChatUserSafe(req MessagesRemoveChatUser) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.removeChatUser", req.params(), &response)
	return
}

// Restores a deleted message.
func (vk *VK) MessagesRestoreSafe(req MessagesRestore) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.restore", req.params(), &response)
	return
}

// Returns a list of the current user's private messages that match search criteria.
func (vk *VK) MessagesSearchSafe(req MessagesSearch) (response MessagesSearchResponse, err error) {
	err = vk.RequestUnmarshal("messages.search", req.params(), &response)
	return
}

// Returns a list of the current user's conversations that match search criteria.
func (vk *VK) MessagesSearchConversationsSafe(req MessagesSearchConversations) (response MessagesSearchConversationsResponse, err error) {
	err = vk.RequestUnmarshal("messages.searchConversations", req.params(), &response)
	return
}

// Sends a message.
func (vk *VK) MessagesSendSafe(req MessagesSend) (response MessagesSendResponse, err error) {
	err = vk.RequestUnmarshal("messages.send", req.params(), &response)
	return
}

// Sends a message.
func (vk *VK) MessagesSendUserIDsSafe(req MessagesSend) (response MessagesSendUserIDsResponse, err error) {
	err = vk.RequestUnmarshal("messages.send", req.params(), &response)
	return
}

func (vk *VK) MessagesSendMessageEventAnswerSafe(req MessagesSendMessageEventAnswer) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.sendMessageEventAnswer", req.params(), &response)
	return
}

// Changes the status of a user as typing in a conversation.
func (vk *VK) MessagesSetActivitySafe(req MessagesSetActivity) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.setActivity", req.params(), &response)
	return
}

// Sets a previously-uploaded picture as the cover picture of a chat.
func (vk *VK) MessagesSetChatPhotoSafe(req MessagesSetChatPhoto) (response MessagesSetChatPhotoResponse, err error) {
	err = vk.RequestUnmarshal("messages.setChatPhoto", req.params(), &response)
	return
}

func (vk *VK) MessagesUnpinSafe(req MessagesUnpin) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("messages.unpin", req.params(), &response)
	return
}

// Prevents news from specified users and communities from appearing in the current user's newsfeed.
func (vk *VK) NewsfeedAddBanSafe(req NewsfeedAddBan) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.addBan", req.params(), &response)
	return
}

// Allows news from previously banned users and communities to be shown in the current user's newsfeed.
func (vk *VK) NewsfeedDeleteBanSafe(req NewsfeedDeleteBan) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.deleteBan", req.params(), &response)
	return
}

func (vk *VK) NewsfeedDeleteListSafe(req NewsfeedDeleteList) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.deleteList", req.params(), &response)
	return
}

// Returns data required to show newsfeed for the current user.
func (vk *VK) NewsfeedGetSafe(req NewsfeedGet) (response NewsfeedGetResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.get", req.params(), &response)
	return
}

// Returns a list of users and communities banned from the current user's newsfeed.
func (vk *VK) NewsfeedGetBannedSafe(req NewsfeedGetBanned) (response NewsfeedGetBannedResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getBanned", req.params(), &response)
	return
}

// Returns a list of users and communities banned from the current user's newsfeed.
func (vk *VK) NewsfeedGetBannedExtendedSafe(req NewsfeedGetBanned) (response NewsfeedGetBannedExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("newsfeed.getBanned", params, &response)
	return
}

// Returns a list of comments in the current user's newsfeed.
func (vk *VK) NewsfeedGetCommentsSafe(req NewsfeedGetComments) (response NewsfeedGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getComments", req.params(), &response)
	return
}

// Returns a list of newsfeeds followed by the current user.
func (vk *VK) NewsfeedGetListsSafe(req NewsfeedGetLists) (response NewsfeedGetListsResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getLists", req.params(), &response)
	return
}

// Returns a list of newsfeeds followed by the current user.
func (vk *VK) NewsfeedGetListsExtendedSafe(req NewsfeedGetLists) (response NewsfeedGetListsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("newsfeed.getLists", params, &response)
	return
}

// Returns a list of posts on user walls in which the current user is mentioned.
func (vk *VK) NewsfeedGetMentionsSafe(req NewsfeedGetMentions) (response NewsfeedGetMentionsResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getMentions", req.params(), &response)
	return
}

// , Returns a list of newsfeeds recommended to the current user.
func (vk *VK) NewsfeedGetRecommendedSafe(req NewsfeedGetRecommended) (response NewsfeedGetRecommendedResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getRecommended", req.params(), &response)
	return
}

// Returns communities and users that current user is suggested to follow.
func (vk *VK) NewsfeedGetSuggestedSourcesSafe(req NewsfeedGetSuggestedSources) (response NewsfeedGetSuggestedSourcesResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.getSuggestedSources", req.params(), &response)
	return
}

// Hides an item from the newsfeed.
func (vk *VK) NewsfeedIgnoreItemSafe(req NewsfeedIgnoreItem) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.ignoreItem", req.params(), &response)
	return
}

// Creates and edits user newsfeed lists
func (vk *VK) NewsfeedSaveListSafe(req NewsfeedSaveList) (response NewsfeedSaveListResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.saveList", req.params(), &response)
	return
}

// Returns search results by statuses.
func (vk *VK) NewsfeedSearchSafe(req NewsfeedSearch) (response NewsfeedSearchResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.search", req.params(), &response)
	return
}

// Returns search results by statuses.
func (vk *VK) NewsfeedSearchExtendedSafe(req NewsfeedSearch) (response NewsfeedSearchExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("newsfeed.search", params, &response)
	return
}

// Returns a hidden item to the newsfeed.
func (vk *VK) NewsfeedUnignoreItemSafe(req NewsfeedUnignoreItem) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.unignoreItem", req.params(), &response)
	return
}

// Unsubscribes the current user from specified newsfeeds.
func (vk *VK) NewsfeedUnsubscribeSafe(req NewsfeedUnsubscribe) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("newsfeed.unsubscribe", req.params(), &response)
	return
}

// Creates a new note for the current user.
func (vk *VK) NotesAddSafe(req NotesAdd) (response NotesAddResponse, err error) {
	err = vk.RequestUnmarshal("notes.add", req.params(), &response)
	return
}

// Adds a new comment on a note.
func (vk *VK) NotesCreateCommentSafe(req NotesCreateComment) (response NotesCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("notes.createComment", req.params(), &response)
	return
}

// Deletes a note of the current user.
func (vk *VK) NotesDeleteSafe(req NotesDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.delete", req.params(), &response)
	return
}

// Deletes a comment on a note.
func (vk *VK) NotesDeleteCommentSafe(req NotesDeleteComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.deleteComment", req.params(), &response)
	return
}

// Edits a note of the current user.
func (vk *VK) NotesEditSafe(req NotesEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.edit", req.params(), &response)
	return
}

// Edits a comment on a note.
func (vk *VK) NotesEditCommentSafe(req NotesEditComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.editComment", req.params(), &response)
	return
}

// Returns a list of notes created by a user.
func (vk *VK) NotesGetSafe(req NotesGet) (response NotesGetResponse, err error) {
	err = vk.RequestUnmarshal("notes.get", req.params(), &response)
	return
}

// Returns a note by its ID.
func (vk *VK) NotesGetByIDSafe(req NotesGetByID) (response NotesGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("notes.getById", req.params(), &response)
	return
}

// Returns a list of comments on a note.
func (vk *VK) NotesGetCommentsSafe(req NotesGetComments) (response NotesGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("notes.getComments", req.params(), &response)
	return
}

// Restores a deleted comment on a note.
func (vk *VK) NotesRestoreCommentSafe(req NotesRestoreComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("notes.restoreComment", req.params(), &response)
	return
}

// Returns a list of notifications about other users' feedback to the current user's wall posts.
func (vk *VK) NotificationsGetSafe(req NotificationsGet) (response NotificationsGetResponse, err error) {
	err = vk.RequestUnmarshal("notifications.get", req.params(), &response)
	return
}

// Resets the counter of new notifications about other users' feedback to the current user's wall posts.
func (vk *VK) NotificationsMarkAsViewedSafe(req NotificationsMarkAsViewed) (response NotificationsMarkAsViewedResponse, err error) {
	err = vk.RequestUnmarshal("notifications.markAsViewed", req.params(), &response)
	return
}

func (vk *VK) NotificationsSendMessageSafe(req NotificationsSendMessage) (response NotificationsSendMessageResponse, err error) {
	err = vk.RequestUnmarshal("notifications.sendMessage", req.params(), &response)
	return
}

func (vk *VK) OrdersCancelSubscriptionSafe(req OrdersCancelSubscription) (response OrdersCancelSubscriptionResponse, err error) {
	err = vk.RequestUnmarshal("orders.cancelSubscription", req.params(), &response)
	return
}

// Changes order status.
func (vk *VK) OrdersChangeStateSafe(req OrdersChangeState) (response OrdersChangeStateResponse, err error) {
	err = vk.RequestUnmarshal("orders.changeState", req.params(), &response)
	return
}

// Returns a list of orders.
func (vk *VK) OrdersGetSafe(req OrdersGet) (response OrdersGetResponse, err error) {
	err = vk.RequestUnmarshal("orders.get", req.params(), &response)
	return
}

func (vk *VK) OrdersGetAmountSafe(req OrdersGetAmount) (response OrdersGetAmountResponse, err error) {
	err = vk.RequestUnmarshal("orders.getAmount", req.params(), &response)
	return
}

// Returns information about orders by their IDs.
func (vk *VK) OrdersGetByIDSafe(req OrdersGetByID) (response OrdersGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("orders.getById", req.params(), &response)
	return
}

func (vk *VK) OrdersGetUserSubscriptionByIDSafe(req OrdersGetUserSubscriptionByID) (response OrdersGetUserSubscriptionByIDResponse, err error) {
	err = vk.RequestUnmarshal("orders.getUserSubscriptionById", req.params(), &response)
	return
}

func (vk *VK) OrdersGetUserSubscriptionsSafe(req OrdersGetUserSubscriptions) (response OrdersGetUserSubscriptionsResponse, err error) {
	err = vk.RequestUnmarshal("orders.getUserSubscriptions", req.params(), &response)
	return
}

func (vk *VK) OrdersUpdateSubscriptionSafe(req OrdersUpdateSubscription) (response OrdersUpdateSubscriptionResponse, err error) {
	err = vk.RequestUnmarshal("orders.updateSubscription", req.params(), &response)
	return
}

// Allows to clear the cache of particular 'external' pages which may be attached to VK posts.
func (vk *VK) PagesClearCacheSafe(req PagesClearCache) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("pages.clearCache", req.params(), &response)
	return
}

// Returns information about a wiki page.
func (vk *VK) PagesGetSafe(req PagesGet) (response PagesGetResponse, err error) {
	err = vk.RequestUnmarshal("pages.get", req.params(), &response)
	return
}

// Returns a list of all previous versions of a wiki page.
func (vk *VK) PagesGetHistorySafe(req PagesGetHistory) (response PagesGetHistoryResponse, err error) {
	err = vk.RequestUnmarshal("pages.getHistory", req.params(), &response)
	return
}

// Returns a list of wiki pages in a group.
func (vk *VK) PagesGetTitlesSafe(req PagesGetTitles) (response PagesGetTitlesResponse, err error) {
	err = vk.RequestUnmarshal("pages.getTitles", req.params(), &response)
	return
}

// Returns the text of one of the previous versions of a wiki page.
func (vk *VK) PagesGetVersionSafe(req PagesGetVersion) (response PagesGetVersionResponse, err error) {
	err = vk.RequestUnmarshal("pages.getVersion", req.params(), &response)
	return
}

// Returns HTML representation of the wiki markup.
func (vk *VK) PagesParseWikiSafe(req PagesParseWiki) (response PagesParseWikiResponse, err error) {
	err = vk.RequestUnmarshal("pages.parseWiki", req.params(), &response)
	return
}

// Saves the text of a wiki page.
func (vk *VK) PagesSaveSafe(req PagesSave) (response PagesSaveResponse, err error) {
	err = vk.RequestUnmarshal("pages.save", req.params(), &response)
	return
}

// Saves modified read and edit access settings for a wiki page.
func (vk *VK) PagesSaveAccessSafe(req PagesSaveAccess) (response PagesSaveAccessResponse, err error) {
	err = vk.RequestUnmarshal("pages.saveAccess", req.params(), &response)
	return
}

// Confirms a tag on a photo.
func (vk *VK) PhotosConfirmTagSafe(req PhotosConfirmTag) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.confirmTag", req.params(), &response)
	return
}

// Allows to copy a photo to the "Saved photos" album
func (vk *VK) PhotosCopySafe(req PhotosCopy) (response PhotosCopyResponse, err error) {
	err = vk.RequestUnmarshal("photos.copy", req.params(), &response)
	return
}

// Creates an empty photo album.
func (vk *VK) PhotosCreateAlbumSafe(req PhotosCreateAlbum) (response PhotosCreateAlbumResponse, err error) {
	err = vk.RequestUnmarshal("photos.createAlbum", req.params(), &response)
	return
}

// Adds a new comment on the photo.
func (vk *VK) PhotosCreateCommentSafe(req PhotosCreateComment) (response PhotosCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("photos.createComment", req.params(), &response)
	return
}

// Deletes a photo.
func (vk *VK) PhotosDeleteSafe(req PhotosDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.delete", req.params(), &response)
	return
}

// Deletes a photo album belonging to the current user.
func (vk *VK) PhotosDeleteAlbumSafe(req PhotosDeleteAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.deleteAlbum", req.params(), &response)
	return
}

// Deletes a comment on the photo.
func (vk *VK) PhotosDeleteCommentSafe(req PhotosDeleteComment) (response PhotosDeleteCommentResponse, err error) {
	err = vk.RequestUnmarshal("photos.deleteComment", req.params(), &response)
	return
}

// Edits the caption of a photo.
func (vk *VK) PhotosEditSafe(req PhotosEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.edit", req.params(), &response)
	return
}

// Edits information about a photo album.
func (vk *VK) PhotosEditAlbumSafe(req PhotosEditAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.editAlbum", req.params(), &response)
	return
}

// Edits a comment on a photo.
func (vk *VK) PhotosEditCommentSafe(req PhotosEditComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.editComment", req.params(), &response)
	return
}

// Returns a list of a user's or community's photos.
func (vk *VK) PhotosGetSafe(req PhotosGet) (response PhotosGetResponse, err error) {
	err = vk.RequestUnmarshal("photos.get", req.params(), &response)
	return
}

// Returns a list of a user's or community's photos.
func (vk *VK) PhotosGetExtendedSafe(req PhotosGet) (response PhotosGetExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("photos.get", params, &response)
	return
}

// Returns a list of a user's or community's photo albums.
func (vk *VK) PhotosGetAlbumsSafe(req PhotosGetAlbums) (response PhotosGetAlbumsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAlbums", req.params(), &response)
	return
}

// Returns the number of photo albums belonging to a user or community.
func (vk *VK) PhotosGetAlbumsCountSafe(req PhotosGetAlbumsCount) (response PhotosGetAlbumsCountResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAlbumsCount", req.params(), &response)
	return
}

// Returns a list of photos belonging to a user or community, in reverse chronological order.
func (vk *VK) PhotosGetAllSafe(req PhotosGetAll) (response PhotosGetAllResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAll", req.params(), &response)
	return
}

// Returns a list of photos belonging to a user or community, in reverse chronological order.
func (vk *VK) PhotosGetAllExtendedSafe(req PhotosGetAll) (response PhotosGetAllExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("photos.getAll", params, &response)
	return
}

// Returns a list of comments on a specific photo album or all albums of the user sorted in reverse chronological order.
func (vk *VK) PhotosGetAllCommentsSafe(req PhotosGetAllComments) (response PhotosGetAllCommentsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getAllComments", req.params(), &response)
	return
}

// Returns information about photos by their IDs.
func (vk *VK) PhotosGetByIDSafe(req PhotosGetByID) (response PhotosGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("photos.getById", req.params(), &response)
	return
}

// Returns information about photos by their IDs.
func (vk *VK) PhotosGetByIDExtendedSafe(req PhotosGetByID) (response PhotosGetByIDExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("photos.getById", params, &response)
	return
}

// Returns an upload link for chat cover pictures.
func (vk *VK) PhotosGetChatUploadServerSafe(req PhotosGetChatUploadServer) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getChatUploadServer", req.params(), &response)
	return
}

// Returns a list of comments on a photo.
func (vk *VK) PhotosGetCommentsSafe(req PhotosGetComments) (response PhotosGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getComments", req.params(), &response)
	return
}

// Returns a list of comments on a photo.
func (vk *VK) PhotosGetCommentsExtendedSafe(req PhotosGetComments) (response PhotosGetCommentsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("photos.getComments", params, &response)
	return
}

// Returns the server address for market album photo upload.
func (vk *VK) PhotosGetMarketAlbumUploadServerSafe(req PhotosGetMarketAlbumUploadServer) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getMarketAlbumUploadServer", req.params(), &response)
	return
}

// Returns the server address for market photo upload.
func (vk *VK) PhotosGetMarketUploadServerSafe(req PhotosGetMarketUploadServer) (response PhotosGetMarketUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getMarketUploadServer", req.params(), &response)
	return
}

// Returns the server address for photo upload in a private message for a user.
func (vk *VK) PhotosGetMessagesUploadServerSafe(req PhotosGetMessagesUploadServer) (response PhotosGetMessagesUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getMessagesUploadServer", req.params(), &response)
	return
}

// Returns a list of photos with tags that have not been viewed.
func (vk *VK) PhotosGetNewTagsSafe(req PhotosGetNewTags) (response PhotosGetNewTagsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getNewTags", req.params(), &response)
	return
}

// Returns the server address for owner cover upload.
func (vk *VK) PhotosGetOwnerCoverPhotoUploadServerSafe(req PhotosGetOwnerCoverPhotoUploadServer) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getOwnerCoverPhotoUploadServer", req.params(), &response)
	return
}

// Returns an upload server address for a profile or community photo.
func (vk *VK) PhotosGetOwnerPhotoUploadServerSafe(req PhotosGetOwnerPhotoUploadServer) (response BaseGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getOwnerPhotoUploadServer", req.params(), &response)
	return
}

// Returns a list of tags on a photo.
func (vk *VK) PhotosGetTagsSafe(req PhotosGetTags) (response PhotosGetTagsResponse, err error) {
	err = vk.RequestUnmarshal("photos.getTags", req.params(), &response)
	return
}

// Returns the server address for photo upload.
func (vk *VK) PhotosGetUploadServerSafe(req PhotosGetUploadServer) (response PhotosGetUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getUploadServer", req.params(), &response)
	return
}

// Returns a list of photos in which a user is tagged.
func (vk *VK) PhotosGetUserPhotosSafe(req PhotosGetUserPhotos) (response PhotosGetUserPhotosResponse, err error) {
	err = vk.RequestUnmarshal("photos.getUserPhotos", req.params(), &response)
	return
}

// Returns a list of photos in which a user is tagged.
func (vk *VK) PhotosGetUserPhotosExtendedSafe(req PhotosGetUserPhotos) (response PhotosGetUserPhotosExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("photos.getUserPhotos", params, &response)
	return
}

// Returns the server address for photo upload onto a user's wall.
func (vk *VK) PhotosGetWallUploadServerSafe(req PhotosGetWallUploadServer) (response PhotosGetWallUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("photos.getWallUploadServer", req.params(), &response)
	return
}

// Makes a photo into an album cover.
func (vk *VK) PhotosMakeCoverSafe(req PhotosMakeCover) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.makeCover", req.params(), &response)
	return
}

// Moves a photo from one album to another.
func (vk *VK) PhotosMoveSafe(req PhotosMove) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.move", req.params(), &response)
	return
}

// Adds a tag on the photo.
func (vk *VK) PhotosPutTagSafe(req PhotosPutTag) (response PhotosPutTagResponse, err error) {
	err = vk.RequestUnmarshal("photos.putTag", req.params(), &response)
	return
}

// Removes a tag from a photo.
func (vk *VK) PhotosRemoveTagSafe(req PhotosRemoveTag) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.removeTag", req.params(), &response)
	return
}

// Reorders the album in the list of user albums.
func (vk *VK) PhotosReorderAlbumsSafe(req PhotosReorderAlbums) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.reorderAlbums", req.params(), &response)
	return
}

// Reorders the photo in the list of photos of the user album.
func (vk *VK) PhotosReorderPhotosSafe(req PhotosReorderPhotos) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.reorderPhotos", req.params(), &response)
	return
}

// Reports (submits a complaint about) a photo.
func (vk *VK) PhotosReportSafe(req PhotosReport) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.report", req.params(), &response)
	return
}

// Reports (submits a complaint about) a comment on a photo.
func (vk *VK) PhotosReportCommentSafe(req PhotosReportComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.reportComment", req.params(), &response)
	return
}

// Restores a deleted photo.
func (vk *VK) PhotosRestoreSafe(req PhotosRestore) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("photos.restore", req.params(), &response)
	return
}

// Restores a deleted comment on a photo.
func (vk *VK) PhotosRestoreCommentSafe(req PhotosRestoreComment) (response PhotosRestoreCommentResponse, err error) {
	err = vk.RequestUnmarshal("photos.restoreComment", req.params(), &response)
	return
}

// Saves photos after successful uploading.
func (vk *VK) PhotosSaveSafe(req PhotosSave) (response PhotosSaveResponse, err error) {
	err = vk.RequestUnmarshal("photos.save", req.params(), &response)
	return
}

// Saves market album photos after successful uploading.
func (vk *VK) PhotosSaveMarketAlbumPhotoSafe(req PhotosSaveMarketAlbumPhoto) (response PhotosSaveMarketAlbumPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveMarketAlbumPhoto", req.params(), &response)
	return
}

// Saves market photos after successful uploading.
func (vk *VK) PhotosSaveMarketPhotoSafe(req PhotosSaveMarketPhoto) (response PhotosSaveMarketPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveMarketPhoto", req.params(), &response)
	return
}

// Saves a photo after being successfully uploaded. URL obtained with [vk.com/dev/photos.getMessagesUploadServer|photos.getMessagesUploadServer] method.
func (vk *VK) PhotosSaveMessagesPhotoSafe(req PhotosSaveMessagesPhoto) (response PhotosSaveMessagesPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveMessagesPhoto", req.params(), &response)
	return
}

// Saves cover photo after successful uploading.
func (vk *VK) PhotosSaveOwnerCoverPhotoSafe(req PhotosSaveOwnerCoverPhoto) (response PhotosSaveOwnerCoverPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveOwnerCoverPhoto", req.params(), &response)
	return
}

// Saves a profile or community photo. Upload URL can be got with the [vk.com/dev/photos.getOwnerPhotoUploadServer|photos.getOwnerPhotoUploadServer] method.
func (vk *VK) PhotosSaveOwnerPhotoSafe(req PhotosSaveOwnerPhoto) (response PhotosSaveOwnerPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveOwnerPhoto", req.params(), &response)
	return
}

// Saves a photo to a user's or community's wall after being uploaded.
func (vk *VK) PhotosSaveWallPhotoSafe(req PhotosSaveWallPhoto) (response PhotosSaveWallPhotoResponse, err error) {
	err = vk.RequestUnmarshal("photos.saveWallPhoto", req.params(), &response)
	return
}

// Returns a list of photos.
func (vk *VK) PhotosSearchSafe(req PhotosSearch) (response PhotosSearchResponse, err error) {
	err = vk.RequestUnmarshal("photos.search", req.params(), &response)
	return
}

// Adds the current user's vote to the selected answer in the poll.
func (vk *VK) PollsAddVoteSafe(req PollsAddVote) (response PollsAddVoteResponse, err error) {
	err = vk.RequestUnmarshal("polls.addVote", req.params(), &response)
	return
}

// Creates polls that can be attached to the users' or communities' posts.
func (vk *VK) PollsCreateSafe(req PollsCreate) (response PollsCreateResponse, err error) {
	err = vk.RequestUnmarshal("polls.create", req.params(), &response)
	return
}

// Deletes the current user's vote from the selected answer in the poll.
func (vk *VK) PollsDeleteVoteSafe(req PollsDeleteVote) (response PollsDeleteVoteResponse, err error) {
	err = vk.RequestUnmarshal("polls.deleteVote", req.params(), &response)
	return
}

// Edits created polls
func (vk *VK) PollsEditSafe(req PollsEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("polls.edit", req.params(), &response)
	return
}

// Returns detailed information about a poll by its ID.
func (vk *VK) PollsGetByIDSafe(req PollsGetByID) (response PollsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("polls.getById", req.params(), &response)
	return
}

// Returns a list of IDs of users who selected specific answers in the poll.
func (vk *VK) PollsGetVotersSafe(req PollsGetVoters) (response PollsGetVotersResponse, err error) {
	err = vk.RequestUnmarshal("polls.getVoters", req.params(), &response)
	return
}

func (vk *VK) PrettyCardsCreateSafe(req PrettyCardsCreate) (response PrettyCardsCreateResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.create", req.params(), &response)
	return
}

func (vk *VK) PrettyCardsDeleteSafe(req PrettyCardsDelete) (response PrettyCardsDeleteResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.delete", req.params(), &response)
	return
}

func (vk *VK) PrettyCardsEditSafe(req PrettyCardsEdit) (response PrettyCardsEditResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.edit", req.params(), &response)
	return
}

func (vk *VK) PrettyCardsGetSafe(req PrettyCardsGet) (response PrettyCardsGetResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.get", req.params(), &response)
	return
}

func (vk *VK) PrettyCardsGetByIDSafe(req PrettyCardsGetByID) (response PrettyCardsGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.getById", req.params(), &response)
	return
}

func (vk *VK) PrettyCardsGetUploadURLSafe(req PrettyCardsGetUploadURL) (response PrettyCardsGetUploadURLResponse, err error) {
	err = vk.RequestUnmarshal("prettyCards.getUploadURL", req.params(), &response)
	return
}

// Allows the programmer to do a quick search for any substring.
func (vk *VK) SearchGetHintsSafe(req SearchGetHints) (response SearchGetHintsResponse, err error) {
	err = vk.RequestUnmarshal("search.getHints", req.params(), &response)
	return
}

// Adds user activity information to an application
func (vk *VK) SecureAddAppEventSafe(req SecureAddAppEvent) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("secure.addAppEvent", req.params(), &response)
	return
}

// Checks the user authentication in 'IFrame' and 'Flash' apps using the 'access_token' parameter.
func (vk *VK) SecureCheckTokenSafe(req SecureCheckToken) (response SecureCheckTokenResponse, err error) {
	err = vk.RequestUnmarshal("secure.checkToken", req.params(), &response)
	return
}

// Returns payment balance of the application in hundredth of a vote.
func (vk *VK) SecureGetAppBalanceSafe(req SecureGetAppBalance) (response SecureGetAppBalanceResponse, err error) {
	err = vk.RequestUnmarshal("secure.getAppBalance", req.params(), &response)
	return
}

// Shows a list of SMS notifications sent by the application using [vk.com/dev/secure.sendSMSNotification|secure.sendSMSNotification] method.
func (vk *VK) SecureGetSMSHistorySafe(req SecureGetSMSHistory) (response SecureGetSMSHistoryResponse, err error) {
	err = vk.RequestUnmarshal("secure.getSMSHistory", req.params(), &response)
	return
}

// Shows history of votes transaction between users and the application.
func (vk *VK) SecureGetTransactionsHistorySafe(req SecureGetTransactionsHistory) (response SecureGetTransactionsHistoryResponse, err error) {
	err = vk.RequestUnmarshal("secure.getTransactionsHistory", req.params(), &response)
	return
}

// Returns one of the previously set game levels of one or more users in the application.
func (vk *VK) SecureGetUserLevelSafe(req SecureGetUserLevel) (response SecureGetUserLevelResponse, err error) {
	err = vk.RequestUnmarshal("secure.getUserLevel", req.params(), &response)
	return
}

// Opens the game achievement and gives the user a sticker
func (vk *VK) SecureGiveEventStickerSafe(req SecureGiveEventSticker) (response SecureGiveEventStickerResponse, err error) {
	err = vk.RequestUnmarshal("secure.giveEventSticker", req.params(), &response)
	return
}

// Sends notification to the user.
func (vk *VK) SecureSendNotificationSafe(req SecureSendNotification) (response SecureSendNotificationResponse, err error) {
	err = vk.RequestUnmarshal("secure.sendNotification", req.params(), &response)
	return
}

// Sends 'SMS' notification to a user's mobile device.
func (vk *VK) SecureSendSMSNotificationSafe(req SecureSendSMSNotification) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("secure.sendSMSNotification", req.params(), &response)
	return
}

// Sets a counter which is shown to the user in bold in the left menu.
func (vk *VK) SecureSetCounterSafe(req SecureSetCounter) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("secure.setCounter", req.params(), &response)
	return
}

// Returns statistics of a community or an application.
func (vk *VK) StatsGetSafe(req StatsGet) (response StatsGetResponse, err error) {
	err = vk.RequestUnmarshal("stats.get", req.params(), &response)
	return
}

// Returns stats for a wall post.
func (vk *VK) StatsGetPostReachSafe(req StatsGetPostReach) (response StatsGetPostReachResponse, err error) {
	err = vk.RequestUnmarshal("stats.getPostReach", req.params(), &response)
	return
}

func (vk *VK) StatsTrackVisitorSafe(req StatsTrackVisitor) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stats.trackVisitor", req.params(), &response)
	return
}

// Returns data required to show the status of a user or community.
func (vk *VK) StatusGetSafe(req StatusGet) (response StatusGetResponse, err error) {
	err = vk.RequestUnmarshal("status.get", req.params(), &response)
	return
}

// Sets a new status for the current user.
func (vk *VK) StatusSetSafe(req StatusSet) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("status.set", req.params(), &response)
	return
}

// Returns a value of variable with the name set by key parameter.
func (vk *VK) StorageGetSafe(req StorageGet) (response StorageGetV5110Response, err error) {
	err = vk.RequestUnmarshal("storage.get", req.params(), &response)
	return
}

// Returns a value of variable with the name set by key parameter.
func (vk *VK) StorageGetWithKeysSafe(req StorageGet) (response StorageGetWithKeysResponse, err error) {
	err = vk.RequestUnmarshal("storage.get", req.params(), &response)
	return
}

// Returns the names of all variables.
func (vk *VK) StorageGetKeysSafe(req StorageGetKeys) (response StorageGetKeysResponse, err error) {
	err = vk.RequestUnmarshal("storage.getKeys", req.params(), &response)
	return
}

// Saves a value of variable with the name set by 'key' parameter.
func (vk *VK) StorageSetSafe(req StorageSet) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("storage.set", req.params(), &response)
	return
}

// Allows to hide stories from chosen sources from current user's feed.
func (vk *VK) StoriesBanOwnerSafe(req StoriesBanOwner) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.banOwner", req.params(), &response)
	return
}

// Allows to delete story.
func (vk *VK) StoriesDeleteSafe(req StoriesDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.delete", req.params(), &response)
	return
}

// Returns stories available for current user.
func (vk *VK) StoriesGetSafe(req StoriesGet) (response StoriesGetV5113Response, err error) {
	err = vk.RequestUnmarshal("stories.get", req.params(), &response)
	return
}

// Returns list of sources hidden from current user's feed.
func (vk *VK) StoriesGetBannedSafe(req StoriesGetBanned) (response StoriesGetBannedResponse, err error) {
	err = vk.RequestUnmarshal("stories.getBanned", req.params(), &response)
	return
}

// Returns list of sources hidden from current user's feed.
func (vk *VK) StoriesGetBannedExtendedSafe(req StoriesGetBanned) (response StoriesGetBannedExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("stories.getBanned", params, &response)
	return
}

// Returns story by its ID.
func (vk *VK) StoriesGetByIDSafe(req StoriesGetByID) (response StoriesGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("stories.getById", req.params(), &response)
	return
}

// Returns story by its ID.
func (vk *VK) StoriesGetByIDExtendedSafe(req StoriesGetByID) (response StoriesGetByIDExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("stories.getById", params, &response)
	return
}

// Returns URL for uploading a story with photo.
func (vk *VK) StoriesGetPhotoUploadServerSafe(req StoriesGetPhotoUploadServer) (response StoriesGetPhotoUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("stories.getPhotoUploadServer", req.params(), &response)
	return
}

// Returns replies to the story.
func (vk *VK) StoriesGetRepliesSafe(req StoriesGetReplies) (response StoriesGetV5113Response, err error) {
	err = vk.RequestUnmarshal("stories.getReplies", req.params(), &response)
	return
}

// Returns stories available for current user.
func (vk *VK) StoriesGetStatsSafe(req StoriesGetStats) (response StoriesGetStatsResponse, err error) {
	err = vk.RequestUnmarshal("stories.getStats", req.params(), &response)
	return
}

// Allows to receive URL for uploading story with video.
func (vk *VK) StoriesGetVideoUploadServerSafe(req StoriesGetVideoUploadServer) (response StoriesGetVideoUploadServerResponse, err error) {
	err = vk.RequestUnmarshal("stories.getVideoUploadServer", req.params(), &response)
	return
}

// Returns a list of story viewers.
func (vk *VK) StoriesGetViewersSafe(req StoriesGetViewers) (response StoriesGetViewersExtendedV5115Response, err error) {
	err = vk.RequestUnmarshal("stories.getViewers", req.params(), &response)
	return
}

// Returns a list of story viewers.
func (vk *VK) StoriesGetViewersExtendedSafe(req StoriesGetViewers) (response StoriesGetViewersExtendedV5115Response, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("stories.getViewers", params, &response)
	return
}

// Hides all replies in the last 24 hours from the user to current user's stories.
func (vk *VK) StoriesHideAllRepliesSafe(req StoriesHideAllReplies) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.hideAllReplies", req.params(), &response)
	return
}

// Hides the reply to the current user's story.
func (vk *VK) StoriesHideReplySafe(req StoriesHideReply) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.hideReply", req.params(), &response)
	return
}

func (vk *VK) StoriesSearchSafe(req StoriesSearch) (response StoriesGetV5113Response, err error) {
	err = vk.RequestUnmarshal("stories.search", req.params(), &response)
	return
}

// Allows to show stories from hidden sources in current user's feed.
func (vk *VK) StoriesUnbanOwnerSafe(req StoriesUnbanOwner) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("stories.unbanOwner", req.params(), &response)
	return
}

// Allows to receive data for the connection to Streaming API.
func (vk *VK) StreamingGetServerURLSafe(req StreamingGetServerURL) (response StreamingGetServerURLResponse, err error) {
	err = vk.RequestUnmarshal("streaming.getServerUrl", req.params(), &response)
	return
}

func (vk *VK) StreamingSetSettingsSafe(req StreamingSetSettings) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("streaming.setSettings", req.params(), &response)
	return
}

// Returns detailed information on users.
func (vk *VK) UsersGetSafe(req UsersGet) (response UsersGetResponse, err error) {
	err = vk.RequestUnmarshal("users.get", req.params(), &response)
	return
}

// Returns a list of IDs of followers of the user in question, sorted by date added, most recent first.
func (vk *VK) UsersGetFollowersSafe(req UsersGetFollowers) (response UsersGetFollowersResponse, err error) {
	err = vk.RequestUnmarshal("users.getFollowers", req.params(), &response)
	return
}

// Returns a list of IDs of followers of the user in question, sorted by date added, most recent first.
func (vk *VK) UsersGetFollowersFieldsSafe(req UsersGetFollowers) (response UsersGetFollowersFieldsResponse, err error) {
	err = vk.RequestUnmarshal("users.getFollowers", req.params(), &response)
	return
}

// Returns a list of IDs of users and communities followed by the user.
func (vk *VK) UsersGetSubscriptionsSafe(req UsersGetSubscriptions) (response UsersGetSubscriptionsResponse, err error) {
	err = vk.RequestUnmarshal("users.getSubscriptions", req.params(), &response)
	return
}

// Returns a list of IDs of users and communities followed by the user.
func (vk *VK) UsersGetSubscriptionsExtendedSafe(req UsersGetSubscriptions) (response UsersGetSubscriptionsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("users.getSubscriptions", params, &response)
	return
}

// Reports (submits a complain about) a user.
func (vk *VK) UsersReportSafe(req UsersReport) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("users.report", req.params(), &response)
	return
}

// Returns a list of users matching the search criteria.
func (vk *VK) UsersSearchSafe(req UsersSearch) (response UsersSearchResponse, err error) {
	err = vk.RequestUnmarshal("users.search", req.params(), &response)
	return
}

// Checks whether a link is blocked in VK.
func (vk *VK) UtilsCheckLinkSafe(req UtilsCheckLink) (response UtilsCheckLinkResponse, err error) {
	err = vk.RequestUnmarshal("utils.checkLink", req.params(), &response)
	return
}

// Deletes shortened link from user's list.
func (vk *VK) UtilsDeleteFromLastShortenedSafe(req UtilsDeleteFromLastShortened) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("utils.deleteFromLastShortened", req.params(), &response)
	return
}

// Returns a list of user's shortened links.
func (vk *VK) UtilsGetLastShortenedLinksSafe(req UtilsGetLastShortenedLinks) (response UtilsGetLastShortenedLinksResponse, err error) {
	err = vk.RequestUnmarshal("utils.getLastShortenedLinks", req.params(), &response)
	return
}

// Returns stats data for shortened link.
func (vk *VK) UtilsGetLinkStatsSafe(req UtilsGetLinkStats) (response UtilsGetLinkStatsResponse, err error) {
	err = vk.RequestUnmarshal("utils.getLinkStats", req.params(), &response)
	return
}

// Returns stats data for shortened link.
func (vk *VK) UtilsGetLinkStatsExtendedSafe(req UtilsGetLinkStats) (response UtilsGetLinkStatsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("utils.getLinkStats", params, &response)
	return
}

// Returns the current time of the VK server.
func (vk *VK) UtilsGetServerTimeSafe(req UtilsGetServerTime) (response UtilsGetServerTimeResponse, err error) {
	err = vk.RequestUnmarshal("utils.getServerTime", req.params(), &response)
	return
}

// Allows to receive a link shortened via vk.cc.
func (vk *VK) UtilsGetShortLinkSafe(req UtilsGetShortLink) (response UtilsGetShortLinkResponse, err error) {
	err = vk.RequestUnmarshal("utils.getShortLink", req.params(), &response)
	return
}

// Detects a type of object (e.g., user, community, application) and its ID by screen name.
func (vk *VK) UtilsResolveScreenNameSafe(req UtilsResolveScreenName) (response UtilsResolveScreenNameResponse, err error) {
	err = vk.RequestUnmarshal("utils.resolveScreenName", req.params(), &response)
	return
}

// Adds a video to a user or community page.
func (vk *VK) VideoAddSafe(req VideoAdd) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.add", req.params(), &response)
	return
}

// Creates an empty album for videos.
func (vk *VK) VideoAddAlbumSafe(req VideoAddAlbum) (response VideoAddAlbumResponse, err error) {
	err = vk.RequestUnmarshal("video.addAlbum", req.params(), &response)
	return
}

func (vk *VK) VideoAddToAlbumSafe(req VideoAddToAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.addToAlbum", req.params(), &response)
	return
}

// Adds a new comment on a video.
func (vk *VK) VideoCreateCommentSafe(req VideoCreateComment) (response VideoCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("video.createComment", req.params(), &response)
	return
}

// Deletes a video from a user or community page.
func (vk *VK) VideoDeleteSafe(req VideoDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.delete", req.params(), &response)
	return
}

// Deletes a video album.
func (vk *VK) VideoDeleteAlbumSafe(req VideoDeleteAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.deleteAlbum", req.params(), &response)
	return
}

// Deletes a comment on a video.
func (vk *VK) VideoDeleteCommentSafe(req VideoDeleteComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.deleteComment", req.params(), &response)
	return
}

// Edits information about a video on a user or community page.
func (vk *VK) VideoEditSafe(req VideoEdit) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.edit", req.params(), &response)
	return
}

// Edits the title of a video album.
func (vk *VK) VideoEditAlbumSafe(req VideoEditAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.editAlbum", req.params(), &response)
	return
}

// Edits the text of a comment on a video.
func (vk *VK) VideoEditCommentSafe(req VideoEditComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.editComment", req.params(), &response)
	return
}

// Returns detailed information about videos.
func (vk *VK) VideoGetSafe(req VideoGet) (response VideoGetResponse, err error) {
	err = vk.RequestUnmarshal("video.get", req.params(), &response)
	return
}

// Returns detailed information about videos.
func (vk *VK) VideoGetExtendedSafe(req VideoGet) (response VideoGetExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("video.get", params, &response)
	return
}

// Returns video album info
func (vk *VK) VideoGetAlbumByIDSafe(req VideoGetAlbumByID) (response VideoGetAlbumByIDResponse, err error) {
	err = vk.RequestUnmarshal("video.getAlbumById", req.params(), &response)
	return
}

// Returns a list of video albums owned by a user or community.
func (vk *VK) VideoGetAlbumsSafe(req VideoGetAlbums) (response VideoGetAlbumsResponse, err error) {
	err = vk.RequestUnmarshal("video.getAlbums", req.params(), &response)
	return
}

// Returns a list of video albums owned by a user or community.
func (vk *VK) VideoGetAlbumsExtendedSafe(req VideoGetAlbums) (response VideoGetAlbumsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("video.getAlbums", params, &response)
	return
}

func (vk *VK) VideoGetAlbumsByVideoSafe(req VideoGetAlbumsByVideo) (response VideoGetAlbumsByVideoResponse, err error) {
	err = vk.RequestUnmarshal("video.getAlbumsByVideo", req.params(), &response)
	return
}

func (vk *VK) VideoGetAlbumsByVideoExtendedSafe(req VideoGetAlbumsByVideo) (response VideoGetAlbumsByVideoExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("video.getAlbumsByVideo", params, &response)
	return
}

// Returns a list of comments on a video.
func (vk *VK) VideoGetCommentsSafe(req VideoGetComments) (response VideoGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("video.getComments", req.params(), &response)
	return
}

// Returns a list of comments on a video.
func (vk *VK) VideoGetCommentsExtendedSafe(req VideoGetComments) (response VideoGetCommentsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("video.getComments", params, &response)
	return
}

func (vk *VK) VideoRemoveFromAlbumSafe(req VideoRemoveFromAlbum) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.removeFromAlbum", req.params(), &response)
	return
}

// Reorders the album in the list of user video albums.
func (vk *VK) VideoReorderAlbumsSafe(req VideoReorderAlbums) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.reorderAlbums", req.params(), &response)
	return
}

// Reorders the video in the video album.
func (vk *VK) VideoReorderVideosSafe(req VideoReorderVideos) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.reorderVideos", req.params(), &response)
	return
}

// Reports (submits a complaint about) a video.
func (vk *VK) VideoReportSafe(req VideoReport) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.report", req.params(), &response)
	return
}

// Reports (submits a complaint about) a comment on a video.
func (vk *VK) VideoReportCommentSafe(req VideoReportComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.reportComment", req.params(), &response)
	return
}

// Restores a previously deleted video.
func (vk *VK) VideoRestoreSafe(req VideoRestore) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("video.restore", req.params(), &response)
	return
}

// Restores a previously deleted comment on a video.
func (vk *VK) VideoRestoreCommentSafe(req VideoRestoreComment) (response VideoRestoreCommentResponse, err error) {
	err = vk.RequestUnmarshal("video.restoreComment", req.params(), &response)
	return
}

// Returns a server address (required for upload) and video data.
func (vk *VK) VideoSaveSafe(req VideoSave) (response VideoSaveResponse, err error) {
	err = vk.RequestUnmarshal("video.save", req.params(), &response)
	return
}

// Returns a list of videos under the set search criterion.
func (vk *VK) VideoSearchSafe(req VideoSearch) (response VideoSearchResponse, err error) {
	err = vk.RequestUnmarshal("video.search", req.params(), &response)
	return
}

// Returns a list of videos under the set search criterion.
func (vk *VK) VideoSearchExtendedSafe(req VideoSearch) (response VideoSearchExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("video.search", params, &response)
	return
}

func (vk *VK) WallCloseCommentsSafe(req WallCloseComments) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("wall.closeComments", req.params(), &response)
	return
}

// Adds a comment to a post on a user wall or community wall.
func (vk *VK) WallCreateCommentSafe(req WallCreateComment) (response WallCreateCommentResponse, err error) {
	err = vk.RequestUnmarshal("wall.createComment", req.params(), &response)
	return
}

// Deletes a post from a user wall or community wall.
func (vk *VK) WallDeleteSafe(req WallDelete) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.delete", req.params(), &response)
	return
}

// Deletes a comment on a post on a user wall or community wall.
func (vk *VK) WallDeleteCommentSafe(req WallDeleteComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.deleteComment", req.params(), &response)
	return
}

// Edits a post on a user wall or community wall.
func (vk *VK) WallEditSafe(req WallEdit) (response WallEditResponse, err error) {
	err = vk.RequestUnmarshal("wall.edit", req.params(), &response)
	return
}

// Allows to edit hidden post.
func (vk *VK) WallEditAdsStealthSafe(req WallEditAdsStealth) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.editAdsStealth", req.params(), &response)
	return
}

// Edits a comment on a user wall or community wall.
func (vk *VK) WallEditCommentSafe(req WallEditComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.editComment", req.params(), &response)
	return
}

// Returns a list of posts on a user wall or community wall.
func (vk *VK) WallGetSafe(req WallGet) (response WallGetResponse, err error) {
	err = vk.RequestUnmarshal("wall.get", req.params(), &response)
	return
}

// Returns a list of posts on a user wall or community wall.
func (vk *VK) WallGetExtendedSafe(req WallGet) (response WallGetExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("wall.get", params, &response)
	return
}

// Returns a list of posts from user or community walls by their IDs.
func (vk *VK) WallGetByIDSafe(req WallGetByID) (response WallGetByIDResponse, err error) {
	err = vk.RequestUnmarshal("wall.getById", req.params(), &response)
	return
}

// Returns a list of posts from user or community walls by their IDs.
func (vk *VK) WallGetByIDExtendedSafe(req WallGetByID) (response WallGetByIDExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("wall.getById", params, &response)
	return
}

// Returns a comment on a post on a user wall or community wall.
func (vk *VK) WallGetCommentSafe(req WallGetComment) (response WallGetCommentResponse, err error) {
	err = vk.RequestUnmarshal("wall.getComment", req.params(), &response)
	return
}

// Returns a comment on a post on a user wall or community wall.
func (vk *VK) WallGetCommentExtendedSafe(req WallGetComment) (response WallGetCommentExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("wall.getComment", params, &response)
	return
}

// Returns a list of comments on a post on a user wall or community wall.
func (vk *VK) WallGetCommentsSafe(req WallGetComments) (response WallGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("wall.getComments", req.params(), &response)
	return
}

// Returns a list of comments on a post on a user wall or community wall.
func (vk *VK) WallGetCommentsExtendedSafe(req WallGetComments) (response WallGetCommentsExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("wall.getComments", params, &response)
	return
}

// Returns information about reposts of a post on user wall or community wall.
func (vk *VK) WallGetRepostsSafe(req WallGetReposts) (response WallGetRepostsResponse, err error) {
	err = vk.RequestUnmarshal("wall.getReposts", req.params(), &response)
	return
}

func (vk *VK) WallOpenCommentsSafe(req WallOpenComments) (response BaseBoolResponse, err error) {
	err = vk.RequestUnmarshal("wall.openComments", req.params(), &response)
	return
}

// Pins the post on wall.
func (vk *VK) WallPinSafe(req WallPin) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.pin", req.params(), &response)
	return
}

// Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.
func (vk *VK) WallPostSafe(req WallPost) (response WallPostResponse, err error) {
	err = vk.RequestUnmarshal("wall.post", req.params(), &response)
	return
}

// Allows to create hidden post which will not be shown on the community's wall and can be used for creating an ad with type "Community post".
func (vk *VK) WallPostAdsStealthSafe(req WallPostAdsStealth) (response WallPostAdsStealthResponse, err error) {
	err = vk.RequestUnmarshal("wall.postAdsStealth", req.params(), &response)
	return
}

// Reports (submits a complaint about) a comment on a post on a user wall or community wall.
func (vk *VK) WallReportCommentSafe(req WallReportComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.reportComment", req.params(), &response)
	return
}

// Reports (submits a complaint about) a post on a user wall or community wall.
func (vk *VK) WallReportPostSafe(req WallReportPost) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.reportPost", req.params(), &response)
	return
}

// Reposts (copies) an object to a user wall or community wall.
func (vk *VK) WallRepostSafe(req WallRepost) (response WallRepostResponse, err error) {
	err = vk.RequestUnmarshal("wall.repost", req.params(), &response)
	return
}

// Restores a post deleted from a user wall or community wall.
func (vk *VK) WallRestoreSafe(req WallRestore) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.restore", req.params(), &response)
	return
}

// Restores a comment deleted from a user wall or community wall.
func (vk *VK) WallRestoreCommentSafe(req WallRestoreComment) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.restoreComment", req.params(), &response)
	return
}

// Allows to search posts on user or community walls.
func (vk *VK) WallSearchSafe(req WallSearch) (response WallSearchResponse, err error) {
	err = vk.RequestUnmarshal("wall.search", req.params(), &response)
	return
}

// Allows to search posts on user or community walls.
func (vk *VK) WallSearchExtendedSafe(req WallSearch) (response WallSearchExtendedResponse, err error) {
	params := req.params()
	params["extended"] = true
	err = vk.RequestUnmarshal("wall.search", params, &response)
	return
}

// Unpins the post on wall.
func (vk *VK) WallUnpinSafe(req WallUnpin) (response BaseOkResponse, err error) {
	err = vk.RequestUnmarshal("wall.unpin", req.params(), &response)
	return
}

// Gets a list of comments for the page added through the [vk.com/dev/Comments|Comments widget].
func (vk *VK) WidgetsGetCommentsSafe(req WidgetsGetComments) (response WidgetsGetCommentsResponse, err error) {
	err = vk.RequestUnmarshal("widgets.getComments", req.params(), &response)
	return
}

// Gets a list of application/site pages where the [vk.com/dev/Comments|Comments widget] or [vk.com/dev/Like|Like widget] is installed.
func (vk *VK) WidgetsGetPagesSafe(req WidgetsGetPages) (response WidgetsGetPagesResponse, err error) {
	err = vk.RequestUnmarshal("widgets.getPages", req.params(), &response)
	return
}
